/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/axios/index.js":
/*!*************************************!*\
  !*** ./node_modules/axios/index.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./lib/axios */ "./node_modules/axios/lib/axios.js");

/***/ }),

/***/ "./node_modules/axios/lib/adapters/xhr.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/adapters/xhr.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var settle = __webpack_require__(/*! ./../core/settle */ "./node_modules/axios/lib/core/settle.js");
var buildURL = __webpack_require__(/*! ./../helpers/buildURL */ "./node_modules/axios/lib/helpers/buildURL.js");
var parseHeaders = __webpack_require__(/*! ./../helpers/parseHeaders */ "./node_modules/axios/lib/helpers/parseHeaders.js");
var isURLSameOrigin = __webpack_require__(/*! ./../helpers/isURLSameOrigin */ "./node_modules/axios/lib/helpers/isURLSameOrigin.js");
var createError = __webpack_require__(/*! ../core/createError */ "./node_modules/axios/lib/core/createError.js");
var btoa = (typeof window !== 'undefined' && window.btoa && window.btoa.bind(window)) || __webpack_require__(/*! ./../helpers/btoa */ "./node_modules/axios/lib/helpers/btoa.js");

module.exports = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;

    if (utils.isFormData(requestData)) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest();
    var loadEvent = 'onreadystatechange';
    var xDomain = false;

    // For IE 8/9 CORS support
    // Only supports POST and GET calls and doesn't returns the response headers.
    // DON'T do this for testing b/c XMLHttpRequest is mocked, not XDomainRequest.
    if ( true &&
        typeof window !== 'undefined' &&
        window.XDomainRequest && !('withCredentials' in request) &&
        !isURLSameOrigin(config.url)) {
      request = new window.XDomainRequest();
      loadEvent = 'onload';
      xDomain = true;
      request.onprogress = function handleProgress() {};
      request.ontimeout = function handleTimeout() {};
    }

    // HTTP basic authentication
    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password || '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;

    // Listen for ready state
    request[loadEvent] = function handleLoad() {
      if (!request || (request.readyState !== 4 && !xDomain)) {
        return;
      }

      // The request errored out and we didn't get a response, this will be
      // handled by onerror instead
      // With one exception: request that using file: protocol, most browsers
      // will return status as 0 even though it's a successful request
      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
        return;
      }

      // Prepare the response
      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
      var response = {
        data: responseData,
        // IE sends 1223 instead of 204 (https://github.com/axios/axios/issues/201)
        status: request.status === 1223 ? 204 : request.status,
        statusText: request.status === 1223 ? 'No Content' : request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };

      settle(resolve, reject, response);

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(createError('Network Error', config, null, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED',
        request));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if (utils.isStandardBrowserEnv()) {
      var cookies = __webpack_require__(/*! ./../helpers/cookies */ "./node_modules/axios/lib/helpers/cookies.js");

      // Add xsrf header
      var xsrfValue = (config.withCredentials || isURLSameOrigin(config.url)) && config.xsrfCookieName ?
          cookies.read(config.xsrfCookieName) :
          undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    }

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    }

    // Add withCredentials to request if needed
    if (config.withCredentials) {
      request.withCredentials = true;
    }

    // Add responseType to request if needed
    if (config.responseType) {
      try {
        request.responseType = config.responseType;
      } catch (e) {
        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
        if (config.responseType !== 'json') {
          throw e;
        }
      }
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken) {
      // Handle cancellation
      config.cancelToken.promise.then(function onCanceled(cancel) {
        if (!request) {
          return;
        }

        request.abort();
        reject(cancel);
        // Clean up request
        request = null;
      });
    }

    if (requestData === undefined) {
      requestData = null;
    }

    // Send the request
    request.send(requestData);
  });
};


/***/ }),

/***/ "./node_modules/axios/lib/axios.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/axios.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./utils */ "./node_modules/axios/lib/utils.js");
var bind = __webpack_require__(/*! ./helpers/bind */ "./node_modules/axios/lib/helpers/bind.js");
var Axios = __webpack_require__(/*! ./core/Axios */ "./node_modules/axios/lib/core/Axios.js");
var defaults = __webpack_require__(/*! ./defaults */ "./node_modules/axios/lib/defaults.js");

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context);

  // Copy axios.prototype to instance
  utils.extend(instance, Axios.prototype, context);

  // Copy context to instance
  utils.extend(instance, context);

  return instance;
}

// Create the default instance to be exported
var axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
axios.Axios = Axios;

// Factory for creating new instances
axios.create = function create(instanceConfig) {
  return createInstance(utils.merge(defaults, instanceConfig));
};

// Expose Cancel & CancelToken
axios.Cancel = __webpack_require__(/*! ./cancel/Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");
axios.CancelToken = __webpack_require__(/*! ./cancel/CancelToken */ "./node_modules/axios/lib/cancel/CancelToken.js");
axios.isCancel = __webpack_require__(/*! ./cancel/isCancel */ "./node_modules/axios/lib/cancel/isCancel.js");

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = __webpack_require__(/*! ./helpers/spread */ "./node_modules/axios/lib/helpers/spread.js");

module.exports = axios;

// Allow use of default import syntax in TypeScript
module.exports.default = axios;


/***/ }),

/***/ "./node_modules/axios/lib/cancel/Cancel.js":
/*!*************************************************!*\
  !*** ./node_modules/axios/lib/cancel/Cancel.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */
function Cancel(message) {
  this.message = message;
}

Cancel.prototype.toString = function toString() {
  return 'Cancel' + (this.message ? ': ' + this.message : '');
};

Cancel.prototype.__CANCEL__ = true;

module.exports = Cancel;


/***/ }),

/***/ "./node_modules/axios/lib/cancel/CancelToken.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/cancel/CancelToken.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Cancel = __webpack_require__(/*! ./Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */
function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;
  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });

  var token = this;
  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new Cancel(message);
    resolvePromise(token.reason);
  });
}

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */
CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;


/***/ }),

/***/ "./node_modules/axios/lib/cancel/isCancel.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/cancel/isCancel.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};


/***/ }),

/***/ "./node_modules/axios/lib/core/Axios.js":
/*!**********************************************!*\
  !*** ./node_modules/axios/lib/core/Axios.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var defaults = __webpack_require__(/*! ./../defaults */ "./node_modules/axios/lib/defaults.js");
var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var InterceptorManager = __webpack_require__(/*! ./InterceptorManager */ "./node_modules/axios/lib/core/InterceptorManager.js");
var dispatchRequest = __webpack_require__(/*! ./dispatchRequest */ "./node_modules/axios/lib/core/dispatchRequest.js");

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */
function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */
Axios.prototype.request = function request(config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof config === 'string') {
    config = utils.merge({
      url: arguments[0]
    }, arguments[1]);
  }

  config = utils.merge(defaults, {method: 'get'}, this.defaults, config);
  config.method = config.method.toLowerCase();

  // Hook up interceptors middleware
  var chain = [dispatchRequest, undefined];
  var promise = Promise.resolve(config);

  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    chain.unshift(interceptor.fulfilled, interceptor.rejected);
  });

  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    chain.push(interceptor.fulfilled, interceptor.rejected);
  });

  while (chain.length) {
    promise = promise.then(chain.shift(), chain.shift());
  }

  return promise;
};

// Provide aliases for supported request methods
utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request(utils.merge(config || {}, {
      method: method,
      url: url
    }));
  };
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, data, config) {
    return this.request(utils.merge(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});

module.exports = Axios;


/***/ }),

/***/ "./node_modules/axios/lib/core/InterceptorManager.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/core/InterceptorManager.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

function InterceptorManager() {
  this.handlers = [];
}

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */
InterceptorManager.prototype.use = function use(fulfilled, rejected) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected
  });
  return this.handlers.length - 1;
};

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */
InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */
InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

module.exports = InterceptorManager;


/***/ }),

/***/ "./node_modules/axios/lib/core/createError.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/createError.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var enhanceError = __webpack_require__(/*! ./enhanceError */ "./node_modules/axios/lib/core/enhanceError.js");

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */
module.exports = function createError(message, config, code, request, response) {
  var error = new Error(message);
  return enhanceError(error, config, code, request, response);
};


/***/ }),

/***/ "./node_modules/axios/lib/core/dispatchRequest.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/core/dispatchRequest.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var transformData = __webpack_require__(/*! ./transformData */ "./node_modules/axios/lib/core/transformData.js");
var isCancel = __webpack_require__(/*! ../cancel/isCancel */ "./node_modules/axios/lib/cancel/isCancel.js");
var defaults = __webpack_require__(/*! ../defaults */ "./node_modules/axios/lib/defaults.js");
var isAbsoluteURL = __webpack_require__(/*! ./../helpers/isAbsoluteURL */ "./node_modules/axios/lib/helpers/isAbsoluteURL.js");
var combineURLs = __webpack_require__(/*! ./../helpers/combineURLs */ "./node_modules/axios/lib/helpers/combineURLs.js");

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */
module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  // Support baseURL config
  if (config.baseURL && !isAbsoluteURL(config.url)) {
    config.url = combineURLs(config.baseURL, config.url);
  }

  // Ensure headers exist
  config.headers = config.headers || {};

  // Transform request data
  config.data = transformData(
    config.data,
    config.headers,
    config.transformRequest
  );

  // Flatten headers
  config.headers = utils.merge(
    config.headers.common || {},
    config.headers[config.method] || {},
    config.headers || {}
  );

  utils.forEach(
    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
    function cleanHeaderConfig(method) {
      delete config.headers[method];
    }
  );

  var adapter = config.adapter || defaults.adapter;

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData(
      response.data,
      response.headers,
      config.transformResponse
    );

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData(
          reason.response.data,
          reason.response.headers,
          config.transformResponse
        );
      }
    }

    return Promise.reject(reason);
  });
};


/***/ }),

/***/ "./node_modules/axios/lib/core/enhanceError.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/core/enhanceError.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */
module.exports = function enhanceError(error, config, code, request, response) {
  error.config = config;
  if (code) {
    error.code = code;
  }
  error.request = request;
  error.response = response;
  return error;
};


/***/ }),

/***/ "./node_modules/axios/lib/core/settle.js":
/*!***********************************************!*\
  !*** ./node_modules/axios/lib/core/settle.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var createError = __webpack_require__(/*! ./createError */ "./node_modules/axios/lib/core/createError.js");

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */
module.exports = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;
  // Note: status is not exposed by XDomainRequest
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(createError(
      'Request failed with status code ' + response.status,
      response.config,
      null,
      response.request,
      response
    ));
  }
};


/***/ }),

/***/ "./node_modules/axios/lib/core/transformData.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/transformData.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */
module.exports = function transformData(data, headers, fns) {
  /*eslint no-param-reassign:0*/
  utils.forEach(fns, function transform(fn) {
    data = fn(data, headers);
  });

  return data;
};


/***/ }),

/***/ "./node_modules/axios/lib/defaults.js":
/*!********************************************!*\
  !*** ./node_modules/axios/lib/defaults.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var utils = __webpack_require__(/*! ./utils */ "./node_modules/axios/lib/utils.js");
var normalizeHeaderName = __webpack_require__(/*! ./helpers/normalizeHeaderName */ "./node_modules/axios/lib/helpers/normalizeHeaderName.js");

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;
  if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = __webpack_require__(/*! ./adapters/xhr */ "./node_modules/axios/lib/adapters/xhr.js");
  } else if (typeof process !== 'undefined') {
    // For node use HTTP adapter
    adapter = __webpack_require__(/*! ./adapters/http */ "./node_modules/axios/lib/adapters/xhr.js");
  }
  return adapter;
}

var defaults = {
  adapter: getDefaultAdapter(),

  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Content-Type');
    if (utils.isFormData(data) ||
      utils.isArrayBuffer(data) ||
      utils.isBuffer(data) ||
      utils.isStream(data) ||
      utils.isFile(data) ||
      utils.isBlob(data)
    ) {
      return data;
    }
    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }
    if (utils.isObject(data)) {
      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
      return JSON.stringify(data);
    }
    return data;
  }],

  transformResponse: [function transformResponse(data) {
    /*eslint no-param-reassign:0*/
    if (typeof data === 'string') {
      try {
        data = JSON.parse(data);
      } catch (e) { /* Ignore */ }
    }
    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  }
};

defaults.headers = {
  common: {
    'Accept': 'application/json, text/plain, */*'
  }
};

utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});

module.exports = defaults;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/axios/lib/helpers/bind.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/helpers/bind.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }
    return fn.apply(thisArg, args);
  };
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/btoa.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/helpers/btoa.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// btoa polyfill for IE<10 courtesy https://github.com/davidchambers/Base64.js

var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

function E() {
  this.message = 'String contains an invalid character';
}
E.prototype = new Error;
E.prototype.code = 5;
E.prototype.name = 'InvalidCharacterError';

function btoa(input) {
  var str = String(input);
  var output = '';
  for (
    // initialize result and counter
    var block, charCode, idx = 0, map = chars;
    // if the next str index does not exist:
    //   change the mapping table to "="
    //   check if d has no fractional digits
    str.charAt(idx | 0) || (map = '=', idx % 1);
    // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
    output += map.charAt(63 & block >> 8 - idx % 1 * 8)
  ) {
    charCode = str.charCodeAt(idx += 3 / 4);
    if (charCode > 0xFF) {
      throw new E();
    }
    block = block << 8 | charCode;
  }
  return output;
}

module.exports = btoa;


/***/ }),

/***/ "./node_modules/axios/lib/helpers/buildURL.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/buildURL.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

function encode(val) {
  return encodeURIComponent(val).
    replace(/%40/gi, '@').
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */
module.exports = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];

    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      } else {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(encode(key) + '=' + encode(v));
      });
    });

    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/combineURLs.js":
/*!*******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/combineURLs.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */
module.exports = function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/cookies.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/helpers/cookies.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs support document.cookie
  (function standardBrowserEnv() {
    return {
      write: function write(name, value, expires, path, domain, secure) {
        var cookie = [];
        cookie.push(name + '=' + encodeURIComponent(value));

        if (utils.isNumber(expires)) {
          cookie.push('expires=' + new Date(expires).toGMTString());
        }

        if (utils.isString(path)) {
          cookie.push('path=' + path);
        }

        if (utils.isString(domain)) {
          cookie.push('domain=' + domain);
        }

        if (secure === true) {
          cookie.push('secure');
        }

        document.cookie = cookie.join('; ');
      },

      read: function read(name) {
        var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
        return (match ? decodeURIComponent(match[3]) : null);
      },

      remove: function remove(name) {
        this.write(name, '', Date.now() - 86400000);
      }
    };
  })() :

  // Non standard browser env (web workers, react-native) lack needed support.
  (function nonStandardBrowserEnv() {
    return {
      write: function write() {},
      read: function read() { return null; },
      remove: function remove() {}
    };
  })()
);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isAbsoluteURL.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAbsoluteURL.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
module.exports = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isURLSameOrigin.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isURLSameOrigin.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
  (function standardBrowserEnv() {
    var msie = /(msie|trident)/i.test(navigator.userAgent);
    var urlParsingNode = document.createElement('a');
    var originURL;

    /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
    function resolveURL(url) {
      var href = url;

      if (msie) {
        // IE needs attribute set twice to normalize properties
        urlParsingNode.setAttribute('href', href);
        href = urlParsingNode.href;
      }

      urlParsingNode.setAttribute('href', href);

      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
      return {
        href: urlParsingNode.href,
        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
        host: urlParsingNode.host,
        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
        hostname: urlParsingNode.hostname,
        port: urlParsingNode.port,
        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
                  urlParsingNode.pathname :
                  '/' + urlParsingNode.pathname
      };
    }

    originURL = resolveURL(window.location.href);

    /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
    return function isURLSameOrigin(requestURL) {
      var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
      return (parsed.protocol === originURL.protocol &&
            parsed.host === originURL.host);
    };
  })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
  (function nonStandardBrowserEnv() {
    return function isURLSameOrigin() {
      return true;
    };
  })()
);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/normalizeHeaderName.js":
/*!***************************************************************!*\
  !*** ./node_modules/axios/lib/helpers/normalizeHeaderName.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");

module.exports = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/parseHeaders.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/parseHeaders.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
var ignoreDuplicateOf = [
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
];

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */
module.exports = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) { return parsed; }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }
      if (key === 'set-cookie') {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    }
  });

  return parsed;
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/spread.js":
/*!**************************************************!*\
  !*** ./node_modules/axios/lib/helpers/spread.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */
module.exports = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};


/***/ }),

/***/ "./node_modules/axios/lib/utils.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/utils.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var bind = __webpack_require__(/*! ./helpers/bind */ "./node_modules/axios/lib/helpers/bind.js");
var isBuffer = __webpack_require__(/*! is-buffer */ "./node_modules/is-buffer/index.js");

/*global toString:true*/

// utils is a library of generic helper functions non-specific to axios

var toString = Object.prototype.toString;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */
function isArray(val) {
  return toString.call(val) === '[object Array]';
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
function isArrayBuffer(val) {
  return toString.call(val) === '[object ArrayBuffer]';
}

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */
function isFormData(val) {
  return (typeof FormData !== 'undefined') && (val instanceof FormData);
}

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  var result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */
function isString(val) {
  return typeof val === 'string';
}

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */
function isNumber(val) {
  return typeof val === 'number';
}

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */
function isUndefined(val) {
  return typeof val === 'undefined';
}

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */
function isObject(val) {
  return val !== null && typeof val === 'object';
}

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */
function isDate(val) {
  return toString.call(val) === '[object Date]';
}

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
function isFile(val) {
  return toString.call(val) === '[object File]';
}

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */
function isBlob(val) {
  return toString.call(val) === '[object Blob]';
}

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
function isFunction(val) {
  return toString.call(val) === '[object Function]';
}

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */
function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
function isURLSearchParams(val) {
  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
}

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */
function trim(str) {
  return str.replace(/^\s*/, '').replace(/\s*$/, '');
}

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 */
function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {
    return false;
  }
  return (
    typeof window !== 'undefined' &&
    typeof document !== 'undefined'
  );
}

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */
function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  var result = {};
  function assignValue(val, key) {
    if (typeof result[key] === 'object' && typeof val === 'object') {
      result[key] = merge(result[key], val);
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */
function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}

module.exports = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  extend: extend,
  trim: trim
};


/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/lista-cidades.vue?vue&type=script&lang=js&":
/*!************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--4-0!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/lista-cidades.vue?vue&type=script&lang=js& ***!
  \************************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ "./node_modules/axios/index.js");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_0__);
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
  data: function data() {
    return {
      cidades: []
    };
  },
  mounted: function mounted() {
    var _this = this;

    axios__WEBPACK_IMPORTED_MODULE_0___default.a.get("/api/cidades").then(function (response) {
      _this.cidades = response.data;
      console.log(_this.cidades);
    });
  },
  methods: {},
  components: {}
});

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/lista-cidadesadd.vue?vue&type=script&lang=js&":
/*!***************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--4-0!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/lista-cidadesadd.vue?vue&type=script&lang=js& ***!
  \***************************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ "./node_modules/axios/index.js");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_0__);
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
// let timeStamp = Date.now()
// let formattedString = date.formatDate(timeStamp, 'YYYY-MM-DDTHH:mm:ss.SSSZ')

var d = new Date();
/* harmony default export */ __webpack_exports__["default"] = ({
  data: function data() {
    return {
      cidade: {
        id: "",
        name: "",
        estado: "",
        localConcentracao: "",
        hora: ""
      },
      estados: [],
      format24h: true,
      hora: d.getHours() + ":" + d.getMinutes()
    };
  },
  methods: {
    save: function save() {
      var _this = this;

      this.cidade.hora = new Date(this.cidade.hora).getHours() + ":" + new Date(this.cidade.hora).getMinutes();
      axios__WEBPACK_IMPORTED_MODULE_0___default.a.post("/api/cidades", this.cidade).then(function (response) {
        _this.cidades = response.data;
        console.log(_this.cidades);

        _this.$router.push('/cidades');
      })["catch"](function (error) {
        return console.log(error);
      });
    }
  },
  mounted: function mounted() {
    var _this2 = this;

    axios__WEBPACK_IMPORTED_MODULE_0___default.a.get("/api/estados").then(function (response) {
      _this2.estados = response.data;
      console.log(_this2.estados);
    })["catch"](function (error) {
      return console.log(error);
    });
  }
});

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/lista-cidadesedit.vue?vue&type=script&lang=js&":
/*!****************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--4-0!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/lista-cidadesedit.vue?vue&type=script&lang=js& ***!
  \****************************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
//
//
//
//
//
/* harmony default export */ __webpack_exports__["default"] = ({// 	   { 'property': 'og:description', 'content': 'pageContent', 'vmid': 'og:description' },
  //     { 'property': 'og:title', 'content': 'pageTitle', 'vmid': 'og:title' },
  //     { 'property': 'og:url', 'content': 'siteUrl', 'vmid': 'og:url' }
  // 	meta () {
  // 	    return {
  // 	       meta: [
  // 	    	  {'name':'description', 'content': 'Page 1', 'vmid': 'description' },
  // 	 	      {'name': 'keywords', 'content': 'Quasar website' },
  // 	 	      {'http-equiv':'Content-Type', 'content': 'text/html; charset=UTF-8' }
  // 	      ]
  // 	    }
  // 	  }
});

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/principal.vue?vue&type=script&lang=js&":
/*!********************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--4-0!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/principal.vue?vue&type=script&lang=js& ***!
  \********************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
//
//
//
//
//
/* harmony default export */ __webpack_exports__["default"] = ({
  //     	meta: {
  //     	    // sets document title
  //     	    title: 'Index Page',
  //     	    // meta tags
  //     	    meta: {
  //     	      description: { name: 'description', content: 'Page 1' },
  //     	      keywords: { name: 'keywords', content: 'Quasar website' },
  //     	      equiv: { 'http-equiv': 'Content-Type', content: 'text/html; charset=UTF-8' }
  //     	    },
  //     	},
  //     	data: function () {
  // 	          return {
  // 	          }
  //         },
  mounted: function mounted() {//         	axios.get("/api/cidades").then(
    //         		response => {
    //         			this.cidades = response.data
    //         			console.log(this.cidades)
    //         		}		
    //         	)
  },
  methods: {
    launch: function launch(url) {
      //Quasar.utils.openURL(url)
      window.location.href = url;
    }
  },
  components: {}
});

/***/ }),

/***/ "./node_modules/is-buffer/index.js":
/*!*****************************************!*\
  !*** ./node_modules/is-buffer/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}


/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "./node_modules/setimmediate/setImmediate.js":
/*!***************************************************!*\
  !*** ./node_modules/setimmediate/setImmediate.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
    "use strict";

    if (global.setImmediate) {
        return;
    }

    var nextHandle = 1; // Spec says greater than zero
    var tasksByHandle = {};
    var currentlyRunningATask = false;
    var doc = global.document;
    var registerImmediate;

    function setImmediate(callback) {
      // Callback can either be a function or a string
      if (typeof callback !== "function") {
        callback = new Function("" + callback);
      }
      // Copy function arguments
      var args = new Array(arguments.length - 1);
      for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i + 1];
      }
      // Store and register the task
      var task = { callback: callback, args: args };
      tasksByHandle[nextHandle] = task;
      registerImmediate(nextHandle);
      return nextHandle++;
    }

    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }

    function run(task) {
        var callback = task.callback;
        var args = task.args;
        switch (args.length) {
        case 0:
            callback();
            break;
        case 1:
            callback(args[0]);
            break;
        case 2:
            callback(args[0], args[1]);
            break;
        case 3:
            callback(args[0], args[1], args[2]);
            break;
        default:
            callback.apply(undefined, args);
            break;
        }
    }

    function runIfPresent(handle) {
        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
        // So if we're currently running a task, we'll need to delay this invocation.
        if (currentlyRunningATask) {
            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
            // "too much recursion" error.
            setTimeout(runIfPresent, 0, handle);
        } else {
            var task = tasksByHandle[handle];
            if (task) {
                currentlyRunningATask = true;
                try {
                    run(task);
                } finally {
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                }
            }
        }
    }

    function installNextTickImplementation() {
        registerImmediate = function(handle) {
            process.nextTick(function () { runIfPresent(handle); });
        };
    }

    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.
        if (global.postMessage && !global.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global.onmessage;
            global.onmessage = function() {
                postMessageIsAsynchronous = false;
            };
            global.postMessage("", "*");
            global.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }

    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function(event) {
            if (event.source === global &&
                typeof event.data === "string" &&
                event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
            }
        };

        if (global.addEventListener) {
            global.addEventListener("message", onGlobalMessage, false);
        } else {
            global.attachEvent("onmessage", onGlobalMessage);
        }

        registerImmediate = function(handle) {
            global.postMessage(messagePrefix + handle, "*");
        };
    }

    function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function(event) {
            var handle = event.data;
            runIfPresent(handle);
        };

        registerImmediate = function(handle) {
            channel.port2.postMessage(handle);
        };
    }

    function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        registerImmediate = function(handle) {
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");
            script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
        };
    }

    function installSetTimeoutImplementation() {
        registerImmediate = function(handle) {
            setTimeout(runIfPresent, 0, handle);
        };
    }

    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

    // Don't get fooled by e.g. browserify environments.
    if ({}.toString.call(global.process) === "[object process]") {
        // For Node.js before 0.9
        installNextTickImplementation();

    } else if (canUsePostMessage()) {
        // For non-IE10 modern browsers
        installPostMessageImplementation();

    } else if (global.MessageChannel) {
        // For web workers, where supported
        installMessageChannelImplementation();

    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
        // For IE 6–8
        installReadyStateChangeImplementation();

    } else {
        // For older browsers
        installSetTimeoutImplementation();
    }

    attachTo.setImmediate = setImmediate;
    attachTo.clearImmediate = clearImmediate;
}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/timers-browserify/main.js":
/*!************************************************!*\
  !*** ./node_modules/timers-browserify/main.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== "undefined" && global) ||
            (typeof self !== "undefined" && self) ||
            window;
var apply = Function.prototype.apply;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(scope, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// setimmediate attaches itself to the global object
__webpack_require__(/*! setimmediate */ "./node_modules/setimmediate/setImmediate.js");
// On some exotic environments, it's not clear which object `setimmediate` was
// able to install onto.  Search each possibility in the same order as the
// `setimmediate` library.
exports.setImmediate = (typeof self !== "undefined" && self.setImmediate) ||
                       (typeof global !== "undefined" && global.setImmediate) ||
                       (this && this.setImmediate);
exports.clearImmediate = (typeof self !== "undefined" && self.clearImmediate) ||
                         (typeof global !== "undefined" && global.clearImmediate) ||
                         (this && this.clearImmediate);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/lista-cidades.vue?vue&type=template&id=6cb632ca&":
/*!****************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/lista-cidades.vue?vue&type=template&id=6cb632ca& ***!
  \****************************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("q-page", { attrs: { padding: "" } }, [
    _c(
      "table",
      _vm._l(_vm.cidades, function(item) {
        return _c("tr", [
          _c("td", [_vm._v(_vm._s(item.id))]),
          _vm._v(" "),
          _c("td", [_vm._v(_vm._s(item.name))]),
          _vm._v(" "),
          _c("td", [_vm._v(_vm._s(item.estado))]),
          _vm._v(" "),
          _c("td", [_vm._v(_vm._s(item.localConcentracao))]),
          _vm._v(" "),
          _c("td", [_vm._v(_vm._s(item.hora))])
        ])
      }),
      0
    )
  ])
}
var staticRenderFns = []
render._withStripped = true



/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/lista-cidadesadd.vue?vue&type=template&id=50c02d47&":
/*!*******************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/lista-cidadesadd.vue?vue&type=template&id=50c02d47& ***!
  \*******************************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("q-page", { attrs: { padding: "" } }, [
    _c(
      "div",
      [
        _c("q-input", {
          attrs: { "float-label": "Cidade", placeholder: "Cidade" },
          model: {
            value: _vm.cidade.name,
            callback: function($$v) {
              _vm.$set(_vm.cidade, "name", $$v)
            },
            expression: "cidade.name"
          }
        }),
        _vm._v(" "),
        _c("q-select", {
          attrs: { "float-label": "Estado", options: _vm.estados },
          model: {
            value: _vm.cidade.estado,
            callback: function($$v) {
              _vm.$set(_vm.cidade, "estado", $$v)
            },
            expression: "cidade.estado"
          }
        }),
        _vm._v(" "),
        _c("q-input", {
          attrs: {
            "float-label": "Local de Concentração",
            placeholder: "Local de Concentração"
          },
          model: {
            value: _vm.cidade.localConcentracao,
            callback: function($$v) {
              _vm.$set(_vm.cidade, "localConcentracao", $$v)
            },
            expression: "cidade.localConcentracao"
          }
        }),
        _vm._v(" "),
        _c("q-datetime", {
          attrs: {
            format24h: _vm.format24h,
            type: "time",
            "float-label": "Hora",
            placeholder: "Hora"
          },
          model: {
            value: _vm.cidade.hora,
            callback: function($$v) {
              _vm.$set(_vm.cidade, "hora", $$v)
            },
            expression: "cidade.hora"
          }
        }),
        _vm._v(" "),
        _c("br"),
        _vm._v(" "),
        _c(
          "q-btn",
          { attrs: { color: "secondary" }, on: { click: _vm.save } },
          [_vm._v("Salvar")]
        )
      ],
      1
    )
  ])
}
var staticRenderFns = []
render._withStripped = true



/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/lista-cidadesedit.vue?vue&type=template&id=730c22d4&":
/*!********************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/lista-cidadesedit.vue?vue&type=template&id=730c22d4& ***!
  \********************************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("q-page", [_vm._v(" \n\t...cidades edit... \n")])
}
var staticRenderFns = []
render._withStripped = true



/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/principal.vue?vue&type=template&id=dfdbb91a&":
/*!************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/principal.vue?vue&type=template&id=dfdbb91a& ***!
  \************************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("q-page", [_c("h1", [_vm._v("Página Inicial")])])
}
var staticRenderFns = []
render._withStripped = true



/***/ }),

/***/ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js":
/*!********************************************************************!*\
  !*** ./node_modules/vue-loader/lib/runtime/componentNormalizer.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return normalizeComponent; });
/* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
// This module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle.

function normalizeComponent (
  scriptExports,
  render,
  staticRenderFns,
  functionalTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier, /* server only */
  shadowMode /* vue-cli only */
) {
  // Vue.extend constructor export interop
  var options = typeof scriptExports === 'function'
    ? scriptExports.options
    : scriptExports

  // render functions
  if (render) {
    options.render = render
    options.staticRenderFns = staticRenderFns
    options._compiled = true
  }

  // functional template
  if (functionalTemplate) {
    options.functional = true
  }

  // scopedId
  if (scopeId) {
    options._scopeId = 'data-v-' + scopeId
  }

  var hook
  if (moduleIdentifier) { // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = shadowMode
      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }
      : injectStyles
  }

  if (hook) {
    if (options.functional) {
      // for template-only hot-reload because in that case the render fn doesn't
      // go through the normalizer
      options._injectStyles = hook
      // register for functioal component in vue file
      var originalRender = options.render
      options.render = function renderWithStyleInjection (h, context) {
        hook.call(context)
        return originalRender(h, context)
      }
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate
      options.beforeCreate = existing
        ? [].concat(existing, hook)
        : [hook]
    }
  }

  return {
    exports: scriptExports,
    options: options
  }
}


/***/ }),

/***/ "./node_modules/vue-router/dist/vue-router.esm.js":
/*!********************************************************!*\
  !*** ./node_modules/vue-router/dist/vue-router.esm.js ***!
  \********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/*!
  * vue-router v3.0.6
  * (c) 2019 Evan You
  * @license MIT
  */
/*  */

function assert (condition, message) {
  if (!condition) {
    throw new Error(("[vue-router] " + message))
  }
}

function warn (condition, message) {
  if ( true && !condition) {
    typeof console !== 'undefined' && console.warn(("[vue-router] " + message));
  }
}

function isError (err) {
  return Object.prototype.toString.call(err).indexOf('Error') > -1
}

function extend (a, b) {
  for (var key in b) {
    a[key] = b[key];
  }
  return a
}

var View = {
  name: 'RouterView',
  functional: true,
  props: {
    name: {
      type: String,
      default: 'default'
    }
  },
  render: function render (_, ref) {
    var props = ref.props;
    var children = ref.children;
    var parent = ref.parent;
    var data = ref.data;

    // used by devtools to display a router-view badge
    data.routerView = true;

    // directly use parent context's createElement() function
    // so that components rendered by router-view can resolve named slots
    var h = parent.$createElement;
    var name = props.name;
    var route = parent.$route;
    var cache = parent._routerViewCache || (parent._routerViewCache = {});

    // determine current view depth, also check to see if the tree
    // has been toggled inactive but kept-alive.
    var depth = 0;
    var inactive = false;
    while (parent && parent._routerRoot !== parent) {
      var vnodeData = parent.$vnode && parent.$vnode.data;
      if (vnodeData) {
        if (vnodeData.routerView) {
          depth++;
        }
        if (vnodeData.keepAlive && parent._inactive) {
          inactive = true;
        }
      }
      parent = parent.$parent;
    }
    data.routerViewDepth = depth;

    // render previous view if the tree is inactive and kept-alive
    if (inactive) {
      return h(cache[name], data, children)
    }

    var matched = route.matched[depth];
    // render empty node if no matched route
    if (!matched) {
      cache[name] = null;
      return h()
    }

    var component = cache[name] = matched.components[name];

    // attach instance registration hook
    // this will be called in the instance's injected lifecycle hooks
    data.registerRouteInstance = function (vm, val) {
      // val could be undefined for unregistration
      var current = matched.instances[name];
      if (
        (val && current !== vm) ||
        (!val && current === vm)
      ) {
        matched.instances[name] = val;
      }
    }

    // also register instance in prepatch hook
    // in case the same component instance is reused across different routes
    ;(data.hook || (data.hook = {})).prepatch = function (_, vnode) {
      matched.instances[name] = vnode.componentInstance;
    };

    // register instance in init hook
    // in case kept-alive component be actived when routes changed
    data.hook.init = function (vnode) {
      if (vnode.data.keepAlive &&
        vnode.componentInstance &&
        vnode.componentInstance !== matched.instances[name]
      ) {
        matched.instances[name] = vnode.componentInstance;
      }
    };

    // resolve props
    var propsToPass = data.props = resolveProps(route, matched.props && matched.props[name]);
    if (propsToPass) {
      // clone to prevent mutation
      propsToPass = data.props = extend({}, propsToPass);
      // pass non-declared props as attrs
      var attrs = data.attrs = data.attrs || {};
      for (var key in propsToPass) {
        if (!component.props || !(key in component.props)) {
          attrs[key] = propsToPass[key];
          delete propsToPass[key];
        }
      }
    }

    return h(component, data, children)
  }
}

function resolveProps (route, config) {
  switch (typeof config) {
    case 'undefined':
      return
    case 'object':
      return config
    case 'function':
      return config(route)
    case 'boolean':
      return config ? route.params : undefined
    default:
      if (true) {
        warn(
          false,
          "props in \"" + (route.path) + "\" is a " + (typeof config) + ", " +
          "expecting an object, function or boolean."
        );
      }
  }
}

/*  */

var encodeReserveRE = /[!'()*]/g;
var encodeReserveReplacer = function (c) { return '%' + c.charCodeAt(0).toString(16); };
var commaRE = /%2C/g;

// fixed encodeURIComponent which is more conformant to RFC3986:
// - escapes [!'()*]
// - preserve commas
var encode = function (str) { return encodeURIComponent(str)
  .replace(encodeReserveRE, encodeReserveReplacer)
  .replace(commaRE, ','); };

var decode = decodeURIComponent;

function resolveQuery (
  query,
  extraQuery,
  _parseQuery
) {
  if ( extraQuery === void 0 ) extraQuery = {};

  var parse = _parseQuery || parseQuery;
  var parsedQuery;
  try {
    parsedQuery = parse(query || '');
  } catch (e) {
     true && warn(false, e.message);
    parsedQuery = {};
  }
  for (var key in extraQuery) {
    parsedQuery[key] = extraQuery[key];
  }
  return parsedQuery
}

function parseQuery (query) {
  var res = {};

  query = query.trim().replace(/^(\?|#|&)/, '');

  if (!query) {
    return res
  }

  query.split('&').forEach(function (param) {
    var parts = param.replace(/\+/g, ' ').split('=');
    var key = decode(parts.shift());
    var val = parts.length > 0
      ? decode(parts.join('='))
      : null;

    if (res[key] === undefined) {
      res[key] = val;
    } else if (Array.isArray(res[key])) {
      res[key].push(val);
    } else {
      res[key] = [res[key], val];
    }
  });

  return res
}

function stringifyQuery (obj) {
  var res = obj ? Object.keys(obj).map(function (key) {
    var val = obj[key];

    if (val === undefined) {
      return ''
    }

    if (val === null) {
      return encode(key)
    }

    if (Array.isArray(val)) {
      var result = [];
      val.forEach(function (val2) {
        if (val2 === undefined) {
          return
        }
        if (val2 === null) {
          result.push(encode(key));
        } else {
          result.push(encode(key) + '=' + encode(val2));
        }
      });
      return result.join('&')
    }

    return encode(key) + '=' + encode(val)
  }).filter(function (x) { return x.length > 0; }).join('&') : null;
  return res ? ("?" + res) : ''
}

/*  */

var trailingSlashRE = /\/?$/;

function createRoute (
  record,
  location,
  redirectedFrom,
  router
) {
  var stringifyQuery$$1 = router && router.options.stringifyQuery;

  var query = location.query || {};
  try {
    query = clone(query);
  } catch (e) {}

  var route = {
    name: location.name || (record && record.name),
    meta: (record && record.meta) || {},
    path: location.path || '/',
    hash: location.hash || '',
    query: query,
    params: location.params || {},
    fullPath: getFullPath(location, stringifyQuery$$1),
    matched: record ? formatMatch(record) : []
  };
  if (redirectedFrom) {
    route.redirectedFrom = getFullPath(redirectedFrom, stringifyQuery$$1);
  }
  return Object.freeze(route)
}

function clone (value) {
  if (Array.isArray(value)) {
    return value.map(clone)
  } else if (value && typeof value === 'object') {
    var res = {};
    for (var key in value) {
      res[key] = clone(value[key]);
    }
    return res
  } else {
    return value
  }
}

// the starting route that represents the initial state
var START = createRoute(null, {
  path: '/'
});

function formatMatch (record) {
  var res = [];
  while (record) {
    res.unshift(record);
    record = record.parent;
  }
  return res
}

function getFullPath (
  ref,
  _stringifyQuery
) {
  var path = ref.path;
  var query = ref.query; if ( query === void 0 ) query = {};
  var hash = ref.hash; if ( hash === void 0 ) hash = '';

  var stringify = _stringifyQuery || stringifyQuery;
  return (path || '/') + stringify(query) + hash
}

function isSameRoute (a, b) {
  if (b === START) {
    return a === b
  } else if (!b) {
    return false
  } else if (a.path && b.path) {
    return (
      a.path.replace(trailingSlashRE, '') === b.path.replace(trailingSlashRE, '') &&
      a.hash === b.hash &&
      isObjectEqual(a.query, b.query)
    )
  } else if (a.name && b.name) {
    return (
      a.name === b.name &&
      a.hash === b.hash &&
      isObjectEqual(a.query, b.query) &&
      isObjectEqual(a.params, b.params)
    )
  } else {
    return false
  }
}

function isObjectEqual (a, b) {
  if ( a === void 0 ) a = {};
  if ( b === void 0 ) b = {};

  // handle null value #1566
  if (!a || !b) { return a === b }
  var aKeys = Object.keys(a);
  var bKeys = Object.keys(b);
  if (aKeys.length !== bKeys.length) {
    return false
  }
  return aKeys.every(function (key) {
    var aVal = a[key];
    var bVal = b[key];
    // check nested equality
    if (typeof aVal === 'object' && typeof bVal === 'object') {
      return isObjectEqual(aVal, bVal)
    }
    return String(aVal) === String(bVal)
  })
}

function isIncludedRoute (current, target) {
  return (
    current.path.replace(trailingSlashRE, '/').indexOf(
      target.path.replace(trailingSlashRE, '/')
    ) === 0 &&
    (!target.hash || current.hash === target.hash) &&
    queryIncludes(current.query, target.query)
  )
}

function queryIncludes (current, target) {
  for (var key in target) {
    if (!(key in current)) {
      return false
    }
  }
  return true
}

/*  */

// work around weird flow bug
var toTypes = [String, Object];
var eventTypes = [String, Array];

var Link = {
  name: 'RouterLink',
  props: {
    to: {
      type: toTypes,
      required: true
    },
    tag: {
      type: String,
      default: 'a'
    },
    exact: Boolean,
    append: Boolean,
    replace: Boolean,
    activeClass: String,
    exactActiveClass: String,
    event: {
      type: eventTypes,
      default: 'click'
    }
  },
  render: function render (h) {
    var this$1 = this;

    var router = this.$router;
    var current = this.$route;
    var ref = router.resolve(this.to, current, this.append);
    var location = ref.location;
    var route = ref.route;
    var href = ref.href;

    var classes = {};
    var globalActiveClass = router.options.linkActiveClass;
    var globalExactActiveClass = router.options.linkExactActiveClass;
    // Support global empty active class
    var activeClassFallback = globalActiveClass == null
      ? 'router-link-active'
      : globalActiveClass;
    var exactActiveClassFallback = globalExactActiveClass == null
      ? 'router-link-exact-active'
      : globalExactActiveClass;
    var activeClass = this.activeClass == null
      ? activeClassFallback
      : this.activeClass;
    var exactActiveClass = this.exactActiveClass == null
      ? exactActiveClassFallback
      : this.exactActiveClass;
    var compareTarget = location.path
      ? createRoute(null, location, null, router)
      : route;

    classes[exactActiveClass] = isSameRoute(current, compareTarget);
    classes[activeClass] = this.exact
      ? classes[exactActiveClass]
      : isIncludedRoute(current, compareTarget);

    var handler = function (e) {
      if (guardEvent(e)) {
        if (this$1.replace) {
          router.replace(location);
        } else {
          router.push(location);
        }
      }
    };

    var on = { click: guardEvent };
    if (Array.isArray(this.event)) {
      this.event.forEach(function (e) { on[e] = handler; });
    } else {
      on[this.event] = handler;
    }

    var data = {
      class: classes
    };

    if (this.tag === 'a') {
      data.on = on;
      data.attrs = { href: href };
    } else {
      // find the first <a> child and apply listener and href
      var a = findAnchor(this.$slots.default);
      if (a) {
        // in case the <a> is a static node
        a.isStatic = false;
        var aData = a.data = extend({}, a.data);
        aData.on = on;
        var aAttrs = a.data.attrs = extend({}, a.data.attrs);
        aAttrs.href = href;
      } else {
        // doesn't have <a> child, apply listener to self
        data.on = on;
      }
    }

    return h(this.tag, data, this.$slots.default)
  }
}

function guardEvent (e) {
  // don't redirect with control keys
  if (e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) { return }
  // don't redirect when preventDefault called
  if (e.defaultPrevented) { return }
  // don't redirect on right click
  if (e.button !== undefined && e.button !== 0) { return }
  // don't redirect if `target="_blank"`
  if (e.currentTarget && e.currentTarget.getAttribute) {
    var target = e.currentTarget.getAttribute('target');
    if (/\b_blank\b/i.test(target)) { return }
  }
  // this may be a Weex event which doesn't have this method
  if (e.preventDefault) {
    e.preventDefault();
  }
  return true
}

function findAnchor (children) {
  if (children) {
    var child;
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      if (child.tag === 'a') {
        return child
      }
      if (child.children && (child = findAnchor(child.children))) {
        return child
      }
    }
  }
}

var _Vue;

function install (Vue) {
  if (install.installed && _Vue === Vue) { return }
  install.installed = true;

  _Vue = Vue;

  var isDef = function (v) { return v !== undefined; };

  var registerInstance = function (vm, callVal) {
    var i = vm.$options._parentVnode;
    if (isDef(i) && isDef(i = i.data) && isDef(i = i.registerRouteInstance)) {
      i(vm, callVal);
    }
  };

  Vue.mixin({
    beforeCreate: function beforeCreate () {
      if (isDef(this.$options.router)) {
        this._routerRoot = this;
        this._router = this.$options.router;
        this._router.init(this);
        Vue.util.defineReactive(this, '_route', this._router.history.current);
      } else {
        this._routerRoot = (this.$parent && this.$parent._routerRoot) || this;
      }
      registerInstance(this, this);
    },
    destroyed: function destroyed () {
      registerInstance(this);
    }
  });

  Object.defineProperty(Vue.prototype, '$router', {
    get: function get () { return this._routerRoot._router }
  });

  Object.defineProperty(Vue.prototype, '$route', {
    get: function get () { return this._routerRoot._route }
  });

  Vue.component('RouterView', View);
  Vue.component('RouterLink', Link);

  var strats = Vue.config.optionMergeStrategies;
  // use the same hook merging strategy for route hooks
  strats.beforeRouteEnter = strats.beforeRouteLeave = strats.beforeRouteUpdate = strats.created;
}

/*  */

var inBrowser = typeof window !== 'undefined';

/*  */

function resolvePath (
  relative,
  base,
  append
) {
  var firstChar = relative.charAt(0);
  if (firstChar === '/') {
    return relative
  }

  if (firstChar === '?' || firstChar === '#') {
    return base + relative
  }

  var stack = base.split('/');

  // remove trailing segment if:
  // - not appending
  // - appending to trailing slash (last segment is empty)
  if (!append || !stack[stack.length - 1]) {
    stack.pop();
  }

  // resolve relative path
  var segments = relative.replace(/^\//, '').split('/');
  for (var i = 0; i < segments.length; i++) {
    var segment = segments[i];
    if (segment === '..') {
      stack.pop();
    } else if (segment !== '.') {
      stack.push(segment);
    }
  }

  // ensure leading slash
  if (stack[0] !== '') {
    stack.unshift('');
  }

  return stack.join('/')
}

function parsePath (path) {
  var hash = '';
  var query = '';

  var hashIndex = path.indexOf('#');
  if (hashIndex >= 0) {
    hash = path.slice(hashIndex);
    path = path.slice(0, hashIndex);
  }

  var queryIndex = path.indexOf('?');
  if (queryIndex >= 0) {
    query = path.slice(queryIndex + 1);
    path = path.slice(0, queryIndex);
  }

  return {
    path: path,
    query: query,
    hash: hash
  }
}

function cleanPath (path) {
  return path.replace(/\/\//g, '/')
}

var isarray = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};

/**
 * Expose `pathToRegexp`.
 */
var pathToRegexp_1 = pathToRegexp;
var parse_1 = parse;
var compile_1 = compile;
var tokensToFunction_1 = tokensToFunction;
var tokensToRegExp_1 = tokensToRegExp;

/**
 * The main path matching regexp utility.
 *
 * @type {RegExp}
 */
var PATH_REGEXP = new RegExp([
  // Match escaped characters that would otherwise appear in future matches.
  // This allows the user to escape special characters that won't transform.
  '(\\\\.)',
  // Match Express-style parameters and un-named parameters with a prefix
  // and optional suffixes. Matches appear as:
  //
  // "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]
  // "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]
  // "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]
  '([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))'
].join('|'), 'g');

/**
 * Parse a string for the raw tokens.
 *
 * @param  {string}  str
 * @param  {Object=} options
 * @return {!Array}
 */
function parse (str, options) {
  var tokens = [];
  var key = 0;
  var index = 0;
  var path = '';
  var defaultDelimiter = options && options.delimiter || '/';
  var res;

  while ((res = PATH_REGEXP.exec(str)) != null) {
    var m = res[0];
    var escaped = res[1];
    var offset = res.index;
    path += str.slice(index, offset);
    index = offset + m.length;

    // Ignore already escaped sequences.
    if (escaped) {
      path += escaped[1];
      continue
    }

    var next = str[index];
    var prefix = res[2];
    var name = res[3];
    var capture = res[4];
    var group = res[5];
    var modifier = res[6];
    var asterisk = res[7];

    // Push the current path onto the tokens.
    if (path) {
      tokens.push(path);
      path = '';
    }

    var partial = prefix != null && next != null && next !== prefix;
    var repeat = modifier === '+' || modifier === '*';
    var optional = modifier === '?' || modifier === '*';
    var delimiter = res[2] || defaultDelimiter;
    var pattern = capture || group;

    tokens.push({
      name: name || key++,
      prefix: prefix || '',
      delimiter: delimiter,
      optional: optional,
      repeat: repeat,
      partial: partial,
      asterisk: !!asterisk,
      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')
    });
  }

  // Match any characters still remaining.
  if (index < str.length) {
    path += str.substr(index);
  }

  // If the path exists, push it onto the end.
  if (path) {
    tokens.push(path);
  }

  return tokens
}

/**
 * Compile a string to a template function for the path.
 *
 * @param  {string}             str
 * @param  {Object=}            options
 * @return {!function(Object=, Object=)}
 */
function compile (str, options) {
  return tokensToFunction(parse(str, options))
}

/**
 * Prettier encoding of URI path segments.
 *
 * @param  {string}
 * @return {string}
 */
function encodeURIComponentPretty (str) {
  return encodeURI(str).replace(/[\/?#]/g, function (c) {
    return '%' + c.charCodeAt(0).toString(16).toUpperCase()
  })
}

/**
 * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
 *
 * @param  {string}
 * @return {string}
 */
function encodeAsterisk (str) {
  return encodeURI(str).replace(/[?#]/g, function (c) {
    return '%' + c.charCodeAt(0).toString(16).toUpperCase()
  })
}

/**
 * Expose a method for transforming tokens into the path function.
 */
function tokensToFunction (tokens) {
  // Compile all the tokens into regexps.
  var matches = new Array(tokens.length);

  // Compile all the patterns before compilation.
  for (var i = 0; i < tokens.length; i++) {
    if (typeof tokens[i] === 'object') {
      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$');
    }
  }

  return function (obj, opts) {
    var path = '';
    var data = obj || {};
    var options = opts || {};
    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent;

    for (var i = 0; i < tokens.length; i++) {
      var token = tokens[i];

      if (typeof token === 'string') {
        path += token;

        continue
      }

      var value = data[token.name];
      var segment;

      if (value == null) {
        if (token.optional) {
          // Prepend partial segment prefixes.
          if (token.partial) {
            path += token.prefix;
          }

          continue
        } else {
          throw new TypeError('Expected "' + token.name + '" to be defined')
        }
      }

      if (isarray(value)) {
        if (!token.repeat) {
          throw new TypeError('Expected "' + token.name + '" to not repeat, but received `' + JSON.stringify(value) + '`')
        }

        if (value.length === 0) {
          if (token.optional) {
            continue
          } else {
            throw new TypeError('Expected "' + token.name + '" to not be empty')
          }
        }

        for (var j = 0; j < value.length; j++) {
          segment = encode(value[j]);

          if (!matches[i].test(segment)) {
            throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received `' + JSON.stringify(segment) + '`')
          }

          path += (j === 0 ? token.prefix : token.delimiter) + segment;
        }

        continue
      }

      segment = token.asterisk ? encodeAsterisk(value) : encode(value);

      if (!matches[i].test(segment)) {
        throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"')
      }

      path += token.prefix + segment;
    }

    return path
  }
}

/**
 * Escape a regular expression string.
 *
 * @param  {string} str
 * @return {string}
 */
function escapeString (str) {
  return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, '\\$1')
}

/**
 * Escape the capturing group by escaping special characters and meaning.
 *
 * @param  {string} group
 * @return {string}
 */
function escapeGroup (group) {
  return group.replace(/([=!:$\/()])/g, '\\$1')
}

/**
 * Attach the keys as a property of the regexp.
 *
 * @param  {!RegExp} re
 * @param  {Array}   keys
 * @return {!RegExp}
 */
function attachKeys (re, keys) {
  re.keys = keys;
  return re
}

/**
 * Get the flags for a regexp from the options.
 *
 * @param  {Object} options
 * @return {string}
 */
function flags (options) {
  return options.sensitive ? '' : 'i'
}

/**
 * Pull out keys from a regexp.
 *
 * @param  {!RegExp} path
 * @param  {!Array}  keys
 * @return {!RegExp}
 */
function regexpToRegexp (path, keys) {
  // Use a negative lookahead to match only capturing groups.
  var groups = path.source.match(/\((?!\?)/g);

  if (groups) {
    for (var i = 0; i < groups.length; i++) {
      keys.push({
        name: i,
        prefix: null,
        delimiter: null,
        optional: false,
        repeat: false,
        partial: false,
        asterisk: false,
        pattern: null
      });
    }
  }

  return attachKeys(path, keys)
}

/**
 * Transform an array into a regexp.
 *
 * @param  {!Array}  path
 * @param  {Array}   keys
 * @param  {!Object} options
 * @return {!RegExp}
 */
function arrayToRegexp (path, keys, options) {
  var parts = [];

  for (var i = 0; i < path.length; i++) {
    parts.push(pathToRegexp(path[i], keys, options).source);
  }

  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));

  return attachKeys(regexp, keys)
}

/**
 * Create a path regexp from string input.
 *
 * @param  {string}  path
 * @param  {!Array}  keys
 * @param  {!Object} options
 * @return {!RegExp}
 */
function stringToRegexp (path, keys, options) {
  return tokensToRegExp(parse(path, options), keys, options)
}

/**
 * Expose a function for taking tokens and returning a RegExp.
 *
 * @param  {!Array}          tokens
 * @param  {(Array|Object)=} keys
 * @param  {Object=}         options
 * @return {!RegExp}
 */
function tokensToRegExp (tokens, keys, options) {
  if (!isarray(keys)) {
    options = /** @type {!Object} */ (keys || options);
    keys = [];
  }

  options = options || {};

  var strict = options.strict;
  var end = options.end !== false;
  var route = '';

  // Iterate over the tokens and create our regexp string.
  for (var i = 0; i < tokens.length; i++) {
    var token = tokens[i];

    if (typeof token === 'string') {
      route += escapeString(token);
    } else {
      var prefix = escapeString(token.prefix);
      var capture = '(?:' + token.pattern + ')';

      keys.push(token);

      if (token.repeat) {
        capture += '(?:' + prefix + capture + ')*';
      }

      if (token.optional) {
        if (!token.partial) {
          capture = '(?:' + prefix + '(' + capture + '))?';
        } else {
          capture = prefix + '(' + capture + ')?';
        }
      } else {
        capture = prefix + '(' + capture + ')';
      }

      route += capture;
    }
  }

  var delimiter = escapeString(options.delimiter || '/');
  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter;

  // In non-strict mode we allow a slash at the end of match. If the path to
  // match already ends with a slash, we remove it for consistency. The slash
  // is valid at the end of a path match, not in the middle. This is important
  // in non-ending mode, where "/test/" shouldn't match "/test//route".
  if (!strict) {
    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?';
  }

  if (end) {
    route += '$';
  } else {
    // In non-ending mode, we need the capturing groups to match as much as
    // possible by using a positive lookahead to the end or next path segment.
    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)';
  }

  return attachKeys(new RegExp('^' + route, flags(options)), keys)
}

/**
 * Normalize the given path string, returning a regular expression.
 *
 * An empty array can be passed in for the keys, which will hold the
 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
 *
 * @param  {(string|RegExp|Array)} path
 * @param  {(Array|Object)=}       keys
 * @param  {Object=}               options
 * @return {!RegExp}
 */
function pathToRegexp (path, keys, options) {
  if (!isarray(keys)) {
    options = /** @type {!Object} */ (keys || options);
    keys = [];
  }

  options = options || {};

  if (path instanceof RegExp) {
    return regexpToRegexp(path, /** @type {!Array} */ (keys))
  }

  if (isarray(path)) {
    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)
  }

  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)
}
pathToRegexp_1.parse = parse_1;
pathToRegexp_1.compile = compile_1;
pathToRegexp_1.tokensToFunction = tokensToFunction_1;
pathToRegexp_1.tokensToRegExp = tokensToRegExp_1;

/*  */

// $flow-disable-line
var regexpCompileCache = Object.create(null);

function fillParams (
  path,
  params,
  routeMsg
) {
  params = params || {};
  try {
    var filler =
      regexpCompileCache[path] ||
      (regexpCompileCache[path] = pathToRegexp_1.compile(path));

    // Fix #2505 resolving asterisk routes { name: 'not-found', params: { pathMatch: '/not-found' }}
    if (params.pathMatch) { params[0] = params.pathMatch; }

    return filler(params, { pretty: true })
  } catch (e) {
    if (true) {
      warn(false, ("missing param for " + routeMsg + ": " + (e.message)));
    }
    return ''
  } finally {
    // delete the 0 if it was added
    delete params[0];
  }
}

/*  */

function createRouteMap (
  routes,
  oldPathList,
  oldPathMap,
  oldNameMap
) {
  // the path list is used to control path matching priority
  var pathList = oldPathList || [];
  // $flow-disable-line
  var pathMap = oldPathMap || Object.create(null);
  // $flow-disable-line
  var nameMap = oldNameMap || Object.create(null);

  routes.forEach(function (route) {
    addRouteRecord(pathList, pathMap, nameMap, route);
  });

  // ensure wildcard routes are always at the end
  for (var i = 0, l = pathList.length; i < l; i++) {
    if (pathList[i] === '*') {
      pathList.push(pathList.splice(i, 1)[0]);
      l--;
      i--;
    }
  }

  return {
    pathList: pathList,
    pathMap: pathMap,
    nameMap: nameMap
  }
}

function addRouteRecord (
  pathList,
  pathMap,
  nameMap,
  route,
  parent,
  matchAs
) {
  var path = route.path;
  var name = route.name;
  if (true) {
    assert(path != null, "\"path\" is required in a route configuration.");
    assert(
      typeof route.component !== 'string',
      "route config \"component\" for path: " + (String(path || name)) + " cannot be a " +
      "string id. Use an actual component instead."
    );
  }

  var pathToRegexpOptions = route.pathToRegexpOptions || {};
  var normalizedPath = normalizePath(
    path,
    parent,
    pathToRegexpOptions.strict
  );

  if (typeof route.caseSensitive === 'boolean') {
    pathToRegexpOptions.sensitive = route.caseSensitive;
  }

  var record = {
    path: normalizedPath,
    regex: compileRouteRegex(normalizedPath, pathToRegexpOptions),
    components: route.components || { default: route.component },
    instances: {},
    name: name,
    parent: parent,
    matchAs: matchAs,
    redirect: route.redirect,
    beforeEnter: route.beforeEnter,
    meta: route.meta || {},
    props: route.props == null
      ? {}
      : route.components
        ? route.props
        : { default: route.props }
  };

  if (route.children) {
    // Warn if route is named, does not redirect and has a default child route.
    // If users navigate to this route by name, the default child will
    // not be rendered (GH Issue #629)
    if (true) {
      if (route.name && !route.redirect && route.children.some(function (child) { return /^\/?$/.test(child.path); })) {
        warn(
          false,
          "Named Route '" + (route.name) + "' has a default child route. " +
          "When navigating to this named route (:to=\"{name: '" + (route.name) + "'\"), " +
          "the default child route will not be rendered. Remove the name from " +
          "this route and use the name of the default child route for named " +
          "links instead."
        );
      }
    }
    route.children.forEach(function (child) {
      var childMatchAs = matchAs
        ? cleanPath((matchAs + "/" + (child.path)))
        : undefined;
      addRouteRecord(pathList, pathMap, nameMap, child, record, childMatchAs);
    });
  }

  if (route.alias !== undefined) {
    var aliases = Array.isArray(route.alias)
      ? route.alias
      : [route.alias];

    aliases.forEach(function (alias) {
      var aliasRoute = {
        path: alias,
        children: route.children
      };
      addRouteRecord(
        pathList,
        pathMap,
        nameMap,
        aliasRoute,
        parent,
        record.path || '/' // matchAs
      );
    });
  }

  if (!pathMap[record.path]) {
    pathList.push(record.path);
    pathMap[record.path] = record;
  }

  if (name) {
    if (!nameMap[name]) {
      nameMap[name] = record;
    } else if ( true && !matchAs) {
      warn(
        false,
        "Duplicate named routes definition: " +
        "{ name: \"" + name + "\", path: \"" + (record.path) + "\" }"
      );
    }
  }
}

function compileRouteRegex (path, pathToRegexpOptions) {
  var regex = pathToRegexp_1(path, [], pathToRegexpOptions);
  if (true) {
    var keys = Object.create(null);
    regex.keys.forEach(function (key) {
      warn(!keys[key.name], ("Duplicate param keys in route with path: \"" + path + "\""));
      keys[key.name] = true;
    });
  }
  return regex
}

function normalizePath (path, parent, strict) {
  if (!strict) { path = path.replace(/\/$/, ''); }
  if (path[0] === '/') { return path }
  if (parent == null) { return path }
  return cleanPath(((parent.path) + "/" + path))
}

/*  */

function normalizeLocation (
  raw,
  current,
  append,
  router
) {
  var next = typeof raw === 'string' ? { path: raw } : raw;
  // named target
  if (next._normalized) {
    return next
  } else if (next.name) {
    return extend({}, raw)
  }

  // relative params
  if (!next.path && next.params && current) {
    next = extend({}, next);
    next._normalized = true;
    var params = extend(extend({}, current.params), next.params);
    if (current.name) {
      next.name = current.name;
      next.params = params;
    } else if (current.matched.length) {
      var rawPath = current.matched[current.matched.length - 1].path;
      next.path = fillParams(rawPath, params, ("path " + (current.path)));
    } else if (true) {
      warn(false, "relative params navigation requires a current route.");
    }
    return next
  }

  var parsedPath = parsePath(next.path || '');
  var basePath = (current && current.path) || '/';
  var path = parsedPath.path
    ? resolvePath(parsedPath.path, basePath, append || next.append)
    : basePath;

  var query = resolveQuery(
    parsedPath.query,
    next.query,
    router && router.options.parseQuery
  );

  var hash = next.hash || parsedPath.hash;
  if (hash && hash.charAt(0) !== '#') {
    hash = "#" + hash;
  }

  return {
    _normalized: true,
    path: path,
    query: query,
    hash: hash
  }
}

/*  */



function createMatcher (
  routes,
  router
) {
  var ref = createRouteMap(routes);
  var pathList = ref.pathList;
  var pathMap = ref.pathMap;
  var nameMap = ref.nameMap;

  function addRoutes (routes) {
    createRouteMap(routes, pathList, pathMap, nameMap);
  }

  function match (
    raw,
    currentRoute,
    redirectedFrom
  ) {
    var location = normalizeLocation(raw, currentRoute, false, router);
    var name = location.name;

    if (name) {
      var record = nameMap[name];
      if (true) {
        warn(record, ("Route with name '" + name + "' does not exist"));
      }
      if (!record) { return _createRoute(null, location) }
      var paramNames = record.regex.keys
        .filter(function (key) { return !key.optional; })
        .map(function (key) { return key.name; });

      if (typeof location.params !== 'object') {
        location.params = {};
      }

      if (currentRoute && typeof currentRoute.params === 'object') {
        for (var key in currentRoute.params) {
          if (!(key in location.params) && paramNames.indexOf(key) > -1) {
            location.params[key] = currentRoute.params[key];
          }
        }
      }

      if (record) {
        location.path = fillParams(record.path, location.params, ("named route \"" + name + "\""));
        return _createRoute(record, location, redirectedFrom)
      }
    } else if (location.path) {
      location.params = {};
      for (var i = 0; i < pathList.length; i++) {
        var path = pathList[i];
        var record$1 = pathMap[path];
        if (matchRoute(record$1.regex, location.path, location.params)) {
          return _createRoute(record$1, location, redirectedFrom)
        }
      }
    }
    // no match
    return _createRoute(null, location)
  }

  function redirect (
    record,
    location
  ) {
    var originalRedirect = record.redirect;
    var redirect = typeof originalRedirect === 'function'
      ? originalRedirect(createRoute(record, location, null, router))
      : originalRedirect;

    if (typeof redirect === 'string') {
      redirect = { path: redirect };
    }

    if (!redirect || typeof redirect !== 'object') {
      if (true) {
        warn(
          false, ("invalid redirect option: " + (JSON.stringify(redirect)))
        );
      }
      return _createRoute(null, location)
    }

    var re = redirect;
    var name = re.name;
    var path = re.path;
    var query = location.query;
    var hash = location.hash;
    var params = location.params;
    query = re.hasOwnProperty('query') ? re.query : query;
    hash = re.hasOwnProperty('hash') ? re.hash : hash;
    params = re.hasOwnProperty('params') ? re.params : params;

    if (name) {
      // resolved named direct
      var targetRecord = nameMap[name];
      if (true) {
        assert(targetRecord, ("redirect failed: named route \"" + name + "\" not found."));
      }
      return match({
        _normalized: true,
        name: name,
        query: query,
        hash: hash,
        params: params
      }, undefined, location)
    } else if (path) {
      // 1. resolve relative redirect
      var rawPath = resolveRecordPath(path, record);
      // 2. resolve params
      var resolvedPath = fillParams(rawPath, params, ("redirect route with path \"" + rawPath + "\""));
      // 3. rematch with existing query and hash
      return match({
        _normalized: true,
        path: resolvedPath,
        query: query,
        hash: hash
      }, undefined, location)
    } else {
      if (true) {
        warn(false, ("invalid redirect option: " + (JSON.stringify(redirect))));
      }
      return _createRoute(null, location)
    }
  }

  function alias (
    record,
    location,
    matchAs
  ) {
    var aliasedPath = fillParams(matchAs, location.params, ("aliased route with path \"" + matchAs + "\""));
    var aliasedMatch = match({
      _normalized: true,
      path: aliasedPath
    });
    if (aliasedMatch) {
      var matched = aliasedMatch.matched;
      var aliasedRecord = matched[matched.length - 1];
      location.params = aliasedMatch.params;
      return _createRoute(aliasedRecord, location)
    }
    return _createRoute(null, location)
  }

  function _createRoute (
    record,
    location,
    redirectedFrom
  ) {
    if (record && record.redirect) {
      return redirect(record, redirectedFrom || location)
    }
    if (record && record.matchAs) {
      return alias(record, location, record.matchAs)
    }
    return createRoute(record, location, redirectedFrom, router)
  }

  return {
    match: match,
    addRoutes: addRoutes
  }
}

function matchRoute (
  regex,
  path,
  params
) {
  var m = path.match(regex);

  if (!m) {
    return false
  } else if (!params) {
    return true
  }

  for (var i = 1, len = m.length; i < len; ++i) {
    var key = regex.keys[i - 1];
    var val = typeof m[i] === 'string' ? decodeURIComponent(m[i]) : m[i];
    if (key) {
      // Fix #1994: using * with props: true generates a param named 0
      params[key.name || 'pathMatch'] = val;
    }
  }

  return true
}

function resolveRecordPath (path, record) {
  return resolvePath(path, record.parent ? record.parent.path : '/', true)
}

/*  */

var positionStore = Object.create(null);

function setupScroll () {
  // Fix for #1585 for Firefox
  // Fix for #2195 Add optional third attribute to workaround a bug in safari https://bugs.webkit.org/show_bug.cgi?id=182678
  window.history.replaceState({ key: getStateKey() }, '', window.location.href.replace(window.location.origin, ''));
  window.addEventListener('popstate', function (e) {
    saveScrollPosition();
    if (e.state && e.state.key) {
      setStateKey(e.state.key);
    }
  });
}

function handleScroll (
  router,
  to,
  from,
  isPop
) {
  if (!router.app) {
    return
  }

  var behavior = router.options.scrollBehavior;
  if (!behavior) {
    return
  }

  if (true) {
    assert(typeof behavior === 'function', "scrollBehavior must be a function");
  }

  // wait until re-render finishes before scrolling
  router.app.$nextTick(function () {
    var position = getScrollPosition();
    var shouldScroll = behavior.call(router, to, from, isPop ? position : null);

    if (!shouldScroll) {
      return
    }

    if (typeof shouldScroll.then === 'function') {
      shouldScroll.then(function (shouldScroll) {
        scrollToPosition((shouldScroll), position);
      }).catch(function (err) {
        if (true) {
          assert(false, err.toString());
        }
      });
    } else {
      scrollToPosition(shouldScroll, position);
    }
  });
}

function saveScrollPosition () {
  var key = getStateKey();
  if (key) {
    positionStore[key] = {
      x: window.pageXOffset,
      y: window.pageYOffset
    };
  }
}

function getScrollPosition () {
  var key = getStateKey();
  if (key) {
    return positionStore[key]
  }
}

function getElementPosition (el, offset) {
  var docEl = document.documentElement;
  var docRect = docEl.getBoundingClientRect();
  var elRect = el.getBoundingClientRect();
  return {
    x: elRect.left - docRect.left - offset.x,
    y: elRect.top - docRect.top - offset.y
  }
}

function isValidPosition (obj) {
  return isNumber(obj.x) || isNumber(obj.y)
}

function normalizePosition (obj) {
  return {
    x: isNumber(obj.x) ? obj.x : window.pageXOffset,
    y: isNumber(obj.y) ? obj.y : window.pageYOffset
  }
}

function normalizeOffset (obj) {
  return {
    x: isNumber(obj.x) ? obj.x : 0,
    y: isNumber(obj.y) ? obj.y : 0
  }
}

function isNumber (v) {
  return typeof v === 'number'
}

function scrollToPosition (shouldScroll, position) {
  var isObject = typeof shouldScroll === 'object';
  if (isObject && typeof shouldScroll.selector === 'string') {
    var el = document.querySelector(shouldScroll.selector);
    if (el) {
      var offset = shouldScroll.offset && typeof shouldScroll.offset === 'object' ? shouldScroll.offset : {};
      offset = normalizeOffset(offset);
      position = getElementPosition(el, offset);
    } else if (isValidPosition(shouldScroll)) {
      position = normalizePosition(shouldScroll);
    }
  } else if (isObject && isValidPosition(shouldScroll)) {
    position = normalizePosition(shouldScroll);
  }

  if (position) {
    window.scrollTo(position.x, position.y);
  }
}

/*  */

var supportsPushState = inBrowser && (function () {
  var ua = window.navigator.userAgent;

  if (
    (ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) &&
    ua.indexOf('Mobile Safari') !== -1 &&
    ua.indexOf('Chrome') === -1 &&
    ua.indexOf('Windows Phone') === -1
  ) {
    return false
  }

  return window.history && 'pushState' in window.history
})();

// use User Timing api (if present) for more accurate key precision
var Time = inBrowser && window.performance && window.performance.now
  ? window.performance
  : Date;

var _key = genKey();

function genKey () {
  return Time.now().toFixed(3)
}

function getStateKey () {
  return _key
}

function setStateKey (key) {
  _key = key;
}

function pushState (url, replace) {
  saveScrollPosition();
  // try...catch the pushState call to get around Safari
  // DOM Exception 18 where it limits to 100 pushState calls
  var history = window.history;
  try {
    if (replace) {
      history.replaceState({ key: _key }, '', url);
    } else {
      _key = genKey();
      history.pushState({ key: _key }, '', url);
    }
  } catch (e) {
    window.location[replace ? 'replace' : 'assign'](url);
  }
}

function replaceState (url) {
  pushState(url, true);
}

/*  */

function runQueue (queue, fn, cb) {
  var step = function (index) {
    if (index >= queue.length) {
      cb();
    } else {
      if (queue[index]) {
        fn(queue[index], function () {
          step(index + 1);
        });
      } else {
        step(index + 1);
      }
    }
  };
  step(0);
}

/*  */

function resolveAsyncComponents (matched) {
  return function (to, from, next) {
    var hasAsync = false;
    var pending = 0;
    var error = null;

    flatMapComponents(matched, function (def, _, match, key) {
      // if it's a function and doesn't have cid attached,
      // assume it's an async component resolve function.
      // we are not using Vue's default async resolving mechanism because
      // we want to halt the navigation until the incoming component has been
      // resolved.
      if (typeof def === 'function' && def.cid === undefined) {
        hasAsync = true;
        pending++;

        var resolve = once(function (resolvedDef) {
          if (isESModule(resolvedDef)) {
            resolvedDef = resolvedDef.default;
          }
          // save resolved on async factory in case it's used elsewhere
          def.resolved = typeof resolvedDef === 'function'
            ? resolvedDef
            : _Vue.extend(resolvedDef);
          match.components[key] = resolvedDef;
          pending--;
          if (pending <= 0) {
            next();
          }
        });

        var reject = once(function (reason) {
          var msg = "Failed to resolve async component " + key + ": " + reason;
           true && warn(false, msg);
          if (!error) {
            error = isError(reason)
              ? reason
              : new Error(msg);
            next(error);
          }
        });

        var res;
        try {
          res = def(resolve, reject);
        } catch (e) {
          reject(e);
        }
        if (res) {
          if (typeof res.then === 'function') {
            res.then(resolve, reject);
          } else {
            // new syntax in Vue 2.3
            var comp = res.component;
            if (comp && typeof comp.then === 'function') {
              comp.then(resolve, reject);
            }
          }
        }
      }
    });

    if (!hasAsync) { next(); }
  }
}

function flatMapComponents (
  matched,
  fn
) {
  return flatten(matched.map(function (m) {
    return Object.keys(m.components).map(function (key) { return fn(
      m.components[key],
      m.instances[key],
      m, key
    ); })
  }))
}

function flatten (arr) {
  return Array.prototype.concat.apply([], arr)
}

var hasSymbol =
  typeof Symbol === 'function' &&
  typeof Symbol.toStringTag === 'symbol';

function isESModule (obj) {
  return obj.__esModule || (hasSymbol && obj[Symbol.toStringTag] === 'Module')
}

// in Webpack 2, require.ensure now also returns a Promise
// so the resolve/reject functions may get called an extra time
// if the user uses an arrow function shorthand that happens to
// return that Promise.
function once (fn) {
  var called = false;
  return function () {
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    if (called) { return }
    called = true;
    return fn.apply(this, args)
  }
}

/*  */

var History = function History (router, base) {
  this.router = router;
  this.base = normalizeBase(base);
  // start with a route object that stands for "nowhere"
  this.current = START;
  this.pending = null;
  this.ready = false;
  this.readyCbs = [];
  this.readyErrorCbs = [];
  this.errorCbs = [];
};

History.prototype.listen = function listen (cb) {
  this.cb = cb;
};

History.prototype.onReady = function onReady (cb, errorCb) {
  if (this.ready) {
    cb();
  } else {
    this.readyCbs.push(cb);
    if (errorCb) {
      this.readyErrorCbs.push(errorCb);
    }
  }
};

History.prototype.onError = function onError (errorCb) {
  this.errorCbs.push(errorCb);
};

History.prototype.transitionTo = function transitionTo (location, onComplete, onAbort) {
    var this$1 = this;

  var route = this.router.match(location, this.current);
  this.confirmTransition(route, function () {
    this$1.updateRoute(route);
    onComplete && onComplete(route);
    this$1.ensureURL();

    // fire ready cbs once
    if (!this$1.ready) {
      this$1.ready = true;
      this$1.readyCbs.forEach(function (cb) { cb(route); });
    }
  }, function (err) {
    if (onAbort) {
      onAbort(err);
    }
    if (err && !this$1.ready) {
      this$1.ready = true;
      this$1.readyErrorCbs.forEach(function (cb) { cb(err); });
    }
  });
};

History.prototype.confirmTransition = function confirmTransition (route, onComplete, onAbort) {
    var this$1 = this;

  var current = this.current;
  var abort = function (err) {
    if (isError(err)) {
      if (this$1.errorCbs.length) {
        this$1.errorCbs.forEach(function (cb) { cb(err); });
      } else {
        warn(false, 'uncaught error during route navigation:');
        console.error(err);
      }
    }
    onAbort && onAbort(err);
  };
  if (
    isSameRoute(route, current) &&
    // in the case the route map has been dynamically appended to
    route.matched.length === current.matched.length
  ) {
    this.ensureURL();
    return abort()
  }

  var ref = resolveQueue(this.current.matched, route.matched);
    var updated = ref.updated;
    var deactivated = ref.deactivated;
    var activated = ref.activated;

  var queue = [].concat(
    // in-component leave guards
    extractLeaveGuards(deactivated),
    // global before hooks
    this.router.beforeHooks,
    // in-component update hooks
    extractUpdateHooks(updated),
    // in-config enter guards
    activated.map(function (m) { return m.beforeEnter; }),
    // async components
    resolveAsyncComponents(activated)
  );

  this.pending = route;
  var iterator = function (hook, next) {
    if (this$1.pending !== route) {
      return abort()
    }
    try {
      hook(route, current, function (to) {
        if (to === false || isError(to)) {
          // next(false) -> abort navigation, ensure current URL
          this$1.ensureURL(true);
          abort(to);
        } else if (
          typeof to === 'string' ||
          (typeof to === 'object' && (
            typeof to.path === 'string' ||
            typeof to.name === 'string'
          ))
        ) {
          // next('/') or next({ path: '/' }) -> redirect
          abort();
          if (typeof to === 'object' && to.replace) {
            this$1.replace(to);
          } else {
            this$1.push(to);
          }
        } else {
          // confirm transition and pass on the value
          next(to);
        }
      });
    } catch (e) {
      abort(e);
    }
  };

  runQueue(queue, iterator, function () {
    var postEnterCbs = [];
    var isValid = function () { return this$1.current === route; };
    // wait until async components are resolved before
    // extracting in-component enter guards
    var enterGuards = extractEnterGuards(activated, postEnterCbs, isValid);
    var queue = enterGuards.concat(this$1.router.resolveHooks);
    runQueue(queue, iterator, function () {
      if (this$1.pending !== route) {
        return abort()
      }
      this$1.pending = null;
      onComplete(route);
      if (this$1.router.app) {
        this$1.router.app.$nextTick(function () {
          postEnterCbs.forEach(function (cb) { cb(); });
        });
      }
    });
  });
};

History.prototype.updateRoute = function updateRoute (route) {
  var prev = this.current;
  this.current = route;
  this.cb && this.cb(route);
  this.router.afterHooks.forEach(function (hook) {
    hook && hook(route, prev);
  });
};

function normalizeBase (base) {
  if (!base) {
    if (inBrowser) {
      // respect <base> tag
      var baseEl = document.querySelector('base');
      base = (baseEl && baseEl.getAttribute('href')) || '/';
      // strip full URL origin
      base = base.replace(/^https?:\/\/[^\/]+/, '');
    } else {
      base = '/';
    }
  }
  // make sure there's the starting slash
  if (base.charAt(0) !== '/') {
    base = '/' + base;
  }
  // remove trailing slash
  return base.replace(/\/$/, '')
}

function resolveQueue (
  current,
  next
) {
  var i;
  var max = Math.max(current.length, next.length);
  for (i = 0; i < max; i++) {
    if (current[i] !== next[i]) {
      break
    }
  }
  return {
    updated: next.slice(0, i),
    activated: next.slice(i),
    deactivated: current.slice(i)
  }
}

function extractGuards (
  records,
  name,
  bind,
  reverse
) {
  var guards = flatMapComponents(records, function (def, instance, match, key) {
    var guard = extractGuard(def, name);
    if (guard) {
      return Array.isArray(guard)
        ? guard.map(function (guard) { return bind(guard, instance, match, key); })
        : bind(guard, instance, match, key)
    }
  });
  return flatten(reverse ? guards.reverse() : guards)
}

function extractGuard (
  def,
  key
) {
  if (typeof def !== 'function') {
    // extend now so that global mixins are applied.
    def = _Vue.extend(def);
  }
  return def.options[key]
}

function extractLeaveGuards (deactivated) {
  return extractGuards(deactivated, 'beforeRouteLeave', bindGuard, true)
}

function extractUpdateHooks (updated) {
  return extractGuards(updated, 'beforeRouteUpdate', bindGuard)
}

function bindGuard (guard, instance) {
  if (instance) {
    return function boundRouteGuard () {
      return guard.apply(instance, arguments)
    }
  }
}

function extractEnterGuards (
  activated,
  cbs,
  isValid
) {
  return extractGuards(activated, 'beforeRouteEnter', function (guard, _, match, key) {
    return bindEnterGuard(guard, match, key, cbs, isValid)
  })
}

function bindEnterGuard (
  guard,
  match,
  key,
  cbs,
  isValid
) {
  return function routeEnterGuard (to, from, next) {
    return guard(to, from, function (cb) {
      next(cb);
      if (typeof cb === 'function') {
        cbs.push(function () {
          // #750
          // if a router-view is wrapped with an out-in transition,
          // the instance may not have been registered at this time.
          // we will need to poll for registration until current route
          // is no longer valid.
          poll(cb, match.instances, key, isValid);
        });
      }
    })
  }
}

function poll (
  cb, // somehow flow cannot infer this is a function
  instances,
  key,
  isValid
) {
  if (
    instances[key] &&
    !instances[key]._isBeingDestroyed // do not reuse being destroyed instance
  ) {
    cb(instances[key]);
  } else if (isValid()) {
    setTimeout(function () {
      poll(cb, instances, key, isValid);
    }, 16);
  }
}

/*  */

var HTML5History = /*@__PURE__*/(function (History$$1) {
  function HTML5History (router, base) {
    var this$1 = this;

    History$$1.call(this, router, base);

    var expectScroll = router.options.scrollBehavior;
    var supportsScroll = supportsPushState && expectScroll;

    if (supportsScroll) {
      setupScroll();
    }

    var initLocation = getLocation(this.base);
    window.addEventListener('popstate', function (e) {
      var current = this$1.current;

      // Avoiding first `popstate` event dispatched in some browsers but first
      // history route not updated since async guard at the same time.
      var location = getLocation(this$1.base);
      if (this$1.current === START && location === initLocation) {
        return
      }

      this$1.transitionTo(location, function (route) {
        if (supportsScroll) {
          handleScroll(router, route, current, true);
        }
      });
    });
  }

  if ( History$$1 ) HTML5History.__proto__ = History$$1;
  HTML5History.prototype = Object.create( History$$1 && History$$1.prototype );
  HTML5History.prototype.constructor = HTML5History;

  HTML5History.prototype.go = function go (n) {
    window.history.go(n);
  };

  HTML5History.prototype.push = function push (location, onComplete, onAbort) {
    var this$1 = this;

    var ref = this;
    var fromRoute = ref.current;
    this.transitionTo(location, function (route) {
      pushState(cleanPath(this$1.base + route.fullPath));
      handleScroll(this$1.router, route, fromRoute, false);
      onComplete && onComplete(route);
    }, onAbort);
  };

  HTML5History.prototype.replace = function replace (location, onComplete, onAbort) {
    var this$1 = this;

    var ref = this;
    var fromRoute = ref.current;
    this.transitionTo(location, function (route) {
      replaceState(cleanPath(this$1.base + route.fullPath));
      handleScroll(this$1.router, route, fromRoute, false);
      onComplete && onComplete(route);
    }, onAbort);
  };

  HTML5History.prototype.ensureURL = function ensureURL (push) {
    if (getLocation(this.base) !== this.current.fullPath) {
      var current = cleanPath(this.base + this.current.fullPath);
      push ? pushState(current) : replaceState(current);
    }
  };

  HTML5History.prototype.getCurrentLocation = function getCurrentLocation () {
    return getLocation(this.base)
  };

  return HTML5History;
}(History));

function getLocation (base) {
  var path = decodeURI(window.location.pathname);
  if (base && path.indexOf(base) === 0) {
    path = path.slice(base.length);
  }
  return (path || '/') + window.location.search + window.location.hash
}

/*  */

var HashHistory = /*@__PURE__*/(function (History$$1) {
  function HashHistory (router, base, fallback) {
    History$$1.call(this, router, base);
    // check history fallback deeplinking
    if (fallback && checkFallback(this.base)) {
      return
    }
    ensureSlash();
  }

  if ( History$$1 ) HashHistory.__proto__ = History$$1;
  HashHistory.prototype = Object.create( History$$1 && History$$1.prototype );
  HashHistory.prototype.constructor = HashHistory;

  // this is delayed until the app mounts
  // to avoid the hashchange listener being fired too early
  HashHistory.prototype.setupListeners = function setupListeners () {
    var this$1 = this;

    var router = this.router;
    var expectScroll = router.options.scrollBehavior;
    var supportsScroll = supportsPushState && expectScroll;

    if (supportsScroll) {
      setupScroll();
    }

    window.addEventListener(supportsPushState ? 'popstate' : 'hashchange', function () {
      var current = this$1.current;
      if (!ensureSlash()) {
        return
      }
      this$1.transitionTo(getHash(), function (route) {
        if (supportsScroll) {
          handleScroll(this$1.router, route, current, true);
        }
        if (!supportsPushState) {
          replaceHash(route.fullPath);
        }
      });
    });
  };

  HashHistory.prototype.push = function push (location, onComplete, onAbort) {
    var this$1 = this;

    var ref = this;
    var fromRoute = ref.current;
    this.transitionTo(location, function (route) {
      pushHash(route.fullPath);
      handleScroll(this$1.router, route, fromRoute, false);
      onComplete && onComplete(route);
    }, onAbort);
  };

  HashHistory.prototype.replace = function replace (location, onComplete, onAbort) {
    var this$1 = this;

    var ref = this;
    var fromRoute = ref.current;
    this.transitionTo(location, function (route) {
      replaceHash(route.fullPath);
      handleScroll(this$1.router, route, fromRoute, false);
      onComplete && onComplete(route);
    }, onAbort);
  };

  HashHistory.prototype.go = function go (n) {
    window.history.go(n);
  };

  HashHistory.prototype.ensureURL = function ensureURL (push) {
    var current = this.current.fullPath;
    if (getHash() !== current) {
      push ? pushHash(current) : replaceHash(current);
    }
  };

  HashHistory.prototype.getCurrentLocation = function getCurrentLocation () {
    return getHash()
  };

  return HashHistory;
}(History));

function checkFallback (base) {
  var location = getLocation(base);
  if (!/^\/#/.test(location)) {
    window.location.replace(
      cleanPath(base + '/#' + location)
    );
    return true
  }
}

function ensureSlash () {
  var path = getHash();
  if (path.charAt(0) === '/') {
    return true
  }
  replaceHash('/' + path);
  return false
}

function getHash () {
  // We can't use window.location.hash here because it's not
  // consistent across browsers - Firefox will pre-decode it!
  var href = window.location.href;
  var index = href.indexOf('#');
  // empty path
  if (index < 0) { return '' }

  href = href.slice(index + 1);
  // decode the hash but not the search or hash
  // as search(query) is already decoded
  // https://github.com/vuejs/vue-router/issues/2708
  var searchIndex = href.indexOf('?');
  if (searchIndex < 0) {
    var hashIndex = href.indexOf('#');
    if (hashIndex > -1) { href = decodeURI(href.slice(0, hashIndex)) + href.slice(hashIndex); }
    else { href = decodeURI(href); }
  } else {
    if (searchIndex > -1) { href = decodeURI(href.slice(0, searchIndex)) + href.slice(searchIndex); }
  }

  return href
}

function getUrl (path) {
  var href = window.location.href;
  var i = href.indexOf('#');
  var base = i >= 0 ? href.slice(0, i) : href;
  return (base + "#" + path)
}

function pushHash (path) {
  if (supportsPushState) {
    pushState(getUrl(path));
  } else {
    window.location.hash = path;
  }
}

function replaceHash (path) {
  if (supportsPushState) {
    replaceState(getUrl(path));
  } else {
    window.location.replace(getUrl(path));
  }
}

/*  */

var AbstractHistory = /*@__PURE__*/(function (History$$1) {
  function AbstractHistory (router, base) {
    History$$1.call(this, router, base);
    this.stack = [];
    this.index = -1;
  }

  if ( History$$1 ) AbstractHistory.__proto__ = History$$1;
  AbstractHistory.prototype = Object.create( History$$1 && History$$1.prototype );
  AbstractHistory.prototype.constructor = AbstractHistory;

  AbstractHistory.prototype.push = function push (location, onComplete, onAbort) {
    var this$1 = this;

    this.transitionTo(location, function (route) {
      this$1.stack = this$1.stack.slice(0, this$1.index + 1).concat(route);
      this$1.index++;
      onComplete && onComplete(route);
    }, onAbort);
  };

  AbstractHistory.prototype.replace = function replace (location, onComplete, onAbort) {
    var this$1 = this;

    this.transitionTo(location, function (route) {
      this$1.stack = this$1.stack.slice(0, this$1.index).concat(route);
      onComplete && onComplete(route);
    }, onAbort);
  };

  AbstractHistory.prototype.go = function go (n) {
    var this$1 = this;

    var targetIndex = this.index + n;
    if (targetIndex < 0 || targetIndex >= this.stack.length) {
      return
    }
    var route = this.stack[targetIndex];
    this.confirmTransition(route, function () {
      this$1.index = targetIndex;
      this$1.updateRoute(route);
    });
  };

  AbstractHistory.prototype.getCurrentLocation = function getCurrentLocation () {
    var current = this.stack[this.stack.length - 1];
    return current ? current.fullPath : '/'
  };

  AbstractHistory.prototype.ensureURL = function ensureURL () {
    // noop
  };

  return AbstractHistory;
}(History));

/*  */



var VueRouter = function VueRouter (options) {
  if ( options === void 0 ) options = {};

  this.app = null;
  this.apps = [];
  this.options = options;
  this.beforeHooks = [];
  this.resolveHooks = [];
  this.afterHooks = [];
  this.matcher = createMatcher(options.routes || [], this);

  var mode = options.mode || 'hash';
  this.fallback = mode === 'history' && !supportsPushState && options.fallback !== false;
  if (this.fallback) {
    mode = 'hash';
  }
  if (!inBrowser) {
    mode = 'abstract';
  }
  this.mode = mode;

  switch (mode) {
    case 'history':
      this.history = new HTML5History(this, options.base);
      break
    case 'hash':
      this.history = new HashHistory(this, options.base, this.fallback);
      break
    case 'abstract':
      this.history = new AbstractHistory(this, options.base);
      break
    default:
      if (true) {
        assert(false, ("invalid mode: " + mode));
      }
  }
};

var prototypeAccessors = { currentRoute: { configurable: true } };

VueRouter.prototype.match = function match (
  raw,
  current,
  redirectedFrom
) {
  return this.matcher.match(raw, current, redirectedFrom)
};

prototypeAccessors.currentRoute.get = function () {
  return this.history && this.history.current
};

VueRouter.prototype.init = function init (app /* Vue component instance */) {
    var this$1 = this;

   true && assert(
    install.installed,
    "not installed. Make sure to call `Vue.use(VueRouter)` " +
    "before creating root instance."
  );

  this.apps.push(app);

  // set up app destroyed handler
  // https://github.com/vuejs/vue-router/issues/2639
  app.$once('hook:destroyed', function () {
    // clean out app from this.apps array once destroyed
    var index = this$1.apps.indexOf(app);
    if (index > -1) { this$1.apps.splice(index, 1); }
    // ensure we still have a main app or null if no apps
    // we do not release the router so it can be reused
    if (this$1.app === app) { this$1.app = this$1.apps[0] || null; }
  });

  // main app previously initialized
  // return as we don't need to set up new history listener
  if (this.app) {
    return
  }

  this.app = app;

  var history = this.history;

  if (history instanceof HTML5History) {
    history.transitionTo(history.getCurrentLocation());
  } else if (history instanceof HashHistory) {
    var setupHashListener = function () {
      history.setupListeners();
    };
    history.transitionTo(
      history.getCurrentLocation(),
      setupHashListener,
      setupHashListener
    );
  }

  history.listen(function (route) {
    this$1.apps.forEach(function (app) {
      app._route = route;
    });
  });
};

VueRouter.prototype.beforeEach = function beforeEach (fn) {
  return registerHook(this.beforeHooks, fn)
};

VueRouter.prototype.beforeResolve = function beforeResolve (fn) {
  return registerHook(this.resolveHooks, fn)
};

VueRouter.prototype.afterEach = function afterEach (fn) {
  return registerHook(this.afterHooks, fn)
};

VueRouter.prototype.onReady = function onReady (cb, errorCb) {
  this.history.onReady(cb, errorCb);
};

VueRouter.prototype.onError = function onError (errorCb) {
  this.history.onError(errorCb);
};

VueRouter.prototype.push = function push (location, onComplete, onAbort) {
  this.history.push(location, onComplete, onAbort);
};

VueRouter.prototype.replace = function replace (location, onComplete, onAbort) {
  this.history.replace(location, onComplete, onAbort);
};

VueRouter.prototype.go = function go (n) {
  this.history.go(n);
};

VueRouter.prototype.back = function back () {
  this.go(-1);
};

VueRouter.prototype.forward = function forward () {
  this.go(1);
};

VueRouter.prototype.getMatchedComponents = function getMatchedComponents (to) {
  var route = to
    ? to.matched
      ? to
      : this.resolve(to).route
    : this.currentRoute;
  if (!route) {
    return []
  }
  return [].concat.apply([], route.matched.map(function (m) {
    return Object.keys(m.components).map(function (key) {
      return m.components[key]
    })
  }))
};

VueRouter.prototype.resolve = function resolve (
  to,
  current,
  append
) {
  current = current || this.history.current;
  var location = normalizeLocation(
    to,
    current,
    append,
    this
  );
  var route = this.match(location, current);
  var fullPath = route.redirectedFrom || route.fullPath;
  var base = this.history.base;
  var href = createHref(base, fullPath, this.mode);
  return {
    location: location,
    route: route,
    href: href,
    // for backwards compat
    normalizedTo: location,
    resolved: route
  }
};

VueRouter.prototype.addRoutes = function addRoutes (routes) {
  this.matcher.addRoutes(routes);
  if (this.history.current !== START) {
    this.history.transitionTo(this.history.getCurrentLocation());
  }
};

Object.defineProperties( VueRouter.prototype, prototypeAccessors );

function registerHook (list, fn) {
  list.push(fn);
  return function () {
    var i = list.indexOf(fn);
    if (i > -1) { list.splice(i, 1); }
  }
}

function createHref (base, fullPath, mode) {
  var path = mode === 'hash' ? '#' + fullPath : fullPath;
  return base ? cleanPath(base + '/' + path) : path
}

VueRouter.install = install;
VueRouter.version = '3.0.6';

if (inBrowser && window.Vue) {
  window.Vue.use(VueRouter);
}

/* harmony default export */ __webpack_exports__["default"] = (VueRouter);


/***/ }),

/***/ "./node_modules/vue/dist/vue.common.dev.js":
/*!*************************************************!*\
  !*** ./node_modules/vue/dist/vue.common.dev.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, setImmediate) {/*!
 * Vue.js v2.6.10
 * (c) 2014-2019 Evan You
 * Released under the MIT License.
 */


/*  */

var emptyObject = Object.freeze({});

// These helpers produce better VM code in JS engines due to their
// explicitness and function inlining.
function isUndef (v) {
  return v === undefined || v === null
}

function isDef (v) {
  return v !== undefined && v !== null
}

function isTrue (v) {
  return v === true
}

function isFalse (v) {
  return v === false
}

/**
 * Check if value is primitive.
 */
function isPrimitive (value) {
  return (
    typeof value === 'string' ||
    typeof value === 'number' ||
    // $flow-disable-line
    typeof value === 'symbol' ||
    typeof value === 'boolean'
  )
}

/**
 * Quick object check - this is primarily used to tell
 * Objects from primitive values when we know the value
 * is a JSON-compliant type.
 */
function isObject (obj) {
  return obj !== null && typeof obj === 'object'
}

/**
 * Get the raw type string of a value, e.g., [object Object].
 */
var _toString = Object.prototype.toString;

function toRawType (value) {
  return _toString.call(value).slice(8, -1)
}

/**
 * Strict object type check. Only returns true
 * for plain JavaScript objects.
 */
function isPlainObject (obj) {
  return _toString.call(obj) === '[object Object]'
}

function isRegExp (v) {
  return _toString.call(v) === '[object RegExp]'
}

/**
 * Check if val is a valid array index.
 */
function isValidArrayIndex (val) {
  var n = parseFloat(String(val));
  return n >= 0 && Math.floor(n) === n && isFinite(val)
}

function isPromise (val) {
  return (
    isDef(val) &&
    typeof val.then === 'function' &&
    typeof val.catch === 'function'
  )
}

/**
 * Convert a value to a string that is actually rendered.
 */
function toString (val) {
  return val == null
    ? ''
    : Array.isArray(val) || (isPlainObject(val) && val.toString === _toString)
      ? JSON.stringify(val, null, 2)
      : String(val)
}

/**
 * Convert an input value to a number for persistence.
 * If the conversion fails, return original string.
 */
function toNumber (val) {
  var n = parseFloat(val);
  return isNaN(n) ? val : n
}

/**
 * Make a map and return a function for checking if a key
 * is in that map.
 */
function makeMap (
  str,
  expectsLowerCase
) {
  var map = Object.create(null);
  var list = str.split(',');
  for (var i = 0; i < list.length; i++) {
    map[list[i]] = true;
  }
  return expectsLowerCase
    ? function (val) { return map[val.toLowerCase()]; }
    : function (val) { return map[val]; }
}

/**
 * Check if a tag is a built-in tag.
 */
var isBuiltInTag = makeMap('slot,component', true);

/**
 * Check if an attribute is a reserved attribute.
 */
var isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');

/**
 * Remove an item from an array.
 */
function remove (arr, item) {
  if (arr.length) {
    var index = arr.indexOf(item);
    if (index > -1) {
      return arr.splice(index, 1)
    }
  }
}

/**
 * Check whether an object has the property.
 */
var hasOwnProperty = Object.prototype.hasOwnProperty;
function hasOwn (obj, key) {
  return hasOwnProperty.call(obj, key)
}

/**
 * Create a cached version of a pure function.
 */
function cached (fn) {
  var cache = Object.create(null);
  return (function cachedFn (str) {
    var hit = cache[str];
    return hit || (cache[str] = fn(str))
  })
}

/**
 * Camelize a hyphen-delimited string.
 */
var camelizeRE = /-(\w)/g;
var camelize = cached(function (str) {
  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })
});

/**
 * Capitalize a string.
 */
var capitalize = cached(function (str) {
  return str.charAt(0).toUpperCase() + str.slice(1)
});

/**
 * Hyphenate a camelCase string.
 */
var hyphenateRE = /\B([A-Z])/g;
var hyphenate = cached(function (str) {
  return str.replace(hyphenateRE, '-$1').toLowerCase()
});

/**
 * Simple bind polyfill for environments that do not support it,
 * e.g., PhantomJS 1.x. Technically, we don't need this anymore
 * since native bind is now performant enough in most browsers.
 * But removing it would mean breaking code that was able to run in
 * PhantomJS 1.x, so this must be kept for backward compatibility.
 */

/* istanbul ignore next */
function polyfillBind (fn, ctx) {
  function boundFn (a) {
    var l = arguments.length;
    return l
      ? l > 1
        ? fn.apply(ctx, arguments)
        : fn.call(ctx, a)
      : fn.call(ctx)
  }

  boundFn._length = fn.length;
  return boundFn
}

function nativeBind (fn, ctx) {
  return fn.bind(ctx)
}

var bind = Function.prototype.bind
  ? nativeBind
  : polyfillBind;

/**
 * Convert an Array-like object to a real Array.
 */
function toArray (list, start) {
  start = start || 0;
  var i = list.length - start;
  var ret = new Array(i);
  while (i--) {
    ret[i] = list[i + start];
  }
  return ret
}

/**
 * Mix properties into target object.
 */
function extend (to, _from) {
  for (var key in _from) {
    to[key] = _from[key];
  }
  return to
}

/**
 * Merge an Array of Objects into a single Object.
 */
function toObject (arr) {
  var res = {};
  for (var i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }
  return res
}

/* eslint-disable no-unused-vars */

/**
 * Perform no operation.
 * Stubbing args to make Flow happy without leaving useless transpiled code
 * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).
 */
function noop (a, b, c) {}

/**
 * Always return false.
 */
var no = function (a, b, c) { return false; };

/* eslint-enable no-unused-vars */

/**
 * Return the same value.
 */
var identity = function (_) { return _; };

/**
 * Generate a string containing static keys from compiler modules.
 */
function genStaticKeys (modules) {
  return modules.reduce(function (keys, m) {
    return keys.concat(m.staticKeys || [])
  }, []).join(',')
}

/**
 * Check if two values are loosely equal - that is,
 * if they are plain objects, do they have the same shape?
 */
function looseEqual (a, b) {
  if (a === b) { return true }
  var isObjectA = isObject(a);
  var isObjectB = isObject(b);
  if (isObjectA && isObjectB) {
    try {
      var isArrayA = Array.isArray(a);
      var isArrayB = Array.isArray(b);
      if (isArrayA && isArrayB) {
        return a.length === b.length && a.every(function (e, i) {
          return looseEqual(e, b[i])
        })
      } else if (a instanceof Date && b instanceof Date) {
        return a.getTime() === b.getTime()
      } else if (!isArrayA && !isArrayB) {
        var keysA = Object.keys(a);
        var keysB = Object.keys(b);
        return keysA.length === keysB.length && keysA.every(function (key) {
          return looseEqual(a[key], b[key])
        })
      } else {
        /* istanbul ignore next */
        return false
      }
    } catch (e) {
      /* istanbul ignore next */
      return false
    }
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b)
  } else {
    return false
  }
}

/**
 * Return the first index at which a loosely equal value can be
 * found in the array (if value is a plain object, the array must
 * contain an object of the same shape), or -1 if it is not present.
 */
function looseIndexOf (arr, val) {
  for (var i = 0; i < arr.length; i++) {
    if (looseEqual(arr[i], val)) { return i }
  }
  return -1
}

/**
 * Ensure a function is called only once.
 */
function once (fn) {
  var called = false;
  return function () {
    if (!called) {
      called = true;
      fn.apply(this, arguments);
    }
  }
}

var SSR_ATTR = 'data-server-rendered';

var ASSET_TYPES = [
  'component',
  'directive',
  'filter'
];

var LIFECYCLE_HOOKS = [
  'beforeCreate',
  'created',
  'beforeMount',
  'mounted',
  'beforeUpdate',
  'updated',
  'beforeDestroy',
  'destroyed',
  'activated',
  'deactivated',
  'errorCaptured',
  'serverPrefetch'
];

/*  */



var config = ({
  /**
   * Option merge strategies (used in core/util/options)
   */
  // $flow-disable-line
  optionMergeStrategies: Object.create(null),

  /**
   * Whether to suppress warnings.
   */
  silent: false,

  /**
   * Show production mode tip message on boot?
   */
  productionTip: "development" !== 'production',

  /**
   * Whether to enable devtools
   */
  devtools: "development" !== 'production',

  /**
   * Whether to record perf
   */
  performance: false,

  /**
   * Error handler for watcher errors
   */
  errorHandler: null,

  /**
   * Warn handler for watcher warns
   */
  warnHandler: null,

  /**
   * Ignore certain custom elements
   */
  ignoredElements: [],

  /**
   * Custom user key aliases for v-on
   */
  // $flow-disable-line
  keyCodes: Object.create(null),

  /**
   * Check if a tag is reserved so that it cannot be registered as a
   * component. This is platform-dependent and may be overwritten.
   */
  isReservedTag: no,

  /**
   * Check if an attribute is reserved so that it cannot be used as a component
   * prop. This is platform-dependent and may be overwritten.
   */
  isReservedAttr: no,

  /**
   * Check if a tag is an unknown element.
   * Platform-dependent.
   */
  isUnknownElement: no,

  /**
   * Get the namespace of an element
   */
  getTagNamespace: noop,

  /**
   * Parse the real tag name for the specific platform.
   */
  parsePlatformTagName: identity,

  /**
   * Check if an attribute must be bound using property, e.g. value
   * Platform-dependent.
   */
  mustUseProp: no,

  /**
   * Perform updates asynchronously. Intended to be used by Vue Test Utils
   * This will significantly reduce performance if set to false.
   */
  async: true,

  /**
   * Exposed for legacy reasons
   */
  _lifecycleHooks: LIFECYCLE_HOOKS
});

/*  */

/**
 * unicode letters used for parsing html tags, component names and property paths.
 * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname
 * skipping \u10000-\uEFFFF due to it freezing up PhantomJS
 */
var unicodeRegExp = /a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;

/**
 * Check if a string starts with $ or _
 */
function isReserved (str) {
  var c = (str + '').charCodeAt(0);
  return c === 0x24 || c === 0x5F
}

/**
 * Define a property.
 */
function def (obj, key, val, enumerable) {
  Object.defineProperty(obj, key, {
    value: val,
    enumerable: !!enumerable,
    writable: true,
    configurable: true
  });
}

/**
 * Parse simple path.
 */
var bailRE = new RegExp(("[^" + (unicodeRegExp.source) + ".$_\\d]"));
function parsePath (path) {
  if (bailRE.test(path)) {
    return
  }
  var segments = path.split('.');
  return function (obj) {
    for (var i = 0; i < segments.length; i++) {
      if (!obj) { return }
      obj = obj[segments[i]];
    }
    return obj
  }
}

/*  */

// can we use __proto__?
var hasProto = '__proto__' in {};

// Browser environment sniffing
var inBrowser = typeof window !== 'undefined';
var inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;
var weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();
var UA = inBrowser && window.navigator.userAgent.toLowerCase();
var isIE = UA && /msie|trident/.test(UA);
var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
var isEdge = UA && UA.indexOf('edge/') > 0;
var isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');
var isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');
var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge;
var isPhantomJS = UA && /phantomjs/.test(UA);
var isFF = UA && UA.match(/firefox\/(\d+)/);

// Firefox has a "watch" function on Object.prototype...
var nativeWatch = ({}).watch;

var supportsPassive = false;
if (inBrowser) {
  try {
    var opts = {};
    Object.defineProperty(opts, 'passive', ({
      get: function get () {
        /* istanbul ignore next */
        supportsPassive = true;
      }
    })); // https://github.com/facebook/flow/issues/285
    window.addEventListener('test-passive', null, opts);
  } catch (e) {}
}

// this needs to be lazy-evaled because vue may be required before
// vue-server-renderer can set VUE_ENV
var _isServer;
var isServerRendering = function () {
  if (_isServer === undefined) {
    /* istanbul ignore if */
    if (!inBrowser && !inWeex && typeof global !== 'undefined') {
      // detect presence of vue-server-renderer and avoid
      // Webpack shimming the process
      _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';
    } else {
      _isServer = false;
    }
  }
  return _isServer
};

// detect devtools
var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;

/* istanbul ignore next */
function isNative (Ctor) {
  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())
}

var hasSymbol =
  typeof Symbol !== 'undefined' && isNative(Symbol) &&
  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);

var _Set;
/* istanbul ignore if */ // $flow-disable-line
if (typeof Set !== 'undefined' && isNative(Set)) {
  // use native Set when available.
  _Set = Set;
} else {
  // a non-standard Set polyfill that only works with primitive keys.
  _Set = /*@__PURE__*/(function () {
    function Set () {
      this.set = Object.create(null);
    }
    Set.prototype.has = function has (key) {
      return this.set[key] === true
    };
    Set.prototype.add = function add (key) {
      this.set[key] = true;
    };
    Set.prototype.clear = function clear () {
      this.set = Object.create(null);
    };

    return Set;
  }());
}

/*  */

var warn = noop;
var tip = noop;
var generateComponentTrace = (noop); // work around flow check
var formatComponentName = (noop);

{
  var hasConsole = typeof console !== 'undefined';
  var classifyRE = /(?:^|[-_])(\w)/g;
  var classify = function (str) { return str
    .replace(classifyRE, function (c) { return c.toUpperCase(); })
    .replace(/[-_]/g, ''); };

  warn = function (msg, vm) {
    var trace = vm ? generateComponentTrace(vm) : '';

    if (config.warnHandler) {
      config.warnHandler.call(null, msg, vm, trace);
    } else if (hasConsole && (!config.silent)) {
      console.error(("[Vue warn]: " + msg + trace));
    }
  };

  tip = function (msg, vm) {
    if (hasConsole && (!config.silent)) {
      console.warn("[Vue tip]: " + msg + (
        vm ? generateComponentTrace(vm) : ''
      ));
    }
  };

  formatComponentName = function (vm, includeFile) {
    if (vm.$root === vm) {
      return '<Root>'
    }
    var options = typeof vm === 'function' && vm.cid != null
      ? vm.options
      : vm._isVue
        ? vm.$options || vm.constructor.options
        : vm;
    var name = options.name || options._componentTag;
    var file = options.__file;
    if (!name && file) {
      var match = file.match(/([^/\\]+)\.vue$/);
      name = match && match[1];
    }

    return (
      (name ? ("<" + (classify(name)) + ">") : "<Anonymous>") +
      (file && includeFile !== false ? (" at " + file) : '')
    )
  };

  var repeat = function (str, n) {
    var res = '';
    while (n) {
      if (n % 2 === 1) { res += str; }
      if (n > 1) { str += str; }
      n >>= 1;
    }
    return res
  };

  generateComponentTrace = function (vm) {
    if (vm._isVue && vm.$parent) {
      var tree = [];
      var currentRecursiveSequence = 0;
      while (vm) {
        if (tree.length > 0) {
          var last = tree[tree.length - 1];
          if (last.constructor === vm.constructor) {
            currentRecursiveSequence++;
            vm = vm.$parent;
            continue
          } else if (currentRecursiveSequence > 0) {
            tree[tree.length - 1] = [last, currentRecursiveSequence];
            currentRecursiveSequence = 0;
          }
        }
        tree.push(vm);
        vm = vm.$parent;
      }
      return '\n\nfound in\n\n' + tree
        .map(function (vm, i) { return ("" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)
            ? ((formatComponentName(vm[0])) + "... (" + (vm[1]) + " recursive calls)")
            : formatComponentName(vm))); })
        .join('\n')
    } else {
      return ("\n\n(found in " + (formatComponentName(vm)) + ")")
    }
  };
}

/*  */

var uid = 0;

/**
 * A dep is an observable that can have multiple
 * directives subscribing to it.
 */
var Dep = function Dep () {
  this.id = uid++;
  this.subs = [];
};

Dep.prototype.addSub = function addSub (sub) {
  this.subs.push(sub);
};

Dep.prototype.removeSub = function removeSub (sub) {
  remove(this.subs, sub);
};

Dep.prototype.depend = function depend () {
  if (Dep.target) {
    Dep.target.addDep(this);
  }
};

Dep.prototype.notify = function notify () {
  // stabilize the subscriber list first
  var subs = this.subs.slice();
  if (!config.async) {
    // subs aren't sorted in scheduler if not running async
    // we need to sort them now to make sure they fire in correct
    // order
    subs.sort(function (a, b) { return a.id - b.id; });
  }
  for (var i = 0, l = subs.length; i < l; i++) {
    subs[i].update();
  }
};

// The current target watcher being evaluated.
// This is globally unique because only one watcher
// can be evaluated at a time.
Dep.target = null;
var targetStack = [];

function pushTarget (target) {
  targetStack.push(target);
  Dep.target = target;
}

function popTarget () {
  targetStack.pop();
  Dep.target = targetStack[targetStack.length - 1];
}

/*  */

var VNode = function VNode (
  tag,
  data,
  children,
  text,
  elm,
  context,
  componentOptions,
  asyncFactory
) {
  this.tag = tag;
  this.data = data;
  this.children = children;
  this.text = text;
  this.elm = elm;
  this.ns = undefined;
  this.context = context;
  this.fnContext = undefined;
  this.fnOptions = undefined;
  this.fnScopeId = undefined;
  this.key = data && data.key;
  this.componentOptions = componentOptions;
  this.componentInstance = undefined;
  this.parent = undefined;
  this.raw = false;
  this.isStatic = false;
  this.isRootInsert = true;
  this.isComment = false;
  this.isCloned = false;
  this.isOnce = false;
  this.asyncFactory = asyncFactory;
  this.asyncMeta = undefined;
  this.isAsyncPlaceholder = false;
};

var prototypeAccessors = { child: { configurable: true } };

// DEPRECATED: alias for componentInstance for backwards compat.
/* istanbul ignore next */
prototypeAccessors.child.get = function () {
  return this.componentInstance
};

Object.defineProperties( VNode.prototype, prototypeAccessors );

var createEmptyVNode = function (text) {
  if ( text === void 0 ) text = '';

  var node = new VNode();
  node.text = text;
  node.isComment = true;
  return node
};

function createTextVNode (val) {
  return new VNode(undefined, undefined, undefined, String(val))
}

// optimized shallow clone
// used for static nodes and slot nodes because they may be reused across
// multiple renders, cloning them avoids errors when DOM manipulations rely
// on their elm reference.
function cloneVNode (vnode) {
  var cloned = new VNode(
    vnode.tag,
    vnode.data,
    // #7975
    // clone children array to avoid mutating original in case of cloning
    // a child.
    vnode.children && vnode.children.slice(),
    vnode.text,
    vnode.elm,
    vnode.context,
    vnode.componentOptions,
    vnode.asyncFactory
  );
  cloned.ns = vnode.ns;
  cloned.isStatic = vnode.isStatic;
  cloned.key = vnode.key;
  cloned.isComment = vnode.isComment;
  cloned.fnContext = vnode.fnContext;
  cloned.fnOptions = vnode.fnOptions;
  cloned.fnScopeId = vnode.fnScopeId;
  cloned.asyncMeta = vnode.asyncMeta;
  cloned.isCloned = true;
  return cloned
}

/*
 * not type checking this file because flow doesn't play well with
 * dynamically accessing methods on Array prototype
 */

var arrayProto = Array.prototype;
var arrayMethods = Object.create(arrayProto);

var methodsToPatch = [
  'push',
  'pop',
  'shift',
  'unshift',
  'splice',
  'sort',
  'reverse'
];

/**
 * Intercept mutating methods and emit events
 */
methodsToPatch.forEach(function (method) {
  // cache original method
  var original = arrayProto[method];
  def(arrayMethods, method, function mutator () {
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    var result = original.apply(this, args);
    var ob = this.__ob__;
    var inserted;
    switch (method) {
      case 'push':
      case 'unshift':
        inserted = args;
        break
      case 'splice':
        inserted = args.slice(2);
        break
    }
    if (inserted) { ob.observeArray(inserted); }
    // notify change
    ob.dep.notify();
    return result
  });
});

/*  */

var arrayKeys = Object.getOwnPropertyNames(arrayMethods);

/**
 * In some cases we may want to disable observation inside a component's
 * update computation.
 */
var shouldObserve = true;

function toggleObserving (value) {
  shouldObserve = value;
}

/**
 * Observer class that is attached to each observed
 * object. Once attached, the observer converts the target
 * object's property keys into getter/setters that
 * collect dependencies and dispatch updates.
 */
var Observer = function Observer (value) {
  this.value = value;
  this.dep = new Dep();
  this.vmCount = 0;
  def(value, '__ob__', this);
  if (Array.isArray(value)) {
    if (hasProto) {
      protoAugment(value, arrayMethods);
    } else {
      copyAugment(value, arrayMethods, arrayKeys);
    }
    this.observeArray(value);
  } else {
    this.walk(value);
  }
};

/**
 * Walk through all properties and convert them into
 * getter/setters. This method should only be called when
 * value type is Object.
 */
Observer.prototype.walk = function walk (obj) {
  var keys = Object.keys(obj);
  for (var i = 0; i < keys.length; i++) {
    defineReactive$$1(obj, keys[i]);
  }
};

/**
 * Observe a list of Array items.
 */
Observer.prototype.observeArray = function observeArray (items) {
  for (var i = 0, l = items.length; i < l; i++) {
    observe(items[i]);
  }
};

// helpers

/**
 * Augment a target Object or Array by intercepting
 * the prototype chain using __proto__
 */
function protoAugment (target, src) {
  /* eslint-disable no-proto */
  target.__proto__ = src;
  /* eslint-enable no-proto */
}

/**
 * Augment a target Object or Array by defining
 * hidden properties.
 */
/* istanbul ignore next */
function copyAugment (target, src, keys) {
  for (var i = 0, l = keys.length; i < l; i++) {
    var key = keys[i];
    def(target, key, src[key]);
  }
}

/**
 * Attempt to create an observer instance for a value,
 * returns the new observer if successfully observed,
 * or the existing observer if the value already has one.
 */
function observe (value, asRootData) {
  if (!isObject(value) || value instanceof VNode) {
    return
  }
  var ob;
  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
    ob = value.__ob__;
  } else if (
    shouldObserve &&
    !isServerRendering() &&
    (Array.isArray(value) || isPlainObject(value)) &&
    Object.isExtensible(value) &&
    !value._isVue
  ) {
    ob = new Observer(value);
  }
  if (asRootData && ob) {
    ob.vmCount++;
  }
  return ob
}

/**
 * Define a reactive property on an Object.
 */
function defineReactive$$1 (
  obj,
  key,
  val,
  customSetter,
  shallow
) {
  var dep = new Dep();

  var property = Object.getOwnPropertyDescriptor(obj, key);
  if (property && property.configurable === false) {
    return
  }

  // cater for pre-defined getter/setters
  var getter = property && property.get;
  var setter = property && property.set;
  if ((!getter || setter) && arguments.length === 2) {
    val = obj[key];
  }

  var childOb = !shallow && observe(val);
  Object.defineProperty(obj, key, {
    enumerable: true,
    configurable: true,
    get: function reactiveGetter () {
      var value = getter ? getter.call(obj) : val;
      if (Dep.target) {
        dep.depend();
        if (childOb) {
          childOb.dep.depend();
          if (Array.isArray(value)) {
            dependArray(value);
          }
        }
      }
      return value
    },
    set: function reactiveSetter (newVal) {
      var value = getter ? getter.call(obj) : val;
      /* eslint-disable no-self-compare */
      if (newVal === value || (newVal !== newVal && value !== value)) {
        return
      }
      /* eslint-enable no-self-compare */
      if (customSetter) {
        customSetter();
      }
      // #7981: for accessor properties without setter
      if (getter && !setter) { return }
      if (setter) {
        setter.call(obj, newVal);
      } else {
        val = newVal;
      }
      childOb = !shallow && observe(newVal);
      dep.notify();
    }
  });
}

/**
 * Set a property on an object. Adds the new property and
 * triggers change notification if the property doesn't
 * already exist.
 */
function set (target, key, val) {
  if (isUndef(target) || isPrimitive(target)
  ) {
    warn(("Cannot set reactive property on undefined, null, or primitive value: " + ((target))));
  }
  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.length = Math.max(target.length, key);
    target.splice(key, 1, val);
    return val
  }
  if (key in target && !(key in Object.prototype)) {
    target[key] = val;
    return val
  }
  var ob = (target).__ob__;
  if (target._isVue || (ob && ob.vmCount)) {
    warn(
      'Avoid adding reactive properties to a Vue instance or its root $data ' +
      'at runtime - declare it upfront in the data option.'
    );
    return val
  }
  if (!ob) {
    target[key] = val;
    return val
  }
  defineReactive$$1(ob.value, key, val);
  ob.dep.notify();
  return val
}

/**
 * Delete a property and trigger change if necessary.
 */
function del (target, key) {
  if (isUndef(target) || isPrimitive(target)
  ) {
    warn(("Cannot delete reactive property on undefined, null, or primitive value: " + ((target))));
  }
  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.splice(key, 1);
    return
  }
  var ob = (target).__ob__;
  if (target._isVue || (ob && ob.vmCount)) {
    warn(
      'Avoid deleting properties on a Vue instance or its root $data ' +
      '- just set it to null.'
    );
    return
  }
  if (!hasOwn(target, key)) {
    return
  }
  delete target[key];
  if (!ob) {
    return
  }
  ob.dep.notify();
}

/**
 * Collect dependencies on array elements when the array is touched, since
 * we cannot intercept array element access like property getters.
 */
function dependArray (value) {
  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {
    e = value[i];
    e && e.__ob__ && e.__ob__.dep.depend();
    if (Array.isArray(e)) {
      dependArray(e);
    }
  }
}

/*  */

/**
 * Option overwriting strategies are functions that handle
 * how to merge a parent option value and a child option
 * value into the final value.
 */
var strats = config.optionMergeStrategies;

/**
 * Options with restrictions
 */
{
  strats.el = strats.propsData = function (parent, child, vm, key) {
    if (!vm) {
      warn(
        "option \"" + key + "\" can only be used during instance " +
        'creation with the `new` keyword.'
      );
    }
    return defaultStrat(parent, child)
  };
}

/**
 * Helper that recursively merges two data objects together.
 */
function mergeData (to, from) {
  if (!from) { return to }
  var key, toVal, fromVal;

  var keys = hasSymbol
    ? Reflect.ownKeys(from)
    : Object.keys(from);

  for (var i = 0; i < keys.length; i++) {
    key = keys[i];
    // in case the object is already observed...
    if (key === '__ob__') { continue }
    toVal = to[key];
    fromVal = from[key];
    if (!hasOwn(to, key)) {
      set(to, key, fromVal);
    } else if (
      toVal !== fromVal &&
      isPlainObject(toVal) &&
      isPlainObject(fromVal)
    ) {
      mergeData(toVal, fromVal);
    }
  }
  return to
}

/**
 * Data
 */
function mergeDataOrFn (
  parentVal,
  childVal,
  vm
) {
  if (!vm) {
    // in a Vue.extend merge, both should be functions
    if (!childVal) {
      return parentVal
    }
    if (!parentVal) {
      return childVal
    }
    // when parentVal & childVal are both present,
    // we need to return a function that returns the
    // merged result of both functions... no need to
    // check if parentVal is a function here because
    // it has to be a function to pass previous merges.
    return function mergedDataFn () {
      return mergeData(
        typeof childVal === 'function' ? childVal.call(this, this) : childVal,
        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal
      )
    }
  } else {
    return function mergedInstanceDataFn () {
      // instance merge
      var instanceData = typeof childVal === 'function'
        ? childVal.call(vm, vm)
        : childVal;
      var defaultData = typeof parentVal === 'function'
        ? parentVal.call(vm, vm)
        : parentVal;
      if (instanceData) {
        return mergeData(instanceData, defaultData)
      } else {
        return defaultData
      }
    }
  }
}

strats.data = function (
  parentVal,
  childVal,
  vm
) {
  if (!vm) {
    if (childVal && typeof childVal !== 'function') {
      warn(
        'The "data" option should be a function ' +
        'that returns a per-instance value in component ' +
        'definitions.',
        vm
      );

      return parentVal
    }
    return mergeDataOrFn(parentVal, childVal)
  }

  return mergeDataOrFn(parentVal, childVal, vm)
};

/**
 * Hooks and props are merged as arrays.
 */
function mergeHook (
  parentVal,
  childVal
) {
  var res = childVal
    ? parentVal
      ? parentVal.concat(childVal)
      : Array.isArray(childVal)
        ? childVal
        : [childVal]
    : parentVal;
  return res
    ? dedupeHooks(res)
    : res
}

function dedupeHooks (hooks) {
  var res = [];
  for (var i = 0; i < hooks.length; i++) {
    if (res.indexOf(hooks[i]) === -1) {
      res.push(hooks[i]);
    }
  }
  return res
}

LIFECYCLE_HOOKS.forEach(function (hook) {
  strats[hook] = mergeHook;
});

/**
 * Assets
 *
 * When a vm is present (instance creation), we need to do
 * a three-way merge between constructor options, instance
 * options and parent options.
 */
function mergeAssets (
  parentVal,
  childVal,
  vm,
  key
) {
  var res = Object.create(parentVal || null);
  if (childVal) {
    assertObjectType(key, childVal, vm);
    return extend(res, childVal)
  } else {
    return res
  }
}

ASSET_TYPES.forEach(function (type) {
  strats[type + 's'] = mergeAssets;
});

/**
 * Watchers.
 *
 * Watchers hashes should not overwrite one
 * another, so we merge them as arrays.
 */
strats.watch = function (
  parentVal,
  childVal,
  vm,
  key
) {
  // work around Firefox's Object.prototype.watch...
  if (parentVal === nativeWatch) { parentVal = undefined; }
  if (childVal === nativeWatch) { childVal = undefined; }
  /* istanbul ignore if */
  if (!childVal) { return Object.create(parentVal || null) }
  {
    assertObjectType(key, childVal, vm);
  }
  if (!parentVal) { return childVal }
  var ret = {};
  extend(ret, parentVal);
  for (var key$1 in childVal) {
    var parent = ret[key$1];
    var child = childVal[key$1];
    if (parent && !Array.isArray(parent)) {
      parent = [parent];
    }
    ret[key$1] = parent
      ? parent.concat(child)
      : Array.isArray(child) ? child : [child];
  }
  return ret
};

/**
 * Other object hashes.
 */
strats.props =
strats.methods =
strats.inject =
strats.computed = function (
  parentVal,
  childVal,
  vm,
  key
) {
  if (childVal && "development" !== 'production') {
    assertObjectType(key, childVal, vm);
  }
  if (!parentVal) { return childVal }
  var ret = Object.create(null);
  extend(ret, parentVal);
  if (childVal) { extend(ret, childVal); }
  return ret
};
strats.provide = mergeDataOrFn;

/**
 * Default strategy.
 */
var defaultStrat = function (parentVal, childVal) {
  return childVal === undefined
    ? parentVal
    : childVal
};

/**
 * Validate component names
 */
function checkComponents (options) {
  for (var key in options.components) {
    validateComponentName(key);
  }
}

function validateComponentName (name) {
  if (!new RegExp(("^[a-zA-Z][\\-\\.0-9_" + (unicodeRegExp.source) + "]*$")).test(name)) {
    warn(
      'Invalid component name: "' + name + '". Component names ' +
      'should conform to valid custom element name in html5 specification.'
    );
  }
  if (isBuiltInTag(name) || config.isReservedTag(name)) {
    warn(
      'Do not use built-in or reserved HTML elements as component ' +
      'id: ' + name
    );
  }
}

/**
 * Ensure all props option syntax are normalized into the
 * Object-based format.
 */
function normalizeProps (options, vm) {
  var props = options.props;
  if (!props) { return }
  var res = {};
  var i, val, name;
  if (Array.isArray(props)) {
    i = props.length;
    while (i--) {
      val = props[i];
      if (typeof val === 'string') {
        name = camelize(val);
        res[name] = { type: null };
      } else {
        warn('props must be strings when using array syntax.');
      }
    }
  } else if (isPlainObject(props)) {
    for (var key in props) {
      val = props[key];
      name = camelize(key);
      res[name] = isPlainObject(val)
        ? val
        : { type: val };
    }
  } else {
    warn(
      "Invalid value for option \"props\": expected an Array or an Object, " +
      "but got " + (toRawType(props)) + ".",
      vm
    );
  }
  options.props = res;
}

/**
 * Normalize all injections into Object-based format
 */
function normalizeInject (options, vm) {
  var inject = options.inject;
  if (!inject) { return }
  var normalized = options.inject = {};
  if (Array.isArray(inject)) {
    for (var i = 0; i < inject.length; i++) {
      normalized[inject[i]] = { from: inject[i] };
    }
  } else if (isPlainObject(inject)) {
    for (var key in inject) {
      var val = inject[key];
      normalized[key] = isPlainObject(val)
        ? extend({ from: key }, val)
        : { from: val };
    }
  } else {
    warn(
      "Invalid value for option \"inject\": expected an Array or an Object, " +
      "but got " + (toRawType(inject)) + ".",
      vm
    );
  }
}

/**
 * Normalize raw function directives into object format.
 */
function normalizeDirectives (options) {
  var dirs = options.directives;
  if (dirs) {
    for (var key in dirs) {
      var def$$1 = dirs[key];
      if (typeof def$$1 === 'function') {
        dirs[key] = { bind: def$$1, update: def$$1 };
      }
    }
  }
}

function assertObjectType (name, value, vm) {
  if (!isPlainObject(value)) {
    warn(
      "Invalid value for option \"" + name + "\": expected an Object, " +
      "but got " + (toRawType(value)) + ".",
      vm
    );
  }
}

/**
 * Merge two option objects into a new one.
 * Core utility used in both instantiation and inheritance.
 */
function mergeOptions (
  parent,
  child,
  vm
) {
  {
    checkComponents(child);
  }

  if (typeof child === 'function') {
    child = child.options;
  }

  normalizeProps(child, vm);
  normalizeInject(child, vm);
  normalizeDirectives(child);

  // Apply extends and mixins on the child options,
  // but only if it is a raw options object that isn't
  // the result of another mergeOptions call.
  // Only merged options has the _base property.
  if (!child._base) {
    if (child.extends) {
      parent = mergeOptions(parent, child.extends, vm);
    }
    if (child.mixins) {
      for (var i = 0, l = child.mixins.length; i < l; i++) {
        parent = mergeOptions(parent, child.mixins[i], vm);
      }
    }
  }

  var options = {};
  var key;
  for (key in parent) {
    mergeField(key);
  }
  for (key in child) {
    if (!hasOwn(parent, key)) {
      mergeField(key);
    }
  }
  function mergeField (key) {
    var strat = strats[key] || defaultStrat;
    options[key] = strat(parent[key], child[key], vm, key);
  }
  return options
}

/**
 * Resolve an asset.
 * This function is used because child instances need access
 * to assets defined in its ancestor chain.
 */
function resolveAsset (
  options,
  type,
  id,
  warnMissing
) {
  /* istanbul ignore if */
  if (typeof id !== 'string') {
    return
  }
  var assets = options[type];
  // check local registration variations first
  if (hasOwn(assets, id)) { return assets[id] }
  var camelizedId = camelize(id);
  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }
  var PascalCaseId = capitalize(camelizedId);
  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }
  // fallback to prototype chain
  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];
  if (warnMissing && !res) {
    warn(
      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,
      options
    );
  }
  return res
}

/*  */



function validateProp (
  key,
  propOptions,
  propsData,
  vm
) {
  var prop = propOptions[key];
  var absent = !hasOwn(propsData, key);
  var value = propsData[key];
  // boolean casting
  var booleanIndex = getTypeIndex(Boolean, prop.type);
  if (booleanIndex > -1) {
    if (absent && !hasOwn(prop, 'default')) {
      value = false;
    } else if (value === '' || value === hyphenate(key)) {
      // only cast empty string / same name to boolean if
      // boolean has higher priority
      var stringIndex = getTypeIndex(String, prop.type);
      if (stringIndex < 0 || booleanIndex < stringIndex) {
        value = true;
      }
    }
  }
  // check default value
  if (value === undefined) {
    value = getPropDefaultValue(vm, prop, key);
    // since the default value is a fresh copy,
    // make sure to observe it.
    var prevShouldObserve = shouldObserve;
    toggleObserving(true);
    observe(value);
    toggleObserving(prevShouldObserve);
  }
  {
    assertProp(prop, key, value, vm, absent);
  }
  return value
}

/**
 * Get the default value of a prop.
 */
function getPropDefaultValue (vm, prop, key) {
  // no default, return undefined
  if (!hasOwn(prop, 'default')) {
    return undefined
  }
  var def = prop.default;
  // warn against non-factory defaults for Object & Array
  if (isObject(def)) {
    warn(
      'Invalid default value for prop "' + key + '": ' +
      'Props with type Object/Array must use a factory function ' +
      'to return the default value.',
      vm
    );
  }
  // the raw prop value was also undefined from previous render,
  // return previous default value to avoid unnecessary watcher trigger
  if (vm && vm.$options.propsData &&
    vm.$options.propsData[key] === undefined &&
    vm._props[key] !== undefined
  ) {
    return vm._props[key]
  }
  // call factory function for non-Function types
  // a value is Function if its prototype is function even across different execution context
  return typeof def === 'function' && getType(prop.type) !== 'Function'
    ? def.call(vm)
    : def
}

/**
 * Assert whether a prop is valid.
 */
function assertProp (
  prop,
  name,
  value,
  vm,
  absent
) {
  if (prop.required && absent) {
    warn(
      'Missing required prop: "' + name + '"',
      vm
    );
    return
  }
  if (value == null && !prop.required) {
    return
  }
  var type = prop.type;
  var valid = !type || type === true;
  var expectedTypes = [];
  if (type) {
    if (!Array.isArray(type)) {
      type = [type];
    }
    for (var i = 0; i < type.length && !valid; i++) {
      var assertedType = assertType(value, type[i]);
      expectedTypes.push(assertedType.expectedType || '');
      valid = assertedType.valid;
    }
  }

  if (!valid) {
    warn(
      getInvalidTypeMessage(name, value, expectedTypes),
      vm
    );
    return
  }
  var validator = prop.validator;
  if (validator) {
    if (!validator(value)) {
      warn(
        'Invalid prop: custom validator check failed for prop "' + name + '".',
        vm
      );
    }
  }
}

var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;

function assertType (value, type) {
  var valid;
  var expectedType = getType(type);
  if (simpleCheckRE.test(expectedType)) {
    var t = typeof value;
    valid = t === expectedType.toLowerCase();
    // for primitive wrapper objects
    if (!valid && t === 'object') {
      valid = value instanceof type;
    }
  } else if (expectedType === 'Object') {
    valid = isPlainObject(value);
  } else if (expectedType === 'Array') {
    valid = Array.isArray(value);
  } else {
    valid = value instanceof type;
  }
  return {
    valid: valid,
    expectedType: expectedType
  }
}

/**
 * Use function string name to check built-in types,
 * because a simple equality check will fail when running
 * across different vms / iframes.
 */
function getType (fn) {
  var match = fn && fn.toString().match(/^\s*function (\w+)/);
  return match ? match[1] : ''
}

function isSameType (a, b) {
  return getType(a) === getType(b)
}

function getTypeIndex (type, expectedTypes) {
  if (!Array.isArray(expectedTypes)) {
    return isSameType(expectedTypes, type) ? 0 : -1
  }
  for (var i = 0, len = expectedTypes.length; i < len; i++) {
    if (isSameType(expectedTypes[i], type)) {
      return i
    }
  }
  return -1
}

function getInvalidTypeMessage (name, value, expectedTypes) {
  var message = "Invalid prop: type check failed for prop \"" + name + "\"." +
    " Expected " + (expectedTypes.map(capitalize).join(', '));
  var expectedType = expectedTypes[0];
  var receivedType = toRawType(value);
  var expectedValue = styleValue(value, expectedType);
  var receivedValue = styleValue(value, receivedType);
  // check if we need to specify expected value
  if (expectedTypes.length === 1 &&
      isExplicable(expectedType) &&
      !isBoolean(expectedType, receivedType)) {
    message += " with value " + expectedValue;
  }
  message += ", got " + receivedType + " ";
  // check if we need to specify received value
  if (isExplicable(receivedType)) {
    message += "with value " + receivedValue + ".";
  }
  return message
}

function styleValue (value, type) {
  if (type === 'String') {
    return ("\"" + value + "\"")
  } else if (type === 'Number') {
    return ("" + (Number(value)))
  } else {
    return ("" + value)
  }
}

function isExplicable (value) {
  var explicitTypes = ['string', 'number', 'boolean'];
  return explicitTypes.some(function (elem) { return value.toLowerCase() === elem; })
}

function isBoolean () {
  var args = [], len = arguments.length;
  while ( len-- ) args[ len ] = arguments[ len ];

  return args.some(function (elem) { return elem.toLowerCase() === 'boolean'; })
}

/*  */

function handleError (err, vm, info) {
  // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.
  // See: https://github.com/vuejs/vuex/issues/1505
  pushTarget();
  try {
    if (vm) {
      var cur = vm;
      while ((cur = cur.$parent)) {
        var hooks = cur.$options.errorCaptured;
        if (hooks) {
          for (var i = 0; i < hooks.length; i++) {
            try {
              var capture = hooks[i].call(cur, err, vm, info) === false;
              if (capture) { return }
            } catch (e) {
              globalHandleError(e, cur, 'errorCaptured hook');
            }
          }
        }
      }
    }
    globalHandleError(err, vm, info);
  } finally {
    popTarget();
  }
}

function invokeWithErrorHandling (
  handler,
  context,
  args,
  vm,
  info
) {
  var res;
  try {
    res = args ? handler.apply(context, args) : handler.call(context);
    if (res && !res._isVue && isPromise(res) && !res._handled) {
      res.catch(function (e) { return handleError(e, vm, info + " (Promise/async)"); });
      // issue #9511
      // avoid catch triggering multiple times when nested calls
      res._handled = true;
    }
  } catch (e) {
    handleError(e, vm, info);
  }
  return res
}

function globalHandleError (err, vm, info) {
  if (config.errorHandler) {
    try {
      return config.errorHandler.call(null, err, vm, info)
    } catch (e) {
      // if the user intentionally throws the original error in the handler,
      // do not log it twice
      if (e !== err) {
        logError(e, null, 'config.errorHandler');
      }
    }
  }
  logError(err, vm, info);
}

function logError (err, vm, info) {
  {
    warn(("Error in " + info + ": \"" + (err.toString()) + "\""), vm);
  }
  /* istanbul ignore else */
  if ((inBrowser || inWeex) && typeof console !== 'undefined') {
    console.error(err);
  } else {
    throw err
  }
}

/*  */

var isUsingMicroTask = false;

var callbacks = [];
var pending = false;

function flushCallbacks () {
  pending = false;
  var copies = callbacks.slice(0);
  callbacks.length = 0;
  for (var i = 0; i < copies.length; i++) {
    copies[i]();
  }
}

// Here we have async deferring wrappers using microtasks.
// In 2.5 we used (macro) tasks (in combination with microtasks).
// However, it has subtle problems when state is changed right before repaint
// (e.g. #6813, out-in transitions).
// Also, using (macro) tasks in event handler would cause some weird behaviors
// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).
// So we now use microtasks everywhere, again.
// A major drawback of this tradeoff is that there are some scenarios
// where microtasks have too high a priority and fire in between supposedly
// sequential events (e.g. #4521, #6690, which have workarounds)
// or even between bubbling of the same event (#6566).
var timerFunc;

// The nextTick behavior leverages the microtask queue, which can be accessed
// via either native Promise.then or MutationObserver.
// MutationObserver has wider support, however it is seriously bugged in
// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It
// completely stops working after triggering a few times... so, if native
// Promise is available, we will use it:
/* istanbul ignore next, $flow-disable-line */
if (typeof Promise !== 'undefined' && isNative(Promise)) {
  var p = Promise.resolve();
  timerFunc = function () {
    p.then(flushCallbacks);
    // In problematic UIWebViews, Promise.then doesn't completely break, but
    // it can get stuck in a weird state where callbacks are pushed into the
    // microtask queue but the queue isn't being flushed, until the browser
    // needs to do some other work, e.g. handle a timer. Therefore we can
    // "force" the microtask queue to be flushed by adding an empty timer.
    if (isIOS) { setTimeout(noop); }
  };
  isUsingMicroTask = true;
} else if (!isIE && typeof MutationObserver !== 'undefined' && (
  isNative(MutationObserver) ||
  // PhantomJS and iOS 7.x
  MutationObserver.toString() === '[object MutationObserverConstructor]'
)) {
  // Use MutationObserver where native Promise is not available,
  // e.g. PhantomJS, iOS7, Android 4.4
  // (#6466 MutationObserver is unreliable in IE11)
  var counter = 1;
  var observer = new MutationObserver(flushCallbacks);
  var textNode = document.createTextNode(String(counter));
  observer.observe(textNode, {
    characterData: true
  });
  timerFunc = function () {
    counter = (counter + 1) % 2;
    textNode.data = String(counter);
  };
  isUsingMicroTask = true;
} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {
  // Fallback to setImmediate.
  // Techinically it leverages the (macro) task queue,
  // but it is still a better choice than setTimeout.
  timerFunc = function () {
    setImmediate(flushCallbacks);
  };
} else {
  // Fallback to setTimeout.
  timerFunc = function () {
    setTimeout(flushCallbacks, 0);
  };
}

function nextTick (cb, ctx) {
  var _resolve;
  callbacks.push(function () {
    if (cb) {
      try {
        cb.call(ctx);
      } catch (e) {
        handleError(e, ctx, 'nextTick');
      }
    } else if (_resolve) {
      _resolve(ctx);
    }
  });
  if (!pending) {
    pending = true;
    timerFunc();
  }
  // $flow-disable-line
  if (!cb && typeof Promise !== 'undefined') {
    return new Promise(function (resolve) {
      _resolve = resolve;
    })
  }
}

/*  */

var mark;
var measure;

{
  var perf = inBrowser && window.performance;
  /* istanbul ignore if */
  if (
    perf &&
    perf.mark &&
    perf.measure &&
    perf.clearMarks &&
    perf.clearMeasures
  ) {
    mark = function (tag) { return perf.mark(tag); };
    measure = function (name, startTag, endTag) {
      perf.measure(name, startTag, endTag);
      perf.clearMarks(startTag);
      perf.clearMarks(endTag);
      // perf.clearMeasures(name)
    };
  }
}

/* not type checking this file because flow doesn't play well with Proxy */

var initProxy;

{
  var allowedGlobals = makeMap(
    'Infinity,undefined,NaN,isFinite,isNaN,' +
    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +
    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +
    'require' // for Webpack/Browserify
  );

  var warnNonPresent = function (target, key) {
    warn(
      "Property or method \"" + key + "\" is not defined on the instance but " +
      'referenced during render. Make sure that this property is reactive, ' +
      'either in the data option, or for class-based components, by ' +
      'initializing the property. ' +
      'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',
      target
    );
  };

  var warnReservedPrefix = function (target, key) {
    warn(
      "Property \"" + key + "\" must be accessed with \"$data." + key + "\" because " +
      'properties starting with "$" or "_" are not proxied in the Vue instance to ' +
      'prevent conflicts with Vue internals' +
      'See: https://vuejs.org/v2/api/#data',
      target
    );
  };

  var hasProxy =
    typeof Proxy !== 'undefined' && isNative(Proxy);

  if (hasProxy) {
    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');
    config.keyCodes = new Proxy(config.keyCodes, {
      set: function set (target, key, value) {
        if (isBuiltInModifier(key)) {
          warn(("Avoid overwriting built-in modifier in config.keyCodes: ." + key));
          return false
        } else {
          target[key] = value;
          return true
        }
      }
    });
  }

  var hasHandler = {
    has: function has (target, key) {
      var has = key in target;
      var isAllowed = allowedGlobals(key) ||
        (typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data));
      if (!has && !isAllowed) {
        if (key in target.$data) { warnReservedPrefix(target, key); }
        else { warnNonPresent(target, key); }
      }
      return has || !isAllowed
    }
  };

  var getHandler = {
    get: function get (target, key) {
      if (typeof key === 'string' && !(key in target)) {
        if (key in target.$data) { warnReservedPrefix(target, key); }
        else { warnNonPresent(target, key); }
      }
      return target[key]
    }
  };

  initProxy = function initProxy (vm) {
    if (hasProxy) {
      // determine which proxy handler to use
      var options = vm.$options;
      var handlers = options.render && options.render._withStripped
        ? getHandler
        : hasHandler;
      vm._renderProxy = new Proxy(vm, handlers);
    } else {
      vm._renderProxy = vm;
    }
  };
}

/*  */

var seenObjects = new _Set();

/**
 * Recursively traverse an object to evoke all converted
 * getters, so that every nested property inside the object
 * is collected as a "deep" dependency.
 */
function traverse (val) {
  _traverse(val, seenObjects);
  seenObjects.clear();
}

function _traverse (val, seen) {
  var i, keys;
  var isA = Array.isArray(val);
  if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {
    return
  }
  if (val.__ob__) {
    var depId = val.__ob__.dep.id;
    if (seen.has(depId)) {
      return
    }
    seen.add(depId);
  }
  if (isA) {
    i = val.length;
    while (i--) { _traverse(val[i], seen); }
  } else {
    keys = Object.keys(val);
    i = keys.length;
    while (i--) { _traverse(val[keys[i]], seen); }
  }
}

/*  */

var normalizeEvent = cached(function (name) {
  var passive = name.charAt(0) === '&';
  name = passive ? name.slice(1) : name;
  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first
  name = once$$1 ? name.slice(1) : name;
  var capture = name.charAt(0) === '!';
  name = capture ? name.slice(1) : name;
  return {
    name: name,
    once: once$$1,
    capture: capture,
    passive: passive
  }
});

function createFnInvoker (fns, vm) {
  function invoker () {
    var arguments$1 = arguments;

    var fns = invoker.fns;
    if (Array.isArray(fns)) {
      var cloned = fns.slice();
      for (var i = 0; i < cloned.length; i++) {
        invokeWithErrorHandling(cloned[i], null, arguments$1, vm, "v-on handler");
      }
    } else {
      // return handler return value for single handlers
      return invokeWithErrorHandling(fns, null, arguments, vm, "v-on handler")
    }
  }
  invoker.fns = fns;
  return invoker
}

function updateListeners (
  on,
  oldOn,
  add,
  remove$$1,
  createOnceHandler,
  vm
) {
  var name, def$$1, cur, old, event;
  for (name in on) {
    def$$1 = cur = on[name];
    old = oldOn[name];
    event = normalizeEvent(name);
    if (isUndef(cur)) {
      warn(
        "Invalid handler for event \"" + (event.name) + "\": got " + String(cur),
        vm
      );
    } else if (isUndef(old)) {
      if (isUndef(cur.fns)) {
        cur = on[name] = createFnInvoker(cur, vm);
      }
      if (isTrue(event.once)) {
        cur = on[name] = createOnceHandler(event.name, cur, event.capture);
      }
      add(event.name, cur, event.capture, event.passive, event.params);
    } else if (cur !== old) {
      old.fns = cur;
      on[name] = old;
    }
  }
  for (name in oldOn) {
    if (isUndef(on[name])) {
      event = normalizeEvent(name);
      remove$$1(event.name, oldOn[name], event.capture);
    }
  }
}

/*  */

function mergeVNodeHook (def, hookKey, hook) {
  if (def instanceof VNode) {
    def = def.data.hook || (def.data.hook = {});
  }
  var invoker;
  var oldHook = def[hookKey];

  function wrappedHook () {
    hook.apply(this, arguments);
    // important: remove merged hook to ensure it's called only once
    // and prevent memory leak
    remove(invoker.fns, wrappedHook);
  }

  if (isUndef(oldHook)) {
    // no existing hook
    invoker = createFnInvoker([wrappedHook]);
  } else {
    /* istanbul ignore if */
    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
      // already a merged invoker
      invoker = oldHook;
      invoker.fns.push(wrappedHook);
    } else {
      // existing plain hook
      invoker = createFnInvoker([oldHook, wrappedHook]);
    }
  }

  invoker.merged = true;
  def[hookKey] = invoker;
}

/*  */

function extractPropsFromVNodeData (
  data,
  Ctor,
  tag
) {
  // we are only extracting raw values here.
  // validation and default values are handled in the child
  // component itself.
  var propOptions = Ctor.options.props;
  if (isUndef(propOptions)) {
    return
  }
  var res = {};
  var attrs = data.attrs;
  var props = data.props;
  if (isDef(attrs) || isDef(props)) {
    for (var key in propOptions) {
      var altKey = hyphenate(key);
      {
        var keyInLowerCase = key.toLowerCase();
        if (
          key !== keyInLowerCase &&
          attrs && hasOwn(attrs, keyInLowerCase)
        ) {
          tip(
            "Prop \"" + keyInLowerCase + "\" is passed to component " +
            (formatComponentName(tag || Ctor)) + ", but the declared prop name is" +
            " \"" + key + "\". " +
            "Note that HTML attributes are case-insensitive and camelCased " +
            "props need to use their kebab-case equivalents when using in-DOM " +
            "templates. You should probably use \"" + altKey + "\" instead of \"" + key + "\"."
          );
        }
      }
      checkProp(res, props, key, altKey, true) ||
      checkProp(res, attrs, key, altKey, false);
    }
  }
  return res
}

function checkProp (
  res,
  hash,
  key,
  altKey,
  preserve
) {
  if (isDef(hash)) {
    if (hasOwn(hash, key)) {
      res[key] = hash[key];
      if (!preserve) {
        delete hash[key];
      }
      return true
    } else if (hasOwn(hash, altKey)) {
      res[key] = hash[altKey];
      if (!preserve) {
        delete hash[altKey];
      }
      return true
    }
  }
  return false
}

/*  */

// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:

// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.
function simpleNormalizeChildren (children) {
  for (var i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children)
    }
  }
  return children
}

// 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.
function normalizeChildren (children) {
  return isPrimitive(children)
    ? [createTextVNode(children)]
    : Array.isArray(children)
      ? normalizeArrayChildren(children)
      : undefined
}

function isTextNode (node) {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment)
}

function normalizeArrayChildren (children, nestedIndex) {
  var res = [];
  var i, c, lastIndex, last;
  for (i = 0; i < children.length; i++) {
    c = children[i];
    if (isUndef(c) || typeof c === 'boolean') { continue }
    lastIndex = res.length - 1;
    last = res[lastIndex];
    //  nested
    if (Array.isArray(c)) {
      if (c.length > 0) {
        c = normalizeArrayChildren(c, ((nestedIndex || '') + "_" + i));
        // merge adjacent text nodes
        if (isTextNode(c[0]) && isTextNode(last)) {
          res[lastIndex] = createTextVNode(last.text + (c[0]).text);
          c.shift();
        }
        res.push.apply(res, c);
      }
    } else if (isPrimitive(c)) {
      if (isTextNode(last)) {
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        res[lastIndex] = createTextVNode(last.text + c);
      } else if (c !== '') {
        // convert primitive to vnode
        res.push(createTextVNode(c));
      }
    } else {
      if (isTextNode(c) && isTextNode(last)) {
        // merge adjacent text nodes
        res[lastIndex] = createTextVNode(last.text + c.text);
      } else {
        // default key for nested array children (likely generated by v-for)
        if (isTrue(children._isVList) &&
          isDef(c.tag) &&
          isUndef(c.key) &&
          isDef(nestedIndex)) {
          c.key = "__vlist" + nestedIndex + "_" + i + "__";
        }
        res.push(c);
      }
    }
  }
  return res
}

/*  */

function initProvide (vm) {
  var provide = vm.$options.provide;
  if (provide) {
    vm._provided = typeof provide === 'function'
      ? provide.call(vm)
      : provide;
  }
}

function initInjections (vm) {
  var result = resolveInject(vm.$options.inject, vm);
  if (result) {
    toggleObserving(false);
    Object.keys(result).forEach(function (key) {
      /* istanbul ignore else */
      {
        defineReactive$$1(vm, key, result[key], function () {
          warn(
            "Avoid mutating an injected value directly since the changes will be " +
            "overwritten whenever the provided component re-renders. " +
            "injection being mutated: \"" + key + "\"",
            vm
          );
        });
      }
    });
    toggleObserving(true);
  }
}

function resolveInject (inject, vm) {
  if (inject) {
    // inject is :any because flow is not smart enough to figure out cached
    var result = Object.create(null);
    var keys = hasSymbol
      ? Reflect.ownKeys(inject)
      : Object.keys(inject);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      // #6574 in case the inject object is observed...
      if (key === '__ob__') { continue }
      var provideKey = inject[key].from;
      var source = vm;
      while (source) {
        if (source._provided && hasOwn(source._provided, provideKey)) {
          result[key] = source._provided[provideKey];
          break
        }
        source = source.$parent;
      }
      if (!source) {
        if ('default' in inject[key]) {
          var provideDefault = inject[key].default;
          result[key] = typeof provideDefault === 'function'
            ? provideDefault.call(vm)
            : provideDefault;
        } else {
          warn(("Injection \"" + key + "\" not found"), vm);
        }
      }
    }
    return result
  }
}

/*  */



/**
 * Runtime helper for resolving raw children VNodes into a slot object.
 */
function resolveSlots (
  children,
  context
) {
  if (!children || !children.length) {
    return {}
  }
  var slots = {};
  for (var i = 0, l = children.length; i < l; i++) {
    var child = children[i];
    var data = child.data;
    // remove slot attribute if the node is resolved as a Vue slot node
    if (data && data.attrs && data.attrs.slot) {
      delete data.attrs.slot;
    }
    // named slots should only be respected if the vnode was rendered in the
    // same context.
    if ((child.context === context || child.fnContext === context) &&
      data && data.slot != null
    ) {
      var name = data.slot;
      var slot = (slots[name] || (slots[name] = []));
      if (child.tag === 'template') {
        slot.push.apply(slot, child.children || []);
      } else {
        slot.push(child);
      }
    } else {
      (slots.default || (slots.default = [])).push(child);
    }
  }
  // ignore slots that contains only whitespace
  for (var name$1 in slots) {
    if (slots[name$1].every(isWhitespace)) {
      delete slots[name$1];
    }
  }
  return slots
}

function isWhitespace (node) {
  return (node.isComment && !node.asyncFactory) || node.text === ' '
}

/*  */

function normalizeScopedSlots (
  slots,
  normalSlots,
  prevSlots
) {
  var res;
  var hasNormalSlots = Object.keys(normalSlots).length > 0;
  var isStable = slots ? !!slots.$stable : !hasNormalSlots;
  var key = slots && slots.$key;
  if (!slots) {
    res = {};
  } else if (slots._normalized) {
    // fast path 1: child component re-render only, parent did not change
    return slots._normalized
  } else if (
    isStable &&
    prevSlots &&
    prevSlots !== emptyObject &&
    key === prevSlots.$key &&
    !hasNormalSlots &&
    !prevSlots.$hasNormal
  ) {
    // fast path 2: stable scoped slots w/ no normal slots to proxy,
    // only need to normalize once
    return prevSlots
  } else {
    res = {};
    for (var key$1 in slots) {
      if (slots[key$1] && key$1[0] !== '$') {
        res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);
      }
    }
  }
  // expose normal slots on scopedSlots
  for (var key$2 in normalSlots) {
    if (!(key$2 in res)) {
      res[key$2] = proxyNormalSlot(normalSlots, key$2);
    }
  }
  // avoriaz seems to mock a non-extensible $scopedSlots object
  // and when that is passed down this would cause an error
  if (slots && Object.isExtensible(slots)) {
    (slots)._normalized = res;
  }
  def(res, '$stable', isStable);
  def(res, '$key', key);
  def(res, '$hasNormal', hasNormalSlots);
  return res
}

function normalizeScopedSlot(normalSlots, key, fn) {
  var normalized = function () {
    var res = arguments.length ? fn.apply(null, arguments) : fn({});
    res = res && typeof res === 'object' && !Array.isArray(res)
      ? [res] // single vnode
      : normalizeChildren(res);
    return res && (
      res.length === 0 ||
      (res.length === 1 && res[0].isComment) // #9658
    ) ? undefined
      : res
  };
  // this is a slot using the new v-slot syntax without scope. although it is
  // compiled as a scoped slot, render fn users would expect it to be present
  // on this.$slots because the usage is semantically a normal slot.
  if (fn.proxy) {
    Object.defineProperty(normalSlots, key, {
      get: normalized,
      enumerable: true,
      configurable: true
    });
  }
  return normalized
}

function proxyNormalSlot(slots, key) {
  return function () { return slots[key]; }
}

/*  */

/**
 * Runtime helper for rendering v-for lists.
 */
function renderList (
  val,
  render
) {
  var ret, i, l, keys, key;
  if (Array.isArray(val) || typeof val === 'string') {
    ret = new Array(val.length);
    for (i = 0, l = val.length; i < l; i++) {
      ret[i] = render(val[i], i);
    }
  } else if (typeof val === 'number') {
    ret = new Array(val);
    for (i = 0; i < val; i++) {
      ret[i] = render(i + 1, i);
    }
  } else if (isObject(val)) {
    if (hasSymbol && val[Symbol.iterator]) {
      ret = [];
      var iterator = val[Symbol.iterator]();
      var result = iterator.next();
      while (!result.done) {
        ret.push(render(result.value, ret.length));
        result = iterator.next();
      }
    } else {
      keys = Object.keys(val);
      ret = new Array(keys.length);
      for (i = 0, l = keys.length; i < l; i++) {
        key = keys[i];
        ret[i] = render(val[key], key, i);
      }
    }
  }
  if (!isDef(ret)) {
    ret = [];
  }
  (ret)._isVList = true;
  return ret
}

/*  */

/**
 * Runtime helper for rendering <slot>
 */
function renderSlot (
  name,
  fallback,
  props,
  bindObject
) {
  var scopedSlotFn = this.$scopedSlots[name];
  var nodes;
  if (scopedSlotFn) { // scoped slot
    props = props || {};
    if (bindObject) {
      if (!isObject(bindObject)) {
        warn(
          'slot v-bind without argument expects an Object',
          this
        );
      }
      props = extend(extend({}, bindObject), props);
    }
    nodes = scopedSlotFn(props) || fallback;
  } else {
    nodes = this.$slots[name] || fallback;
  }

  var target = props && props.slot;
  if (target) {
    return this.$createElement('template', { slot: target }, nodes)
  } else {
    return nodes
  }
}

/*  */

/**
 * Runtime helper for resolving filters
 */
function resolveFilter (id) {
  return resolveAsset(this.$options, 'filters', id, true) || identity
}

/*  */

function isKeyNotMatch (expect, actual) {
  if (Array.isArray(expect)) {
    return expect.indexOf(actual) === -1
  } else {
    return expect !== actual
  }
}

/**
 * Runtime helper for checking keyCodes from config.
 * exposed as Vue.prototype._k
 * passing in eventKeyName as last argument separately for backwards compat
 */
function checkKeyCodes (
  eventKeyCode,
  key,
  builtInKeyCode,
  eventKeyName,
  builtInKeyName
) {
  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;
  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {
    return isKeyNotMatch(builtInKeyName, eventKeyName)
  } else if (mappedKeyCode) {
    return isKeyNotMatch(mappedKeyCode, eventKeyCode)
  } else if (eventKeyName) {
    return hyphenate(eventKeyName) !== key
  }
}

/*  */

/**
 * Runtime helper for merging v-bind="object" into a VNode's data.
 */
function bindObjectProps (
  data,
  tag,
  value,
  asProp,
  isSync
) {
  if (value) {
    if (!isObject(value)) {
      warn(
        'v-bind without argument expects an Object or Array value',
        this
      );
    } else {
      if (Array.isArray(value)) {
        value = toObject(value);
      }
      var hash;
      var loop = function ( key ) {
        if (
          key === 'class' ||
          key === 'style' ||
          isReservedAttribute(key)
        ) {
          hash = data;
        } else {
          var type = data.attrs && data.attrs.type;
          hash = asProp || config.mustUseProp(tag, type, key)
            ? data.domProps || (data.domProps = {})
            : data.attrs || (data.attrs = {});
        }
        var camelizedKey = camelize(key);
        var hyphenatedKey = hyphenate(key);
        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {
          hash[key] = value[key];

          if (isSync) {
            var on = data.on || (data.on = {});
            on[("update:" + key)] = function ($event) {
              value[key] = $event;
            };
          }
        }
      };

      for (var key in value) loop( key );
    }
  }
  return data
}

/*  */

/**
 * Runtime helper for rendering static trees.
 */
function renderStatic (
  index,
  isInFor
) {
  var cached = this._staticTrees || (this._staticTrees = []);
  var tree = cached[index];
  // if has already-rendered static tree and not inside v-for,
  // we can reuse the same tree.
  if (tree && !isInFor) {
    return tree
  }
  // otherwise, render a fresh tree.
  tree = cached[index] = this.$options.staticRenderFns[index].call(
    this._renderProxy,
    null,
    this // for render fns generated for functional component templates
  );
  markStatic(tree, ("__static__" + index), false);
  return tree
}

/**
 * Runtime helper for v-once.
 * Effectively it means marking the node as static with a unique key.
 */
function markOnce (
  tree,
  index,
  key
) {
  markStatic(tree, ("__once__" + index + (key ? ("_" + key) : "")), true);
  return tree
}

function markStatic (
  tree,
  key,
  isOnce
) {
  if (Array.isArray(tree)) {
    for (var i = 0; i < tree.length; i++) {
      if (tree[i] && typeof tree[i] !== 'string') {
        markStaticNode(tree[i], (key + "_" + i), isOnce);
      }
    }
  } else {
    markStaticNode(tree, key, isOnce);
  }
}

function markStaticNode (node, key, isOnce) {
  node.isStatic = true;
  node.key = key;
  node.isOnce = isOnce;
}

/*  */

function bindObjectListeners (data, value) {
  if (value) {
    if (!isPlainObject(value)) {
      warn(
        'v-on without argument expects an Object value',
        this
      );
    } else {
      var on = data.on = data.on ? extend({}, data.on) : {};
      for (var key in value) {
        var existing = on[key];
        var ours = value[key];
        on[key] = existing ? [].concat(existing, ours) : ours;
      }
    }
  }
  return data
}

/*  */

function resolveScopedSlots (
  fns, // see flow/vnode
  res,
  // the following are added in 2.6
  hasDynamicKeys,
  contentHashKey
) {
  res = res || { $stable: !hasDynamicKeys };
  for (var i = 0; i < fns.length; i++) {
    var slot = fns[i];
    if (Array.isArray(slot)) {
      resolveScopedSlots(slot, res, hasDynamicKeys);
    } else if (slot) {
      // marker for reverse proxying v-slot without scope on this.$slots
      if (slot.proxy) {
        slot.fn.proxy = true;
      }
      res[slot.key] = slot.fn;
    }
  }
  if (contentHashKey) {
    (res).$key = contentHashKey;
  }
  return res
}

/*  */

function bindDynamicKeys (baseObj, values) {
  for (var i = 0; i < values.length; i += 2) {
    var key = values[i];
    if (typeof key === 'string' && key) {
      baseObj[values[i]] = values[i + 1];
    } else if (key !== '' && key !== null) {
      // null is a speical value for explicitly removing a binding
      warn(
        ("Invalid value for dynamic directive argument (expected string or null): " + key),
        this
      );
    }
  }
  return baseObj
}

// helper to dynamically append modifier runtime markers to event names.
// ensure only append when value is already string, otherwise it will be cast
// to string and cause the type check to miss.
function prependModifier (value, symbol) {
  return typeof value === 'string' ? symbol + value : value
}

/*  */

function installRenderHelpers (target) {
  target._o = markOnce;
  target._n = toNumber;
  target._s = toString;
  target._l = renderList;
  target._t = renderSlot;
  target._q = looseEqual;
  target._i = looseIndexOf;
  target._m = renderStatic;
  target._f = resolveFilter;
  target._k = checkKeyCodes;
  target._b = bindObjectProps;
  target._v = createTextVNode;
  target._e = createEmptyVNode;
  target._u = resolveScopedSlots;
  target._g = bindObjectListeners;
  target._d = bindDynamicKeys;
  target._p = prependModifier;
}

/*  */

function FunctionalRenderContext (
  data,
  props,
  children,
  parent,
  Ctor
) {
  var this$1 = this;

  var options = Ctor.options;
  // ensure the createElement function in functional components
  // gets a unique context - this is necessary for correct named slot check
  var contextVm;
  if (hasOwn(parent, '_uid')) {
    contextVm = Object.create(parent);
    // $flow-disable-line
    contextVm._original = parent;
  } else {
    // the context vm passed in is a functional context as well.
    // in this case we want to make sure we are able to get a hold to the
    // real context instance.
    contextVm = parent;
    // $flow-disable-line
    parent = parent._original;
  }
  var isCompiled = isTrue(options._compiled);
  var needNormalization = !isCompiled;

  this.data = data;
  this.props = props;
  this.children = children;
  this.parent = parent;
  this.listeners = data.on || emptyObject;
  this.injections = resolveInject(options.inject, parent);
  this.slots = function () {
    if (!this$1.$slots) {
      normalizeScopedSlots(
        data.scopedSlots,
        this$1.$slots = resolveSlots(children, parent)
      );
    }
    return this$1.$slots
  };

  Object.defineProperty(this, 'scopedSlots', ({
    enumerable: true,
    get: function get () {
      return normalizeScopedSlots(data.scopedSlots, this.slots())
    }
  }));

  // support for compiled functional template
  if (isCompiled) {
    // exposing $options for renderStatic()
    this.$options = options;
    // pre-resolve slots for renderSlot()
    this.$slots = this.slots();
    this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);
  }

  if (options._scopeId) {
    this._c = function (a, b, c, d) {
      var vnode = createElement(contextVm, a, b, c, d, needNormalization);
      if (vnode && !Array.isArray(vnode)) {
        vnode.fnScopeId = options._scopeId;
        vnode.fnContext = parent;
      }
      return vnode
    };
  } else {
    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };
  }
}

installRenderHelpers(FunctionalRenderContext.prototype);

function createFunctionalComponent (
  Ctor,
  propsData,
  data,
  contextVm,
  children
) {
  var options = Ctor.options;
  var props = {};
  var propOptions = options.props;
  if (isDef(propOptions)) {
    for (var key in propOptions) {
      props[key] = validateProp(key, propOptions, propsData || emptyObject);
    }
  } else {
    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }
    if (isDef(data.props)) { mergeProps(props, data.props); }
  }

  var renderContext = new FunctionalRenderContext(
    data,
    props,
    children,
    contextVm,
    Ctor
  );

  var vnode = options.render.call(null, renderContext._c, renderContext);

  if (vnode instanceof VNode) {
    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext)
  } else if (Array.isArray(vnode)) {
    var vnodes = normalizeChildren(vnode) || [];
    var res = new Array(vnodes.length);
    for (var i = 0; i < vnodes.length; i++) {
      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);
    }
    return res
  }
}

function cloneAndMarkFunctionalResult (vnode, data, contextVm, options, renderContext) {
  // #7817 clone node before setting fnContext, otherwise if the node is reused
  // (e.g. it was from a cached normal slot) the fnContext causes named slots
  // that should not be matched to match.
  var clone = cloneVNode(vnode);
  clone.fnContext = contextVm;
  clone.fnOptions = options;
  {
    (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;
  }
  if (data.slot) {
    (clone.data || (clone.data = {})).slot = data.slot;
  }
  return clone
}

function mergeProps (to, from) {
  for (var key in from) {
    to[camelize(key)] = from[key];
  }
}

/*  */

/*  */

/*  */

/*  */

// inline hooks to be invoked on component VNodes during patch
var componentVNodeHooks = {
  init: function init (vnode, hydrating) {
    if (
      vnode.componentInstance &&
      !vnode.componentInstance._isDestroyed &&
      vnode.data.keepAlive
    ) {
      // kept-alive components, treat as a patch
      var mountedNode = vnode; // work around flow
      componentVNodeHooks.prepatch(mountedNode, mountedNode);
    } else {
      var child = vnode.componentInstance = createComponentInstanceForVnode(
        vnode,
        activeInstance
      );
      child.$mount(hydrating ? vnode.elm : undefined, hydrating);
    }
  },

  prepatch: function prepatch (oldVnode, vnode) {
    var options = vnode.componentOptions;
    var child = vnode.componentInstance = oldVnode.componentInstance;
    updateChildComponent(
      child,
      options.propsData, // updated props
      options.listeners, // updated listeners
      vnode, // new parent vnode
      options.children // new children
    );
  },

  insert: function insert (vnode) {
    var context = vnode.context;
    var componentInstance = vnode.componentInstance;
    if (!componentInstance._isMounted) {
      componentInstance._isMounted = true;
      callHook(componentInstance, 'mounted');
    }
    if (vnode.data.keepAlive) {
      if (context._isMounted) {
        // vue-router#1212
        // During updates, a kept-alive component's child components may
        // change, so directly walking the tree here may call activated hooks
        // on incorrect children. Instead we push them into a queue which will
        // be processed after the whole patch process ended.
        queueActivatedComponent(componentInstance);
      } else {
        activateChildComponent(componentInstance, true /* direct */);
      }
    }
  },

  destroy: function destroy (vnode) {
    var componentInstance = vnode.componentInstance;
    if (!componentInstance._isDestroyed) {
      if (!vnode.data.keepAlive) {
        componentInstance.$destroy();
      } else {
        deactivateChildComponent(componentInstance, true /* direct */);
      }
    }
  }
};

var hooksToMerge = Object.keys(componentVNodeHooks);

function createComponent (
  Ctor,
  data,
  context,
  children,
  tag
) {
  if (isUndef(Ctor)) {
    return
  }

  var baseCtor = context.$options._base;

  // plain options object: turn it into a constructor
  if (isObject(Ctor)) {
    Ctor = baseCtor.extend(Ctor);
  }

  // if at this stage it's not a constructor or an async component factory,
  // reject.
  if (typeof Ctor !== 'function') {
    {
      warn(("Invalid Component definition: " + (String(Ctor))), context);
    }
    return
  }

  // async component
  var asyncFactory;
  if (isUndef(Ctor.cid)) {
    asyncFactory = Ctor;
    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);
    if (Ctor === undefined) {
      // return a placeholder node for async component, which is rendered
      // as a comment node but preserves all the raw information for the node.
      // the information will be used for async server-rendering and hydration.
      return createAsyncPlaceholder(
        asyncFactory,
        data,
        context,
        children,
        tag
      )
    }
  }

  data = data || {};

  // resolve constructor options in case global mixins are applied after
  // component constructor creation
  resolveConstructorOptions(Ctor);

  // transform component v-model data into props & events
  if (isDef(data.model)) {
    transformModel(Ctor.options, data);
  }

  // extract props
  var propsData = extractPropsFromVNodeData(data, Ctor, tag);

  // functional component
  if (isTrue(Ctor.options.functional)) {
    return createFunctionalComponent(Ctor, propsData, data, context, children)
  }

  // extract listeners, since these needs to be treated as
  // child component listeners instead of DOM listeners
  var listeners = data.on;
  // replace with listeners with .native modifier
  // so it gets processed during parent component patch.
  data.on = data.nativeOn;

  if (isTrue(Ctor.options.abstract)) {
    // abstract components do not keep anything
    // other than props & listeners & slot

    // work around flow
    var slot = data.slot;
    data = {};
    if (slot) {
      data.slot = slot;
    }
  }

  // install component management hooks onto the placeholder node
  installComponentHooks(data);

  // return a placeholder vnode
  var name = Ctor.options.name || tag;
  var vnode = new VNode(
    ("vue-component-" + (Ctor.cid) + (name ? ("-" + name) : '')),
    data, undefined, undefined, undefined, context,
    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },
    asyncFactory
  );

  return vnode
}

function createComponentInstanceForVnode (
  vnode, // we know it's MountedComponentVNode but flow doesn't
  parent // activeInstance in lifecycle state
) {
  var options = {
    _isComponent: true,
    _parentVnode: vnode,
    parent: parent
  };
  // check inline-template render functions
  var inlineTemplate = vnode.data.inlineTemplate;
  if (isDef(inlineTemplate)) {
    options.render = inlineTemplate.render;
    options.staticRenderFns = inlineTemplate.staticRenderFns;
  }
  return new vnode.componentOptions.Ctor(options)
}

function installComponentHooks (data) {
  var hooks = data.hook || (data.hook = {});
  for (var i = 0; i < hooksToMerge.length; i++) {
    var key = hooksToMerge[i];
    var existing = hooks[key];
    var toMerge = componentVNodeHooks[key];
    if (existing !== toMerge && !(existing && existing._merged)) {
      hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;
    }
  }
}

function mergeHook$1 (f1, f2) {
  var merged = function (a, b) {
    // flow complains about extra args which is why we use any
    f1(a, b);
    f2(a, b);
  };
  merged._merged = true;
  return merged
}

// transform component v-model info (value and callback) into
// prop and event handler respectively.
function transformModel (options, data) {
  var prop = (options.model && options.model.prop) || 'value';
  var event = (options.model && options.model.event) || 'input'
  ;(data.attrs || (data.attrs = {}))[prop] = data.model.value;
  var on = data.on || (data.on = {});
  var existing = on[event];
  var callback = data.model.callback;
  if (isDef(existing)) {
    if (
      Array.isArray(existing)
        ? existing.indexOf(callback) === -1
        : existing !== callback
    ) {
      on[event] = [callback].concat(existing);
    }
  } else {
    on[event] = callback;
  }
}

/*  */

var SIMPLE_NORMALIZE = 1;
var ALWAYS_NORMALIZE = 2;

// wrapper function for providing a more flexible interface
// without getting yelled at by flow
function createElement (
  context,
  tag,
  data,
  children,
  normalizationType,
  alwaysNormalize
) {
  if (Array.isArray(data) || isPrimitive(data)) {
    normalizationType = children;
    children = data;
    data = undefined;
  }
  if (isTrue(alwaysNormalize)) {
    normalizationType = ALWAYS_NORMALIZE;
  }
  return _createElement(context, tag, data, children, normalizationType)
}

function _createElement (
  context,
  tag,
  data,
  children,
  normalizationType
) {
  if (isDef(data) && isDef((data).__ob__)) {
    warn(
      "Avoid using observed data object as vnode data: " + (JSON.stringify(data)) + "\n" +
      'Always create fresh vnode data objects in each render!',
      context
    );
    return createEmptyVNode()
  }
  // object syntax in v-bind
  if (isDef(data) && isDef(data.is)) {
    tag = data.is;
  }
  if (!tag) {
    // in case of component :is set to falsy value
    return createEmptyVNode()
  }
  // warn against non-primitive key
  if (isDef(data) && isDef(data.key) && !isPrimitive(data.key)
  ) {
    {
      warn(
        'Avoid using non-primitive value as key, ' +
        'use string/number value instead.',
        context
      );
    }
  }
  // support single function children as default scoped slot
  if (Array.isArray(children) &&
    typeof children[0] === 'function'
  ) {
    data = data || {};
    data.scopedSlots = { default: children[0] };
    children.length = 0;
  }
  if (normalizationType === ALWAYS_NORMALIZE) {
    children = normalizeChildren(children);
  } else if (normalizationType === SIMPLE_NORMALIZE) {
    children = simpleNormalizeChildren(children);
  }
  var vnode, ns;
  if (typeof tag === 'string') {
    var Ctor;
    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);
    if (config.isReservedTag(tag)) {
      // platform built-in elements
      vnode = new VNode(
        config.parsePlatformTagName(tag), data, children,
        undefined, undefined, context
      );
    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {
      // component
      vnode = createComponent(Ctor, data, context, children, tag);
    } else {
      // unknown or unlisted namespaced elements
      // check at runtime because it may get assigned a namespace when its
      // parent normalizes children
      vnode = new VNode(
        tag, data, children,
        undefined, undefined, context
      );
    }
  } else {
    // direct component options / constructor
    vnode = createComponent(tag, data, context, children);
  }
  if (Array.isArray(vnode)) {
    return vnode
  } else if (isDef(vnode)) {
    if (isDef(ns)) { applyNS(vnode, ns); }
    if (isDef(data)) { registerDeepBindings(data); }
    return vnode
  } else {
    return createEmptyVNode()
  }
}

function applyNS (vnode, ns, force) {
  vnode.ns = ns;
  if (vnode.tag === 'foreignObject') {
    // use default namespace inside foreignObject
    ns = undefined;
    force = true;
  }
  if (isDef(vnode.children)) {
    for (var i = 0, l = vnode.children.length; i < l; i++) {
      var child = vnode.children[i];
      if (isDef(child.tag) && (
        isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {
        applyNS(child, ns, force);
      }
    }
  }
}

// ref #5318
// necessary to ensure parent re-render when deep bindings like :style and
// :class are used on slot nodes
function registerDeepBindings (data) {
  if (isObject(data.style)) {
    traverse(data.style);
  }
  if (isObject(data.class)) {
    traverse(data.class);
  }
}

/*  */

function initRender (vm) {
  vm._vnode = null; // the root of the child tree
  vm._staticTrees = null; // v-once cached trees
  var options = vm.$options;
  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree
  var renderContext = parentVnode && parentVnode.context;
  vm.$slots = resolveSlots(options._renderChildren, renderContext);
  vm.$scopedSlots = emptyObject;
  // bind the createElement fn to this instance
  // so that we get proper render context inside it.
  // args order: tag, data, children, normalizationType, alwaysNormalize
  // internal version is used by render functions compiled from templates
  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };
  // normalization is always applied for the public version, used in
  // user-written render functions.
  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };

  // $attrs & $listeners are exposed for easier HOC creation.
  // they need to be reactive so that HOCs using them are always updated
  var parentData = parentVnode && parentVnode.data;

  /* istanbul ignore else */
  {
    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {
      !isUpdatingChildComponent && warn("$attrs is readonly.", vm);
    }, true);
    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {
      !isUpdatingChildComponent && warn("$listeners is readonly.", vm);
    }, true);
  }
}

var currentRenderingInstance = null;

function renderMixin (Vue) {
  // install runtime convenience helpers
  installRenderHelpers(Vue.prototype);

  Vue.prototype.$nextTick = function (fn) {
    return nextTick(fn, this)
  };

  Vue.prototype._render = function () {
    var vm = this;
    var ref = vm.$options;
    var render = ref.render;
    var _parentVnode = ref._parentVnode;

    if (_parentVnode) {
      vm.$scopedSlots = normalizeScopedSlots(
        _parentVnode.data.scopedSlots,
        vm.$slots,
        vm.$scopedSlots
      );
    }

    // set parent vnode. this allows render functions to have access
    // to the data on the placeholder node.
    vm.$vnode = _parentVnode;
    // render self
    var vnode;
    try {
      // There's no need to maintain a stack becaues all render fns are called
      // separately from one another. Nested component's render fns are called
      // when parent component is patched.
      currentRenderingInstance = vm;
      vnode = render.call(vm._renderProxy, vm.$createElement);
    } catch (e) {
      handleError(e, vm, "render");
      // return error render result,
      // or previous vnode to prevent render error causing blank component
      /* istanbul ignore else */
      if (vm.$options.renderError) {
        try {
          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);
        } catch (e) {
          handleError(e, vm, "renderError");
          vnode = vm._vnode;
        }
      } else {
        vnode = vm._vnode;
      }
    } finally {
      currentRenderingInstance = null;
    }
    // if the returned array contains only a single node, allow it
    if (Array.isArray(vnode) && vnode.length === 1) {
      vnode = vnode[0];
    }
    // return empty vnode in case the render function errored out
    if (!(vnode instanceof VNode)) {
      if (Array.isArray(vnode)) {
        warn(
          'Multiple root nodes returned from render function. Render function ' +
          'should return a single root node.',
          vm
        );
      }
      vnode = createEmptyVNode();
    }
    // set parent
    vnode.parent = _parentVnode;
    return vnode
  };
}

/*  */

function ensureCtor (comp, base) {
  if (
    comp.__esModule ||
    (hasSymbol && comp[Symbol.toStringTag] === 'Module')
  ) {
    comp = comp.default;
  }
  return isObject(comp)
    ? base.extend(comp)
    : comp
}

function createAsyncPlaceholder (
  factory,
  data,
  context,
  children,
  tag
) {
  var node = createEmptyVNode();
  node.asyncFactory = factory;
  node.asyncMeta = { data: data, context: context, children: children, tag: tag };
  return node
}

function resolveAsyncComponent (
  factory,
  baseCtor
) {
  if (isTrue(factory.error) && isDef(factory.errorComp)) {
    return factory.errorComp
  }

  if (isDef(factory.resolved)) {
    return factory.resolved
  }

  var owner = currentRenderingInstance;
  if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {
    // already pending
    factory.owners.push(owner);
  }

  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
    return factory.loadingComp
  }

  if (owner && !isDef(factory.owners)) {
    var owners = factory.owners = [owner];
    var sync = true;
    var timerLoading = null;
    var timerTimeout = null

    ;(owner).$on('hook:destroyed', function () { return remove(owners, owner); });

    var forceRender = function (renderCompleted) {
      for (var i = 0, l = owners.length; i < l; i++) {
        (owners[i]).$forceUpdate();
      }

      if (renderCompleted) {
        owners.length = 0;
        if (timerLoading !== null) {
          clearTimeout(timerLoading);
          timerLoading = null;
        }
        if (timerTimeout !== null) {
          clearTimeout(timerTimeout);
          timerTimeout = null;
        }
      }
    };

    var resolve = once(function (res) {
      // cache resolved
      factory.resolved = ensureCtor(res, baseCtor);
      // invoke callbacks only if this is not a synchronous resolve
      // (async resolves are shimmed as synchronous during SSR)
      if (!sync) {
        forceRender(true);
      } else {
        owners.length = 0;
      }
    });

    var reject = once(function (reason) {
      warn(
        "Failed to resolve async component: " + (String(factory)) +
        (reason ? ("\nReason: " + reason) : '')
      );
      if (isDef(factory.errorComp)) {
        factory.error = true;
        forceRender(true);
      }
    });

    var res = factory(resolve, reject);

    if (isObject(res)) {
      if (isPromise(res)) {
        // () => Promise
        if (isUndef(factory.resolved)) {
          res.then(resolve, reject);
        }
      } else if (isPromise(res.component)) {
        res.component.then(resolve, reject);

        if (isDef(res.error)) {
          factory.errorComp = ensureCtor(res.error, baseCtor);
        }

        if (isDef(res.loading)) {
          factory.loadingComp = ensureCtor(res.loading, baseCtor);
          if (res.delay === 0) {
            factory.loading = true;
          } else {
            timerLoading = setTimeout(function () {
              timerLoading = null;
              if (isUndef(factory.resolved) && isUndef(factory.error)) {
                factory.loading = true;
                forceRender(false);
              }
            }, res.delay || 200);
          }
        }

        if (isDef(res.timeout)) {
          timerTimeout = setTimeout(function () {
            timerTimeout = null;
            if (isUndef(factory.resolved)) {
              reject(
                "timeout (" + (res.timeout) + "ms)"
              );
            }
          }, res.timeout);
        }
      }
    }

    sync = false;
    // return in case resolved synchronously
    return factory.loading
      ? factory.loadingComp
      : factory.resolved
  }
}

/*  */

function isAsyncPlaceholder (node) {
  return node.isComment && node.asyncFactory
}

/*  */

function getFirstComponentChild (children) {
  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      var c = children[i];
      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {
        return c
      }
    }
  }
}

/*  */

/*  */

function initEvents (vm) {
  vm._events = Object.create(null);
  vm._hasHookEvent = false;
  // init parent attached events
  var listeners = vm.$options._parentListeners;
  if (listeners) {
    updateComponentListeners(vm, listeners);
  }
}

var target;

function add (event, fn) {
  target.$on(event, fn);
}

function remove$1 (event, fn) {
  target.$off(event, fn);
}

function createOnceHandler (event, fn) {
  var _target = target;
  return function onceHandler () {
    var res = fn.apply(null, arguments);
    if (res !== null) {
      _target.$off(event, onceHandler);
    }
  }
}

function updateComponentListeners (
  vm,
  listeners,
  oldListeners
) {
  target = vm;
  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);
  target = undefined;
}

function eventsMixin (Vue) {
  var hookRE = /^hook:/;
  Vue.prototype.$on = function (event, fn) {
    var vm = this;
    if (Array.isArray(event)) {
      for (var i = 0, l = event.length; i < l; i++) {
        vm.$on(event[i], fn);
      }
    } else {
      (vm._events[event] || (vm._events[event] = [])).push(fn);
      // optimize hook:event cost by using a boolean flag marked at registration
      // instead of a hash lookup
      if (hookRE.test(event)) {
        vm._hasHookEvent = true;
      }
    }
    return vm
  };

  Vue.prototype.$once = function (event, fn) {
    var vm = this;
    function on () {
      vm.$off(event, on);
      fn.apply(vm, arguments);
    }
    on.fn = fn;
    vm.$on(event, on);
    return vm
  };

  Vue.prototype.$off = function (event, fn) {
    var vm = this;
    // all
    if (!arguments.length) {
      vm._events = Object.create(null);
      return vm
    }
    // array of events
    if (Array.isArray(event)) {
      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {
        vm.$off(event[i$1], fn);
      }
      return vm
    }
    // specific event
    var cbs = vm._events[event];
    if (!cbs) {
      return vm
    }
    if (!fn) {
      vm._events[event] = null;
      return vm
    }
    // specific handler
    var cb;
    var i = cbs.length;
    while (i--) {
      cb = cbs[i];
      if (cb === fn || cb.fn === fn) {
        cbs.splice(i, 1);
        break
      }
    }
    return vm
  };

  Vue.prototype.$emit = function (event) {
    var vm = this;
    {
      var lowerCaseEvent = event.toLowerCase();
      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
        tip(
          "Event \"" + lowerCaseEvent + "\" is emitted in component " +
          (formatComponentName(vm)) + " but the handler is registered for \"" + event + "\". " +
          "Note that HTML attributes are case-insensitive and you cannot use " +
          "v-on to listen to camelCase events when using in-DOM templates. " +
          "You should probably use \"" + (hyphenate(event)) + "\" instead of \"" + event + "\"."
        );
      }
    }
    var cbs = vm._events[event];
    if (cbs) {
      cbs = cbs.length > 1 ? toArray(cbs) : cbs;
      var args = toArray(arguments, 1);
      var info = "event handler for \"" + event + "\"";
      for (var i = 0, l = cbs.length; i < l; i++) {
        invokeWithErrorHandling(cbs[i], vm, args, vm, info);
      }
    }
    return vm
  };
}

/*  */

var activeInstance = null;
var isUpdatingChildComponent = false;

function setActiveInstance(vm) {
  var prevActiveInstance = activeInstance;
  activeInstance = vm;
  return function () {
    activeInstance = prevActiveInstance;
  }
}

function initLifecycle (vm) {
  var options = vm.$options;

  // locate first non-abstract parent
  var parent = options.parent;
  if (parent && !options.abstract) {
    while (parent.$options.abstract && parent.$parent) {
      parent = parent.$parent;
    }
    parent.$children.push(vm);
  }

  vm.$parent = parent;
  vm.$root = parent ? parent.$root : vm;

  vm.$children = [];
  vm.$refs = {};

  vm._watcher = null;
  vm._inactive = null;
  vm._directInactive = false;
  vm._isMounted = false;
  vm._isDestroyed = false;
  vm._isBeingDestroyed = false;
}

function lifecycleMixin (Vue) {
  Vue.prototype._update = function (vnode, hydrating) {
    var vm = this;
    var prevEl = vm.$el;
    var prevVnode = vm._vnode;
    var restoreActiveInstance = setActiveInstance(vm);
    vm._vnode = vnode;
    // Vue.prototype.__patch__ is injected in entry points
    // based on the rendering backend used.
    if (!prevVnode) {
      // initial render
      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */);
    } else {
      // updates
      vm.$el = vm.__patch__(prevVnode, vnode);
    }
    restoreActiveInstance();
    // update __vue__ reference
    if (prevEl) {
      prevEl.__vue__ = null;
    }
    if (vm.$el) {
      vm.$el.__vue__ = vm;
    }
    // if parent is an HOC, update its $el as well
    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
      vm.$parent.$el = vm.$el;
    }
    // updated hook is called by the scheduler to ensure that children are
    // updated in a parent's updated hook.
  };

  Vue.prototype.$forceUpdate = function () {
    var vm = this;
    if (vm._watcher) {
      vm._watcher.update();
    }
  };

  Vue.prototype.$destroy = function () {
    var vm = this;
    if (vm._isBeingDestroyed) {
      return
    }
    callHook(vm, 'beforeDestroy');
    vm._isBeingDestroyed = true;
    // remove self from parent
    var parent = vm.$parent;
    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
      remove(parent.$children, vm);
    }
    // teardown watchers
    if (vm._watcher) {
      vm._watcher.teardown();
    }
    var i = vm._watchers.length;
    while (i--) {
      vm._watchers[i].teardown();
    }
    // remove reference from data ob
    // frozen object may not have observer.
    if (vm._data.__ob__) {
      vm._data.__ob__.vmCount--;
    }
    // call the last hook...
    vm._isDestroyed = true;
    // invoke destroy hooks on current rendered tree
    vm.__patch__(vm._vnode, null);
    // fire destroyed hook
    callHook(vm, 'destroyed');
    // turn off all instance listeners.
    vm.$off();
    // remove __vue__ reference
    if (vm.$el) {
      vm.$el.__vue__ = null;
    }
    // release circular reference (#6759)
    if (vm.$vnode) {
      vm.$vnode.parent = null;
    }
  };
}

function mountComponent (
  vm,
  el,
  hydrating
) {
  vm.$el = el;
  if (!vm.$options.render) {
    vm.$options.render = createEmptyVNode;
    {
      /* istanbul ignore if */
      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||
        vm.$options.el || el) {
        warn(
          'You are using the runtime-only build of Vue where the template ' +
          'compiler is not available. Either pre-compile the templates into ' +
          'render functions, or use the compiler-included build.',
          vm
        );
      } else {
        warn(
          'Failed to mount component: template or render function not defined.',
          vm
        );
      }
    }
  }
  callHook(vm, 'beforeMount');

  var updateComponent;
  /* istanbul ignore if */
  if (config.performance && mark) {
    updateComponent = function () {
      var name = vm._name;
      var id = vm._uid;
      var startTag = "vue-perf-start:" + id;
      var endTag = "vue-perf-end:" + id;

      mark(startTag);
      var vnode = vm._render();
      mark(endTag);
      measure(("vue " + name + " render"), startTag, endTag);

      mark(startTag);
      vm._update(vnode, hydrating);
      mark(endTag);
      measure(("vue " + name + " patch"), startTag, endTag);
    };
  } else {
    updateComponent = function () {
      vm._update(vm._render(), hydrating);
    };
  }

  // we set this to vm._watcher inside the watcher's constructor
  // since the watcher's initial patch may call $forceUpdate (e.g. inside child
  // component's mounted hook), which relies on vm._watcher being already defined
  new Watcher(vm, updateComponent, noop, {
    before: function before () {
      if (vm._isMounted && !vm._isDestroyed) {
        callHook(vm, 'beforeUpdate');
      }
    }
  }, true /* isRenderWatcher */);
  hydrating = false;

  // manually mounted instance, call mounted on self
  // mounted is called for render-created child components in its inserted hook
  if (vm.$vnode == null) {
    vm._isMounted = true;
    callHook(vm, 'mounted');
  }
  return vm
}

function updateChildComponent (
  vm,
  propsData,
  listeners,
  parentVnode,
  renderChildren
) {
  {
    isUpdatingChildComponent = true;
  }

  // determine whether component has slot children
  // we need to do this before overwriting $options._renderChildren.

  // check if there are dynamic scopedSlots (hand-written or compiled but with
  // dynamic slot names). Static scoped slots compiled from template has the
  // "$stable" marker.
  var newScopedSlots = parentVnode.data.scopedSlots;
  var oldScopedSlots = vm.$scopedSlots;
  var hasDynamicScopedSlot = !!(
    (newScopedSlots && !newScopedSlots.$stable) ||
    (oldScopedSlots !== emptyObject && !oldScopedSlots.$stable) ||
    (newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key)
  );

  // Any static slot children from the parent may have changed during parent's
  // update. Dynamic scoped slots may also have changed. In such cases, a forced
  // update is necessary to ensure correctness.
  var needsForceUpdate = !!(
    renderChildren ||               // has new static slots
    vm.$options._renderChildren ||  // has old static slots
    hasDynamicScopedSlot
  );

  vm.$options._parentVnode = parentVnode;
  vm.$vnode = parentVnode; // update vm's placeholder node without re-render

  if (vm._vnode) { // update child tree's parent
    vm._vnode.parent = parentVnode;
  }
  vm.$options._renderChildren = renderChildren;

  // update $attrs and $listeners hash
  // these are also reactive so they may trigger child update if the child
  // used them during render
  vm.$attrs = parentVnode.data.attrs || emptyObject;
  vm.$listeners = listeners || emptyObject;

  // update props
  if (propsData && vm.$options.props) {
    toggleObserving(false);
    var props = vm._props;
    var propKeys = vm.$options._propKeys || [];
    for (var i = 0; i < propKeys.length; i++) {
      var key = propKeys[i];
      var propOptions = vm.$options.props; // wtf flow?
      props[key] = validateProp(key, propOptions, propsData, vm);
    }
    toggleObserving(true);
    // keep a copy of raw propsData
    vm.$options.propsData = propsData;
  }

  // update listeners
  listeners = listeners || emptyObject;
  var oldListeners = vm.$options._parentListeners;
  vm.$options._parentListeners = listeners;
  updateComponentListeners(vm, listeners, oldListeners);

  // resolve slots + force update if has children
  if (needsForceUpdate) {
    vm.$slots = resolveSlots(renderChildren, parentVnode.context);
    vm.$forceUpdate();
  }

  {
    isUpdatingChildComponent = false;
  }
}

function isInInactiveTree (vm) {
  while (vm && (vm = vm.$parent)) {
    if (vm._inactive) { return true }
  }
  return false
}

function activateChildComponent (vm, direct) {
  if (direct) {
    vm._directInactive = false;
    if (isInInactiveTree(vm)) {
      return
    }
  } else if (vm._directInactive) {
    return
  }
  if (vm._inactive || vm._inactive === null) {
    vm._inactive = false;
    for (var i = 0; i < vm.$children.length; i++) {
      activateChildComponent(vm.$children[i]);
    }
    callHook(vm, 'activated');
  }
}

function deactivateChildComponent (vm, direct) {
  if (direct) {
    vm._directInactive = true;
    if (isInInactiveTree(vm)) {
      return
    }
  }
  if (!vm._inactive) {
    vm._inactive = true;
    for (var i = 0; i < vm.$children.length; i++) {
      deactivateChildComponent(vm.$children[i]);
    }
    callHook(vm, 'deactivated');
  }
}

function callHook (vm, hook) {
  // #7573 disable dep collection when invoking lifecycle hooks
  pushTarget();
  var handlers = vm.$options[hook];
  var info = hook + " hook";
  if (handlers) {
    for (var i = 0, j = handlers.length; i < j; i++) {
      invokeWithErrorHandling(handlers[i], vm, null, vm, info);
    }
  }
  if (vm._hasHookEvent) {
    vm.$emit('hook:' + hook);
  }
  popTarget();
}

/*  */

var MAX_UPDATE_COUNT = 100;

var queue = [];
var activatedChildren = [];
var has = {};
var circular = {};
var waiting = false;
var flushing = false;
var index = 0;

/**
 * Reset the scheduler's state.
 */
function resetSchedulerState () {
  index = queue.length = activatedChildren.length = 0;
  has = {};
  {
    circular = {};
  }
  waiting = flushing = false;
}

// Async edge case #6566 requires saving the timestamp when event listeners are
// attached. However, calling performance.now() has a perf overhead especially
// if the page has thousands of event listeners. Instead, we take a timestamp
// every time the scheduler flushes and use that for all event listeners
// attached during that flush.
var currentFlushTimestamp = 0;

// Async edge case fix requires storing an event listener's attach timestamp.
var getNow = Date.now;

// Determine what event timestamp the browser is using. Annoyingly, the
// timestamp can either be hi-res (relative to page load) or low-res
// (relative to UNIX epoch), so in order to compare time we have to use the
// same timestamp type when saving the flush timestamp.
// All IE versions use low-res event timestamps, and have problematic clock
// implementations (#9632)
if (inBrowser && !isIE) {
  var performance = window.performance;
  if (
    performance &&
    typeof performance.now === 'function' &&
    getNow() > document.createEvent('Event').timeStamp
  ) {
    // if the event timestamp, although evaluated AFTER the Date.now(), is
    // smaller than it, it means the event is using a hi-res timestamp,
    // and we need to use the hi-res version for event listener timestamps as
    // well.
    getNow = function () { return performance.now(); };
  }
}

/**
 * Flush both queues and run the watchers.
 */
function flushSchedulerQueue () {
  currentFlushTimestamp = getNow();
  flushing = true;
  var watcher, id;

  // Sort queue before flush.
  // This ensures that:
  // 1. Components are updated from parent to child. (because parent is always
  //    created before the child)
  // 2. A component's user watchers are run before its render watcher (because
  //    user watchers are created before the render watcher)
  // 3. If a component is destroyed during a parent component's watcher run,
  //    its watchers can be skipped.
  queue.sort(function (a, b) { return a.id - b.id; });

  // do not cache length because more watchers might be pushed
  // as we run existing watchers
  for (index = 0; index < queue.length; index++) {
    watcher = queue[index];
    if (watcher.before) {
      watcher.before();
    }
    id = watcher.id;
    has[id] = null;
    watcher.run();
    // in dev build, check and stop circular updates.
    if (has[id] != null) {
      circular[id] = (circular[id] || 0) + 1;
      if (circular[id] > MAX_UPDATE_COUNT) {
        warn(
          'You may have an infinite update loop ' + (
            watcher.user
              ? ("in watcher with expression \"" + (watcher.expression) + "\"")
              : "in a component render function."
          ),
          watcher.vm
        );
        break
      }
    }
  }

  // keep copies of post queues before resetting state
  var activatedQueue = activatedChildren.slice();
  var updatedQueue = queue.slice();

  resetSchedulerState();

  // call component updated and activated hooks
  callActivatedHooks(activatedQueue);
  callUpdatedHooks(updatedQueue);

  // devtool hook
  /* istanbul ignore if */
  if (devtools && config.devtools) {
    devtools.emit('flush');
  }
}

function callUpdatedHooks (queue) {
  var i = queue.length;
  while (i--) {
    var watcher = queue[i];
    var vm = watcher.vm;
    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {
      callHook(vm, 'updated');
    }
  }
}

/**
 * Queue a kept-alive component that was activated during patch.
 * The queue will be processed after the entire tree has been patched.
 */
function queueActivatedComponent (vm) {
  // setting _inactive to false here so that a render function can
  // rely on checking whether it's in an inactive tree (e.g. router-view)
  vm._inactive = false;
  activatedChildren.push(vm);
}

function callActivatedHooks (queue) {
  for (var i = 0; i < queue.length; i++) {
    queue[i]._inactive = true;
    activateChildComponent(queue[i], true /* true */);
  }
}

/**
 * Push a watcher into the watcher queue.
 * Jobs with duplicate IDs will be skipped unless it's
 * pushed when the queue is being flushed.
 */
function queueWatcher (watcher) {
  var id = watcher.id;
  if (has[id] == null) {
    has[id] = true;
    if (!flushing) {
      queue.push(watcher);
    } else {
      // if already flushing, splice the watcher based on its id
      // if already past its id, it will be run next immediately.
      var i = queue.length - 1;
      while (i > index && queue[i].id > watcher.id) {
        i--;
      }
      queue.splice(i + 1, 0, watcher);
    }
    // queue the flush
    if (!waiting) {
      waiting = true;

      if (!config.async) {
        flushSchedulerQueue();
        return
      }
      nextTick(flushSchedulerQueue);
    }
  }
}

/*  */



var uid$2 = 0;

/**
 * A watcher parses an expression, collects dependencies,
 * and fires callback when the expression value changes.
 * This is used for both the $watch() api and directives.
 */
var Watcher = function Watcher (
  vm,
  expOrFn,
  cb,
  options,
  isRenderWatcher
) {
  this.vm = vm;
  if (isRenderWatcher) {
    vm._watcher = this;
  }
  vm._watchers.push(this);
  // options
  if (options) {
    this.deep = !!options.deep;
    this.user = !!options.user;
    this.lazy = !!options.lazy;
    this.sync = !!options.sync;
    this.before = options.before;
  } else {
    this.deep = this.user = this.lazy = this.sync = false;
  }
  this.cb = cb;
  this.id = ++uid$2; // uid for batching
  this.active = true;
  this.dirty = this.lazy; // for lazy watchers
  this.deps = [];
  this.newDeps = [];
  this.depIds = new _Set();
  this.newDepIds = new _Set();
  this.expression = expOrFn.toString();
  // parse expression for getter
  if (typeof expOrFn === 'function') {
    this.getter = expOrFn;
  } else {
    this.getter = parsePath(expOrFn);
    if (!this.getter) {
      this.getter = noop;
      warn(
        "Failed watching path: \"" + expOrFn + "\" " +
        'Watcher only accepts simple dot-delimited paths. ' +
        'For full control, use a function instead.',
        vm
      );
    }
  }
  this.value = this.lazy
    ? undefined
    : this.get();
};

/**
 * Evaluate the getter, and re-collect dependencies.
 */
Watcher.prototype.get = function get () {
  pushTarget(this);
  var value;
  var vm = this.vm;
  try {
    value = this.getter.call(vm, vm);
  } catch (e) {
    if (this.user) {
      handleError(e, vm, ("getter for watcher \"" + (this.expression) + "\""));
    } else {
      throw e
    }
  } finally {
    // "touch" every property so they are all tracked as
    // dependencies for deep watching
    if (this.deep) {
      traverse(value);
    }
    popTarget();
    this.cleanupDeps();
  }
  return value
};

/**
 * Add a dependency to this directive.
 */
Watcher.prototype.addDep = function addDep (dep) {
  var id = dep.id;
  if (!this.newDepIds.has(id)) {
    this.newDepIds.add(id);
    this.newDeps.push(dep);
    if (!this.depIds.has(id)) {
      dep.addSub(this);
    }
  }
};

/**
 * Clean up for dependency collection.
 */
Watcher.prototype.cleanupDeps = function cleanupDeps () {
  var i = this.deps.length;
  while (i--) {
    var dep = this.deps[i];
    if (!this.newDepIds.has(dep.id)) {
      dep.removeSub(this);
    }
  }
  var tmp = this.depIds;
  this.depIds = this.newDepIds;
  this.newDepIds = tmp;
  this.newDepIds.clear();
  tmp = this.deps;
  this.deps = this.newDeps;
  this.newDeps = tmp;
  this.newDeps.length = 0;
};

/**
 * Subscriber interface.
 * Will be called when a dependency changes.
 */
Watcher.prototype.update = function update () {
  /* istanbul ignore else */
  if (this.lazy) {
    this.dirty = true;
  } else if (this.sync) {
    this.run();
  } else {
    queueWatcher(this);
  }
};

/**
 * Scheduler job interface.
 * Will be called by the scheduler.
 */
Watcher.prototype.run = function run () {
  if (this.active) {
    var value = this.get();
    if (
      value !== this.value ||
      // Deep watchers and watchers on Object/Arrays should fire even
      // when the value is the same, because the value may
      // have mutated.
      isObject(value) ||
      this.deep
    ) {
      // set new value
      var oldValue = this.value;
      this.value = value;
      if (this.user) {
        try {
          this.cb.call(this.vm, value, oldValue);
        } catch (e) {
          handleError(e, this.vm, ("callback for watcher \"" + (this.expression) + "\""));
        }
      } else {
        this.cb.call(this.vm, value, oldValue);
      }
    }
  }
};

/**
 * Evaluate the value of the watcher.
 * This only gets called for lazy watchers.
 */
Watcher.prototype.evaluate = function evaluate () {
  this.value = this.get();
  this.dirty = false;
};

/**
 * Depend on all deps collected by this watcher.
 */
Watcher.prototype.depend = function depend () {
  var i = this.deps.length;
  while (i--) {
    this.deps[i].depend();
  }
};

/**
 * Remove self from all dependencies' subscriber list.
 */
Watcher.prototype.teardown = function teardown () {
  if (this.active) {
    // remove self from vm's watcher list
    // this is a somewhat expensive operation so we skip it
    // if the vm is being destroyed.
    if (!this.vm._isBeingDestroyed) {
      remove(this.vm._watchers, this);
    }
    var i = this.deps.length;
    while (i--) {
      this.deps[i].removeSub(this);
    }
    this.active = false;
  }
};

/*  */

var sharedPropertyDefinition = {
  enumerable: true,
  configurable: true,
  get: noop,
  set: noop
};

function proxy (target, sourceKey, key) {
  sharedPropertyDefinition.get = function proxyGetter () {
    return this[sourceKey][key]
  };
  sharedPropertyDefinition.set = function proxySetter (val) {
    this[sourceKey][key] = val;
  };
  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function initState (vm) {
  vm._watchers = [];
  var opts = vm.$options;
  if (opts.props) { initProps(vm, opts.props); }
  if (opts.methods) { initMethods(vm, opts.methods); }
  if (opts.data) {
    initData(vm);
  } else {
    observe(vm._data = {}, true /* asRootData */);
  }
  if (opts.computed) { initComputed(vm, opts.computed); }
  if (opts.watch && opts.watch !== nativeWatch) {
    initWatch(vm, opts.watch);
  }
}

function initProps (vm, propsOptions) {
  var propsData = vm.$options.propsData || {};
  var props = vm._props = {};
  // cache prop keys so that future props updates can iterate using Array
  // instead of dynamic object key enumeration.
  var keys = vm.$options._propKeys = [];
  var isRoot = !vm.$parent;
  // root instance props should be converted
  if (!isRoot) {
    toggleObserving(false);
  }
  var loop = function ( key ) {
    keys.push(key);
    var value = validateProp(key, propsOptions, propsData, vm);
    /* istanbul ignore else */
    {
      var hyphenatedKey = hyphenate(key);
      if (isReservedAttribute(hyphenatedKey) ||
          config.isReservedAttr(hyphenatedKey)) {
        warn(
          ("\"" + hyphenatedKey + "\" is a reserved attribute and cannot be used as component prop."),
          vm
        );
      }
      defineReactive$$1(props, key, value, function () {
        if (!isRoot && !isUpdatingChildComponent) {
          warn(
            "Avoid mutating a prop directly since the value will be " +
            "overwritten whenever the parent component re-renders. " +
            "Instead, use a data or computed property based on the prop's " +
            "value. Prop being mutated: \"" + key + "\"",
            vm
          );
        }
      });
    }
    // static props are already proxied on the component's prototype
    // during Vue.extend(). We only need to proxy props defined at
    // instantiation here.
    if (!(key in vm)) {
      proxy(vm, "_props", key);
    }
  };

  for (var key in propsOptions) loop( key );
  toggleObserving(true);
}

function initData (vm) {
  var data = vm.$options.data;
  data = vm._data = typeof data === 'function'
    ? getData(data, vm)
    : data || {};
  if (!isPlainObject(data)) {
    data = {};
    warn(
      'data functions should return an object:\n' +
      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',
      vm
    );
  }
  // proxy data on instance
  var keys = Object.keys(data);
  var props = vm.$options.props;
  var methods = vm.$options.methods;
  var i = keys.length;
  while (i--) {
    var key = keys[i];
    {
      if (methods && hasOwn(methods, key)) {
        warn(
          ("Method \"" + key + "\" has already been defined as a data property."),
          vm
        );
      }
    }
    if (props && hasOwn(props, key)) {
      warn(
        "The data property \"" + key + "\" is already declared as a prop. " +
        "Use prop default value instead.",
        vm
      );
    } else if (!isReserved(key)) {
      proxy(vm, "_data", key);
    }
  }
  // observe data
  observe(data, true /* asRootData */);
}

function getData (data, vm) {
  // #7573 disable dep collection when invoking data getters
  pushTarget();
  try {
    return data.call(vm, vm)
  } catch (e) {
    handleError(e, vm, "data()");
    return {}
  } finally {
    popTarget();
  }
}

var computedWatcherOptions = { lazy: true };

function initComputed (vm, computed) {
  // $flow-disable-line
  var watchers = vm._computedWatchers = Object.create(null);
  // computed properties are just getters during SSR
  var isSSR = isServerRendering();

  for (var key in computed) {
    var userDef = computed[key];
    var getter = typeof userDef === 'function' ? userDef : userDef.get;
    if (getter == null) {
      warn(
        ("Getter is missing for computed property \"" + key + "\"."),
        vm
      );
    }

    if (!isSSR) {
      // create internal watcher for the computed property.
      watchers[key] = new Watcher(
        vm,
        getter || noop,
        noop,
        computedWatcherOptions
      );
    }

    // component-defined computed properties are already defined on the
    // component prototype. We only need to define computed properties defined
    // at instantiation here.
    if (!(key in vm)) {
      defineComputed(vm, key, userDef);
    } else {
      if (key in vm.$data) {
        warn(("The computed property \"" + key + "\" is already defined in data."), vm);
      } else if (vm.$options.props && key in vm.$options.props) {
        warn(("The computed property \"" + key + "\" is already defined as a prop."), vm);
      }
    }
  }
}

function defineComputed (
  target,
  key,
  userDef
) {
  var shouldCache = !isServerRendering();
  if (typeof userDef === 'function') {
    sharedPropertyDefinition.get = shouldCache
      ? createComputedGetter(key)
      : createGetterInvoker(userDef);
    sharedPropertyDefinition.set = noop;
  } else {
    sharedPropertyDefinition.get = userDef.get
      ? shouldCache && userDef.cache !== false
        ? createComputedGetter(key)
        : createGetterInvoker(userDef.get)
      : noop;
    sharedPropertyDefinition.set = userDef.set || noop;
  }
  if (sharedPropertyDefinition.set === noop) {
    sharedPropertyDefinition.set = function () {
      warn(
        ("Computed property \"" + key + "\" was assigned to but it has no setter."),
        this
      );
    };
  }
  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function createComputedGetter (key) {
  return function computedGetter () {
    var watcher = this._computedWatchers && this._computedWatchers[key];
    if (watcher) {
      if (watcher.dirty) {
        watcher.evaluate();
      }
      if (Dep.target) {
        watcher.depend();
      }
      return watcher.value
    }
  }
}

function createGetterInvoker(fn) {
  return function computedGetter () {
    return fn.call(this, this)
  }
}

function initMethods (vm, methods) {
  var props = vm.$options.props;
  for (var key in methods) {
    {
      if (typeof methods[key] !== 'function') {
        warn(
          "Method \"" + key + "\" has type \"" + (typeof methods[key]) + "\" in the component definition. " +
          "Did you reference the function correctly?",
          vm
        );
      }
      if (props && hasOwn(props, key)) {
        warn(
          ("Method \"" + key + "\" has already been defined as a prop."),
          vm
        );
      }
      if ((key in vm) && isReserved(key)) {
        warn(
          "Method \"" + key + "\" conflicts with an existing Vue instance method. " +
          "Avoid defining component methods that start with _ or $."
        );
      }
    }
    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);
  }
}

function initWatch (vm, watch) {
  for (var key in watch) {
    var handler = watch[key];
    if (Array.isArray(handler)) {
      for (var i = 0; i < handler.length; i++) {
        createWatcher(vm, key, handler[i]);
      }
    } else {
      createWatcher(vm, key, handler);
    }
  }
}

function createWatcher (
  vm,
  expOrFn,
  handler,
  options
) {
  if (isPlainObject(handler)) {
    options = handler;
    handler = handler.handler;
  }
  if (typeof handler === 'string') {
    handler = vm[handler];
  }
  return vm.$watch(expOrFn, handler, options)
}

function stateMixin (Vue) {
  // flow somehow has problems with directly declared definition object
  // when using Object.defineProperty, so we have to procedurally build up
  // the object here.
  var dataDef = {};
  dataDef.get = function () { return this._data };
  var propsDef = {};
  propsDef.get = function () { return this._props };
  {
    dataDef.set = function () {
      warn(
        'Avoid replacing instance root $data. ' +
        'Use nested data properties instead.',
        this
      );
    };
    propsDef.set = function () {
      warn("$props is readonly.", this);
    };
  }
  Object.defineProperty(Vue.prototype, '$data', dataDef);
  Object.defineProperty(Vue.prototype, '$props', propsDef);

  Vue.prototype.$set = set;
  Vue.prototype.$delete = del;

  Vue.prototype.$watch = function (
    expOrFn,
    cb,
    options
  ) {
    var vm = this;
    if (isPlainObject(cb)) {
      return createWatcher(vm, expOrFn, cb, options)
    }
    options = options || {};
    options.user = true;
    var watcher = new Watcher(vm, expOrFn, cb, options);
    if (options.immediate) {
      try {
        cb.call(vm, watcher.value);
      } catch (error) {
        handleError(error, vm, ("callback for immediate watcher \"" + (watcher.expression) + "\""));
      }
    }
    return function unwatchFn () {
      watcher.teardown();
    }
  };
}

/*  */

var uid$3 = 0;

function initMixin (Vue) {
  Vue.prototype._init = function (options) {
    var vm = this;
    // a uid
    vm._uid = uid$3++;

    var startTag, endTag;
    /* istanbul ignore if */
    if (config.performance && mark) {
      startTag = "vue-perf-start:" + (vm._uid);
      endTag = "vue-perf-end:" + (vm._uid);
      mark(startTag);
    }

    // a flag to avoid this being observed
    vm._isVue = true;
    // merge options
    if (options && options._isComponent) {
      // optimize internal component instantiation
      // since dynamic options merging is pretty slow, and none of the
      // internal component options needs special treatment.
      initInternalComponent(vm, options);
    } else {
      vm.$options = mergeOptions(
        resolveConstructorOptions(vm.constructor),
        options || {},
        vm
      );
    }
    /* istanbul ignore else */
    {
      initProxy(vm);
    }
    // expose real self
    vm._self = vm;
    initLifecycle(vm);
    initEvents(vm);
    initRender(vm);
    callHook(vm, 'beforeCreate');
    initInjections(vm); // resolve injections before data/props
    initState(vm);
    initProvide(vm); // resolve provide after data/props
    callHook(vm, 'created');

    /* istanbul ignore if */
    if (config.performance && mark) {
      vm._name = formatComponentName(vm, false);
      mark(endTag);
      measure(("vue " + (vm._name) + " init"), startTag, endTag);
    }

    if (vm.$options.el) {
      vm.$mount(vm.$options.el);
    }
  };
}

function initInternalComponent (vm, options) {
  var opts = vm.$options = Object.create(vm.constructor.options);
  // doing this because it's faster than dynamic enumeration.
  var parentVnode = options._parentVnode;
  opts.parent = options.parent;
  opts._parentVnode = parentVnode;

  var vnodeComponentOptions = parentVnode.componentOptions;
  opts.propsData = vnodeComponentOptions.propsData;
  opts._parentListeners = vnodeComponentOptions.listeners;
  opts._renderChildren = vnodeComponentOptions.children;
  opts._componentTag = vnodeComponentOptions.tag;

  if (options.render) {
    opts.render = options.render;
    opts.staticRenderFns = options.staticRenderFns;
  }
}

function resolveConstructorOptions (Ctor) {
  var options = Ctor.options;
  if (Ctor.super) {
    var superOptions = resolveConstructorOptions(Ctor.super);
    var cachedSuperOptions = Ctor.superOptions;
    if (superOptions !== cachedSuperOptions) {
      // super option changed,
      // need to resolve new options.
      Ctor.superOptions = superOptions;
      // check if there are any late-modified/attached options (#4976)
      var modifiedOptions = resolveModifiedOptions(Ctor);
      // update base extend options
      if (modifiedOptions) {
        extend(Ctor.extendOptions, modifiedOptions);
      }
      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);
      if (options.name) {
        options.components[options.name] = Ctor;
      }
    }
  }
  return options
}

function resolveModifiedOptions (Ctor) {
  var modified;
  var latest = Ctor.options;
  var sealed = Ctor.sealedOptions;
  for (var key in latest) {
    if (latest[key] !== sealed[key]) {
      if (!modified) { modified = {}; }
      modified[key] = latest[key];
    }
  }
  return modified
}

function Vue (options) {
  if (!(this instanceof Vue)
  ) {
    warn('Vue is a constructor and should be called with the `new` keyword');
  }
  this._init(options);
}

initMixin(Vue);
stateMixin(Vue);
eventsMixin(Vue);
lifecycleMixin(Vue);
renderMixin(Vue);

/*  */

function initUse (Vue) {
  Vue.use = function (plugin) {
    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));
    if (installedPlugins.indexOf(plugin) > -1) {
      return this
    }

    // additional parameters
    var args = toArray(arguments, 1);
    args.unshift(this);
    if (typeof plugin.install === 'function') {
      plugin.install.apply(plugin, args);
    } else if (typeof plugin === 'function') {
      plugin.apply(null, args);
    }
    installedPlugins.push(plugin);
    return this
  };
}

/*  */

function initMixin$1 (Vue) {
  Vue.mixin = function (mixin) {
    this.options = mergeOptions(this.options, mixin);
    return this
  };
}

/*  */

function initExtend (Vue) {
  /**
   * Each instance constructor, including Vue, has a unique
   * cid. This enables us to create wrapped "child
   * constructors" for prototypal inheritance and cache them.
   */
  Vue.cid = 0;
  var cid = 1;

  /**
   * Class inheritance
   */
  Vue.extend = function (extendOptions) {
    extendOptions = extendOptions || {};
    var Super = this;
    var SuperId = Super.cid;
    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});
    if (cachedCtors[SuperId]) {
      return cachedCtors[SuperId]
    }

    var name = extendOptions.name || Super.options.name;
    if (name) {
      validateComponentName(name);
    }

    var Sub = function VueComponent (options) {
      this._init(options);
    };
    Sub.prototype = Object.create(Super.prototype);
    Sub.prototype.constructor = Sub;
    Sub.cid = cid++;
    Sub.options = mergeOptions(
      Super.options,
      extendOptions
    );
    Sub['super'] = Super;

    // For props and computed properties, we define the proxy getters on
    // the Vue instances at extension time, on the extended prototype. This
    // avoids Object.defineProperty calls for each instance created.
    if (Sub.options.props) {
      initProps$1(Sub);
    }
    if (Sub.options.computed) {
      initComputed$1(Sub);
    }

    // allow further extension/mixin/plugin usage
    Sub.extend = Super.extend;
    Sub.mixin = Super.mixin;
    Sub.use = Super.use;

    // create asset registers, so extended classes
    // can have their private assets too.
    ASSET_TYPES.forEach(function (type) {
      Sub[type] = Super[type];
    });
    // enable recursive self-lookup
    if (name) {
      Sub.options.components[name] = Sub;
    }

    // keep a reference to the super options at extension time.
    // later at instantiation we can check if Super's options have
    // been updated.
    Sub.superOptions = Super.options;
    Sub.extendOptions = extendOptions;
    Sub.sealedOptions = extend({}, Sub.options);

    // cache constructor
    cachedCtors[SuperId] = Sub;
    return Sub
  };
}

function initProps$1 (Comp) {
  var props = Comp.options.props;
  for (var key in props) {
    proxy(Comp.prototype, "_props", key);
  }
}

function initComputed$1 (Comp) {
  var computed = Comp.options.computed;
  for (var key in computed) {
    defineComputed(Comp.prototype, key, computed[key]);
  }
}

/*  */

function initAssetRegisters (Vue) {
  /**
   * Create asset registration methods.
   */
  ASSET_TYPES.forEach(function (type) {
    Vue[type] = function (
      id,
      definition
    ) {
      if (!definition) {
        return this.options[type + 's'][id]
      } else {
        /* istanbul ignore if */
        if (type === 'component') {
          validateComponentName(id);
        }
        if (type === 'component' && isPlainObject(definition)) {
          definition.name = definition.name || id;
          definition = this.options._base.extend(definition);
        }
        if (type === 'directive' && typeof definition === 'function') {
          definition = { bind: definition, update: definition };
        }
        this.options[type + 's'][id] = definition;
        return definition
      }
    };
  });
}

/*  */



function getComponentName (opts) {
  return opts && (opts.Ctor.options.name || opts.tag)
}

function matches (pattern, name) {
  if (Array.isArray(pattern)) {
    return pattern.indexOf(name) > -1
  } else if (typeof pattern === 'string') {
    return pattern.split(',').indexOf(name) > -1
  } else if (isRegExp(pattern)) {
    return pattern.test(name)
  }
  /* istanbul ignore next */
  return false
}

function pruneCache (keepAliveInstance, filter) {
  var cache = keepAliveInstance.cache;
  var keys = keepAliveInstance.keys;
  var _vnode = keepAliveInstance._vnode;
  for (var key in cache) {
    var cachedNode = cache[key];
    if (cachedNode) {
      var name = getComponentName(cachedNode.componentOptions);
      if (name && !filter(name)) {
        pruneCacheEntry(cache, key, keys, _vnode);
      }
    }
  }
}

function pruneCacheEntry (
  cache,
  key,
  keys,
  current
) {
  var cached$$1 = cache[key];
  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {
    cached$$1.componentInstance.$destroy();
  }
  cache[key] = null;
  remove(keys, key);
}

var patternTypes = [String, RegExp, Array];

var KeepAlive = {
  name: 'keep-alive',
  abstract: true,

  props: {
    include: patternTypes,
    exclude: patternTypes,
    max: [String, Number]
  },

  created: function created () {
    this.cache = Object.create(null);
    this.keys = [];
  },

  destroyed: function destroyed () {
    for (var key in this.cache) {
      pruneCacheEntry(this.cache, key, this.keys);
    }
  },

  mounted: function mounted () {
    var this$1 = this;

    this.$watch('include', function (val) {
      pruneCache(this$1, function (name) { return matches(val, name); });
    });
    this.$watch('exclude', function (val) {
      pruneCache(this$1, function (name) { return !matches(val, name); });
    });
  },

  render: function render () {
    var slot = this.$slots.default;
    var vnode = getFirstComponentChild(slot);
    var componentOptions = vnode && vnode.componentOptions;
    if (componentOptions) {
      // check pattern
      var name = getComponentName(componentOptions);
      var ref = this;
      var include = ref.include;
      var exclude = ref.exclude;
      if (
        // not included
        (include && (!name || !matches(include, name))) ||
        // excluded
        (exclude && name && matches(exclude, name))
      ) {
        return vnode
      }

      var ref$1 = this;
      var cache = ref$1.cache;
      var keys = ref$1.keys;
      var key = vnode.key == null
        // same constructor may get registered as different local components
        // so cid alone is not enough (#3269)
        ? componentOptions.Ctor.cid + (componentOptions.tag ? ("::" + (componentOptions.tag)) : '')
        : vnode.key;
      if (cache[key]) {
        vnode.componentInstance = cache[key].componentInstance;
        // make current key freshest
        remove(keys, key);
        keys.push(key);
      } else {
        cache[key] = vnode;
        keys.push(key);
        // prune oldest entry
        if (this.max && keys.length > parseInt(this.max)) {
          pruneCacheEntry(cache, keys[0], keys, this._vnode);
        }
      }

      vnode.data.keepAlive = true;
    }
    return vnode || (slot && slot[0])
  }
};

var builtInComponents = {
  KeepAlive: KeepAlive
};

/*  */

function initGlobalAPI (Vue) {
  // config
  var configDef = {};
  configDef.get = function () { return config; };
  {
    configDef.set = function () {
      warn(
        'Do not replace the Vue.config object, set individual fields instead.'
      );
    };
  }
  Object.defineProperty(Vue, 'config', configDef);

  // exposed util methods.
  // NOTE: these are not considered part of the public API - avoid relying on
  // them unless you are aware of the risk.
  Vue.util = {
    warn: warn,
    extend: extend,
    mergeOptions: mergeOptions,
    defineReactive: defineReactive$$1
  };

  Vue.set = set;
  Vue.delete = del;
  Vue.nextTick = nextTick;

  // 2.6 explicit observable API
  Vue.observable = function (obj) {
    observe(obj);
    return obj
  };

  Vue.options = Object.create(null);
  ASSET_TYPES.forEach(function (type) {
    Vue.options[type + 's'] = Object.create(null);
  });

  // this is used to identify the "base" constructor to extend all plain-object
  // components with in Weex's multi-instance scenarios.
  Vue.options._base = Vue;

  extend(Vue.options.components, builtInComponents);

  initUse(Vue);
  initMixin$1(Vue);
  initExtend(Vue);
  initAssetRegisters(Vue);
}

initGlobalAPI(Vue);

Object.defineProperty(Vue.prototype, '$isServer', {
  get: isServerRendering
});

Object.defineProperty(Vue.prototype, '$ssrContext', {
  get: function get () {
    /* istanbul ignore next */
    return this.$vnode && this.$vnode.ssrContext
  }
});

// expose FunctionalRenderContext for ssr runtime helper installation
Object.defineProperty(Vue, 'FunctionalRenderContext', {
  value: FunctionalRenderContext
});

Vue.version = '2.6.10';

/*  */

// these are reserved for web because they are directly compiled away
// during template compilation
var isReservedAttr = makeMap('style,class');

// attributes that should be using props for binding
var acceptValue = makeMap('input,textarea,option,select,progress');
var mustUseProp = function (tag, type, attr) {
  return (
    (attr === 'value' && acceptValue(tag)) && type !== 'button' ||
    (attr === 'selected' && tag === 'option') ||
    (attr === 'checked' && tag === 'input') ||
    (attr === 'muted' && tag === 'video')
  )
};

var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');

var isValidContentEditableValue = makeMap('events,caret,typing,plaintext-only');

var convertEnumeratedValue = function (key, value) {
  return isFalsyAttrValue(value) || value === 'false'
    ? 'false'
    // allow arbitrary string value for contenteditable
    : key === 'contenteditable' && isValidContentEditableValue(value)
      ? value
      : 'true'
};

var isBooleanAttr = makeMap(
  'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +
  'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +
  'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +
  'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +
  'required,reversed,scoped,seamless,selected,sortable,translate,' +
  'truespeed,typemustmatch,visible'
);

var xlinkNS = 'http://www.w3.org/1999/xlink';

var isXlink = function (name) {
  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'
};

var getXlinkProp = function (name) {
  return isXlink(name) ? name.slice(6, name.length) : ''
};

var isFalsyAttrValue = function (val) {
  return val == null || val === false
};

/*  */

function genClassForVnode (vnode) {
  var data = vnode.data;
  var parentNode = vnode;
  var childNode = vnode;
  while (isDef(childNode.componentInstance)) {
    childNode = childNode.componentInstance._vnode;
    if (childNode && childNode.data) {
      data = mergeClassData(childNode.data, data);
    }
  }
  while (isDef(parentNode = parentNode.parent)) {
    if (parentNode && parentNode.data) {
      data = mergeClassData(data, parentNode.data);
    }
  }
  return renderClass(data.staticClass, data.class)
}

function mergeClassData (child, parent) {
  return {
    staticClass: concat(child.staticClass, parent.staticClass),
    class: isDef(child.class)
      ? [child.class, parent.class]
      : parent.class
  }
}

function renderClass (
  staticClass,
  dynamicClass
) {
  if (isDef(staticClass) || isDef(dynamicClass)) {
    return concat(staticClass, stringifyClass(dynamicClass))
  }
  /* istanbul ignore next */
  return ''
}

function concat (a, b) {
  return a ? b ? (a + ' ' + b) : a : (b || '')
}

function stringifyClass (value) {
  if (Array.isArray(value)) {
    return stringifyArray(value)
  }
  if (isObject(value)) {
    return stringifyObject(value)
  }
  if (typeof value === 'string') {
    return value
  }
  /* istanbul ignore next */
  return ''
}

function stringifyArray (value) {
  var res = '';
  var stringified;
  for (var i = 0, l = value.length; i < l; i++) {
    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {
      if (res) { res += ' '; }
      res += stringified;
    }
  }
  return res
}

function stringifyObject (value) {
  var res = '';
  for (var key in value) {
    if (value[key]) {
      if (res) { res += ' '; }
      res += key;
    }
  }
  return res
}

/*  */

var namespaceMap = {
  svg: 'http://www.w3.org/2000/svg',
  math: 'http://www.w3.org/1998/Math/MathML'
};

var isHTMLTag = makeMap(
  'html,body,base,head,link,meta,style,title,' +
  'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +
  'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' +
  'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +
  's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +
  'embed,object,param,source,canvas,script,noscript,del,ins,' +
  'caption,col,colgroup,table,thead,tbody,td,th,tr,' +
  'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +
  'output,progress,select,textarea,' +
  'details,dialog,menu,menuitem,summary,' +
  'content,element,shadow,template,blockquote,iframe,tfoot'
);

// this map is intentionally selective, only covering SVG elements that may
// contain child elements.
var isSVG = makeMap(
  'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +
  'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +
  'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',
  true
);

var isPreTag = function (tag) { return tag === 'pre'; };

var isReservedTag = function (tag) {
  return isHTMLTag(tag) || isSVG(tag)
};

function getTagNamespace (tag) {
  if (isSVG(tag)) {
    return 'svg'
  }
  // basic support for MathML
  // note it doesn't support other MathML elements being component roots
  if (tag === 'math') {
    return 'math'
  }
}

var unknownElementCache = Object.create(null);
function isUnknownElement (tag) {
  /* istanbul ignore if */
  if (!inBrowser) {
    return true
  }
  if (isReservedTag(tag)) {
    return false
  }
  tag = tag.toLowerCase();
  /* istanbul ignore if */
  if (unknownElementCache[tag] != null) {
    return unknownElementCache[tag]
  }
  var el = document.createElement(tag);
  if (tag.indexOf('-') > -1) {
    // http://stackoverflow.com/a/28210364/1070244
    return (unknownElementCache[tag] = (
      el.constructor === window.HTMLUnknownElement ||
      el.constructor === window.HTMLElement
    ))
  } else {
    return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))
  }
}

var isTextInputType = makeMap('text,number,password,search,email,tel,url');

/*  */

/**
 * Query an element selector if it's not an element already.
 */
function query (el) {
  if (typeof el === 'string') {
    var selected = document.querySelector(el);
    if (!selected) {
      warn(
        'Cannot find element: ' + el
      );
      return document.createElement('div')
    }
    return selected
  } else {
    return el
  }
}

/*  */

function createElement$1 (tagName, vnode) {
  var elm = document.createElement(tagName);
  if (tagName !== 'select') {
    return elm
  }
  // false or null will remove the attribute but undefined will not
  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {
    elm.setAttribute('multiple', 'multiple');
  }
  return elm
}

function createElementNS (namespace, tagName) {
  return document.createElementNS(namespaceMap[namespace], tagName)
}

function createTextNode (text) {
  return document.createTextNode(text)
}

function createComment (text) {
  return document.createComment(text)
}

function insertBefore (parentNode, newNode, referenceNode) {
  parentNode.insertBefore(newNode, referenceNode);
}

function removeChild (node, child) {
  node.removeChild(child);
}

function appendChild (node, child) {
  node.appendChild(child);
}

function parentNode (node) {
  return node.parentNode
}

function nextSibling (node) {
  return node.nextSibling
}

function tagName (node) {
  return node.tagName
}

function setTextContent (node, text) {
  node.textContent = text;
}

function setStyleScope (node, scopeId) {
  node.setAttribute(scopeId, '');
}

var nodeOps = /*#__PURE__*/Object.freeze({
  createElement: createElement$1,
  createElementNS: createElementNS,
  createTextNode: createTextNode,
  createComment: createComment,
  insertBefore: insertBefore,
  removeChild: removeChild,
  appendChild: appendChild,
  parentNode: parentNode,
  nextSibling: nextSibling,
  tagName: tagName,
  setTextContent: setTextContent,
  setStyleScope: setStyleScope
});

/*  */

var ref = {
  create: function create (_, vnode) {
    registerRef(vnode);
  },
  update: function update (oldVnode, vnode) {
    if (oldVnode.data.ref !== vnode.data.ref) {
      registerRef(oldVnode, true);
      registerRef(vnode);
    }
  },
  destroy: function destroy (vnode) {
    registerRef(vnode, true);
  }
};

function registerRef (vnode, isRemoval) {
  var key = vnode.data.ref;
  if (!isDef(key)) { return }

  var vm = vnode.context;
  var ref = vnode.componentInstance || vnode.elm;
  var refs = vm.$refs;
  if (isRemoval) {
    if (Array.isArray(refs[key])) {
      remove(refs[key], ref);
    } else if (refs[key] === ref) {
      refs[key] = undefined;
    }
  } else {
    if (vnode.data.refInFor) {
      if (!Array.isArray(refs[key])) {
        refs[key] = [ref];
      } else if (refs[key].indexOf(ref) < 0) {
        // $flow-disable-line
        refs[key].push(ref);
      }
    } else {
      refs[key] = ref;
    }
  }
}

/**
 * Virtual DOM patching algorithm based on Snabbdom by
 * Simon Friis Vindum (@paldepind)
 * Licensed under the MIT License
 * https://github.com/paldepind/snabbdom/blob/master/LICENSE
 *
 * modified by Evan You (@yyx990803)
 *
 * Not type-checking this because this file is perf-critical and the cost
 * of making flow understand it is not worth it.
 */

var emptyNode = new VNode('', {}, []);

var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];

function sameVnode (a, b) {
  return (
    a.key === b.key && (
      (
        a.tag === b.tag &&
        a.isComment === b.isComment &&
        isDef(a.data) === isDef(b.data) &&
        sameInputType(a, b)
      ) || (
        isTrue(a.isAsyncPlaceholder) &&
        a.asyncFactory === b.asyncFactory &&
        isUndef(b.asyncFactory.error)
      )
    )
  )
}

function sameInputType (a, b) {
  if (a.tag !== 'input') { return true }
  var i;
  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB)
}

function createKeyToOldIdx (children, beginIdx, endIdx) {
  var i, key;
  var map = {};
  for (i = beginIdx; i <= endIdx; ++i) {
    key = children[i].key;
    if (isDef(key)) { map[key] = i; }
  }
  return map
}

function createPatchFunction (backend) {
  var i, j;
  var cbs = {};

  var modules = backend.modules;
  var nodeOps = backend.nodeOps;

  for (i = 0; i < hooks.length; ++i) {
    cbs[hooks[i]] = [];
    for (j = 0; j < modules.length; ++j) {
      if (isDef(modules[j][hooks[i]])) {
        cbs[hooks[i]].push(modules[j][hooks[i]]);
      }
    }
  }

  function emptyNodeAt (elm) {
    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)
  }

  function createRmCb (childElm, listeners) {
    function remove$$1 () {
      if (--remove$$1.listeners === 0) {
        removeNode(childElm);
      }
    }
    remove$$1.listeners = listeners;
    return remove$$1
  }

  function removeNode (el) {
    var parent = nodeOps.parentNode(el);
    // element may have already been removed due to v-html / v-text
    if (isDef(parent)) {
      nodeOps.removeChild(parent, el);
    }
  }

  function isUnknownElement$$1 (vnode, inVPre) {
    return (
      !inVPre &&
      !vnode.ns &&
      !(
        config.ignoredElements.length &&
        config.ignoredElements.some(function (ignore) {
          return isRegExp(ignore)
            ? ignore.test(vnode.tag)
            : ignore === vnode.tag
        })
      ) &&
      config.isUnknownElement(vnode.tag)
    )
  }

  var creatingElmInVPre = 0;

  function createElm (
    vnode,
    insertedVnodeQueue,
    parentElm,
    refElm,
    nested,
    ownerArray,
    index
  ) {
    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // This vnode was used in a previous render!
      // now it's used as a new node, overwriting its elm would cause
      // potential patch errors down the road when it's used as an insertion
      // reference node. Instead, we clone the node on-demand before creating
      // associated DOM element for it.
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    vnode.isRootInsert = !nested; // for transition enter check
    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {
      return
    }

    var data = vnode.data;
    var children = vnode.children;
    var tag = vnode.tag;
    if (isDef(tag)) {
      {
        if (data && data.pre) {
          creatingElmInVPre++;
        }
        if (isUnknownElement$$1(vnode, creatingElmInVPre)) {
          warn(
            'Unknown custom element: <' + tag + '> - did you ' +
            'register the component correctly? For recursive components, ' +
            'make sure to provide the "name" option.',
            vnode.context
          );
        }
      }

      vnode.elm = vnode.ns
        ? nodeOps.createElementNS(vnode.ns, tag)
        : nodeOps.createElement(tag, vnode);
      setScope(vnode);

      /* istanbul ignore if */
      {
        createChildren(vnode, children, insertedVnodeQueue);
        if (isDef(data)) {
          invokeCreateHooks(vnode, insertedVnodeQueue);
        }
        insert(parentElm, vnode.elm, refElm);
      }

      if (data && data.pre) {
        creatingElmInVPre--;
      }
    } else if (isTrue(vnode.isComment)) {
      vnode.elm = nodeOps.createComment(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    } else {
      vnode.elm = nodeOps.createTextNode(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    }
  }

  function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
    var i = vnode.data;
    if (isDef(i)) {
      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;
      if (isDef(i = i.hook) && isDef(i = i.init)) {
        i(vnode, false /* hydrating */);
      }
      // after calling the init hook, if the vnode is a child component
      // it should've created a child instance and mounted it. the child
      // component also has set the placeholder vnode's elm.
      // in that case we can just return the element and be done.
      if (isDef(vnode.componentInstance)) {
        initComponent(vnode, insertedVnodeQueue);
        insert(parentElm, vnode.elm, refElm);
        if (isTrue(isReactivated)) {
          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
        }
        return true
      }
    }
  }

  function initComponent (vnode, insertedVnodeQueue) {
    if (isDef(vnode.data.pendingInsert)) {
      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
      vnode.data.pendingInsert = null;
    }
    vnode.elm = vnode.componentInstance.$el;
    if (isPatchable(vnode)) {
      invokeCreateHooks(vnode, insertedVnodeQueue);
      setScope(vnode);
    } else {
      // empty component root.
      // skip all element-related modules except for ref (#3455)
      registerRef(vnode);
      // make sure to invoke the insert hook
      insertedVnodeQueue.push(vnode);
    }
  }

  function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
    var i;
    // hack for #4339: a reactivated component with inner transition
    // does not trigger because the inner node's created hooks are not called
    // again. It's not ideal to involve module-specific logic in here but
    // there doesn't seem to be a better way to do it.
    var innerNode = vnode;
    while (innerNode.componentInstance) {
      innerNode = innerNode.componentInstance._vnode;
      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {
        for (i = 0; i < cbs.activate.length; ++i) {
          cbs.activate[i](emptyNode, innerNode);
        }
        insertedVnodeQueue.push(innerNode);
        break
      }
    }
    // unlike a newly created component,
    // a reactivated keep-alive component doesn't insert itself
    insert(parentElm, vnode.elm, refElm);
  }

  function insert (parent, elm, ref$$1) {
    if (isDef(parent)) {
      if (isDef(ref$$1)) {
        if (nodeOps.parentNode(ref$$1) === parent) {
          nodeOps.insertBefore(parent, elm, ref$$1);
        }
      } else {
        nodeOps.appendChild(parent, elm);
      }
    }
  }

  function createChildren (vnode, children, insertedVnodeQueue) {
    if (Array.isArray(children)) {
      {
        checkDuplicateKeys(children);
      }
      for (var i = 0; i < children.length; ++i) {
        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);
      }
    } else if (isPrimitive(vnode.text)) {
      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));
    }
  }

  function isPatchable (vnode) {
    while (vnode.componentInstance) {
      vnode = vnode.componentInstance._vnode;
    }
    return isDef(vnode.tag)
  }

  function invokeCreateHooks (vnode, insertedVnodeQueue) {
    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
      cbs.create[i$1](emptyNode, vnode);
    }
    i = vnode.data.hook; // Reuse variable
    if (isDef(i)) {
      if (isDef(i.create)) { i.create(emptyNode, vnode); }
      if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }
    }
  }

  // set scope id attribute for scoped CSS.
  // this is implemented as a special case to avoid the overhead
  // of going through the normal attribute patching process.
  function setScope (vnode) {
    var i;
    if (isDef(i = vnode.fnScopeId)) {
      nodeOps.setStyleScope(vnode.elm, i);
    } else {
      var ancestor = vnode;
      while (ancestor) {
        if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {
          nodeOps.setStyleScope(vnode.elm, i);
        }
        ancestor = ancestor.parent;
      }
    }
    // for slot content they should also get the scopeId from the host instance.
    if (isDef(i = activeInstance) &&
      i !== vnode.context &&
      i !== vnode.fnContext &&
      isDef(i = i.$options._scopeId)
    ) {
      nodeOps.setStyleScope(vnode.elm, i);
    }
  }

  function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
    for (; startIdx <= endIdx; ++startIdx) {
      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);
    }
  }

  function invokeDestroyHook (vnode) {
    var i, j;
    var data = vnode.data;
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }
      for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }
    }
    if (isDef(i = vnode.children)) {
      for (j = 0; j < vnode.children.length; ++j) {
        invokeDestroyHook(vnode.children[j]);
      }
    }
  }

  function removeVnodes (parentElm, vnodes, startIdx, endIdx) {
    for (; startIdx <= endIdx; ++startIdx) {
      var ch = vnodes[startIdx];
      if (isDef(ch)) {
        if (isDef(ch.tag)) {
          removeAndInvokeRemoveHook(ch);
          invokeDestroyHook(ch);
        } else { // Text node
          removeNode(ch.elm);
        }
      }
    }
  }

  function removeAndInvokeRemoveHook (vnode, rm) {
    if (isDef(rm) || isDef(vnode.data)) {
      var i;
      var listeners = cbs.remove.length + 1;
      if (isDef(rm)) {
        // we have a recursively passed down rm callback
        // increase the listeners count
        rm.listeners += listeners;
      } else {
        // directly removing
        rm = createRmCb(vnode.elm, listeners);
      }
      // recursively invoke hooks on child component root node
      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {
        removeAndInvokeRemoveHook(i, rm);
      }
      for (i = 0; i < cbs.remove.length; ++i) {
        cbs.remove[i](vnode, rm);
      }
      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {
        i(vnode, rm);
      } else {
        rm();
      }
    } else {
      removeNode(vnode.elm);
    }
  }

  function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
    var oldStartIdx = 0;
    var newStartIdx = 0;
    var oldEndIdx = oldCh.length - 1;
    var oldStartVnode = oldCh[0];
    var oldEndVnode = oldCh[oldEndIdx];
    var newEndIdx = newCh.length - 1;
    var newStartVnode = newCh[0];
    var newEndVnode = newCh[newEndIdx];
    var oldKeyToIdx, idxInOld, vnodeToMove, refElm;

    // removeOnly is a special flag used only by <transition-group>
    // to ensure removed elements stay in correct relative positions
    // during leaving transitions
    var canMove = !removeOnly;

    {
      checkDuplicateKeys(newCh);
    }

    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
      if (isUndef(oldStartVnode)) {
        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left
      } else if (isUndef(oldEndVnode)) {
        oldEndVnode = oldCh[--oldEndIdx];
      } else if (sameVnode(oldStartVnode, newStartVnode)) {
        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        oldStartVnode = oldCh[++oldStartIdx];
        newStartVnode = newCh[++newStartIdx];
      } else if (sameVnode(oldEndVnode, newEndVnode)) {
        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        oldEndVnode = oldCh[--oldEndIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right
        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));
        oldStartVnode = oldCh[++oldStartIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left
        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
        oldEndVnode = oldCh[--oldEndIdx];
        newStartVnode = newCh[++newStartIdx];
      } else {
        if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }
        idxInOld = isDef(newStartVnode.key)
          ? oldKeyToIdx[newStartVnode.key]
          : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);
        if (isUndef(idxInOld)) { // New element
          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
        } else {
          vnodeToMove = oldCh[idxInOld];
          if (sameVnode(vnodeToMove, newStartVnode)) {
            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
            oldCh[idxInOld] = undefined;
            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);
          } else {
            // same key but different element. treat as new element
            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
          }
        }
        newStartVnode = newCh[++newStartIdx];
      }
    }
    if (oldStartIdx > oldEndIdx) {
      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
    } else if (newStartIdx > newEndIdx) {
      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);
    }
  }

  function checkDuplicateKeys (children) {
    var seenKeys = {};
    for (var i = 0; i < children.length; i++) {
      var vnode = children[i];
      var key = vnode.key;
      if (isDef(key)) {
        if (seenKeys[key]) {
          warn(
            ("Duplicate keys detected: '" + key + "'. This may cause an update error."),
            vnode.context
          );
        } else {
          seenKeys[key] = true;
        }
      }
    }
  }

  function findIdxInOld (node, oldCh, start, end) {
    for (var i = start; i < end; i++) {
      var c = oldCh[i];
      if (isDef(c) && sameVnode(node, c)) { return i }
    }
  }

  function patchVnode (
    oldVnode,
    vnode,
    insertedVnodeQueue,
    ownerArray,
    index,
    removeOnly
  ) {
    if (oldVnode === vnode) {
      return
    }

    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // clone reused vnode
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    var elm = vnode.elm = oldVnode.elm;

    if (isTrue(oldVnode.isAsyncPlaceholder)) {
      if (isDef(vnode.asyncFactory.resolved)) {
        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);
      } else {
        vnode.isAsyncPlaceholder = true;
      }
      return
    }

    // reuse element for static trees.
    // note we only do this if the vnode is cloned -
    // if the new node is not cloned it means the render functions have been
    // reset by the hot-reload-api and we need to do a proper re-render.
    if (isTrue(vnode.isStatic) &&
      isTrue(oldVnode.isStatic) &&
      vnode.key === oldVnode.key &&
      (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))
    ) {
      vnode.componentInstance = oldVnode.componentInstance;
      return
    }

    var i;
    var data = vnode.data;
    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {
      i(oldVnode, vnode);
    }

    var oldCh = oldVnode.children;
    var ch = vnode.children;
    if (isDef(data) && isPatchable(vnode)) {
      for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }
      if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }
    }
    if (isUndef(vnode.text)) {
      if (isDef(oldCh) && isDef(ch)) {
        if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }
      } else if (isDef(ch)) {
        {
          checkDuplicateKeys(ch);
        }
        if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }
        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
      } else if (isDef(oldCh)) {
        removeVnodes(elm, oldCh, 0, oldCh.length - 1);
      } else if (isDef(oldVnode.text)) {
        nodeOps.setTextContent(elm, '');
      }
    } else if (oldVnode.text !== vnode.text) {
      nodeOps.setTextContent(elm, vnode.text);
    }
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }
    }
  }

  function invokeInsertHook (vnode, queue, initial) {
    // delay insert hooks for component root nodes, invoke them after the
    // element is really inserted
    if (isTrue(initial) && isDef(vnode.parent)) {
      vnode.parent.data.pendingInsert = queue;
    } else {
      for (var i = 0; i < queue.length; ++i) {
        queue[i].data.hook.insert(queue[i]);
      }
    }
  }

  var hydrationBailed = false;
  // list of modules that can skip create hook during hydration because they
  // are already rendered on the client or has no need for initialization
  // Note: style is excluded because it relies on initial clone for future
  // deep updates (#7063).
  var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key');

  // Note: this is a browser-only function so we can assume elms are DOM nodes.
  function hydrate (elm, vnode, insertedVnodeQueue, inVPre) {
    var i;
    var tag = vnode.tag;
    var data = vnode.data;
    var children = vnode.children;
    inVPre = inVPre || (data && data.pre);
    vnode.elm = elm;

    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {
      vnode.isAsyncPlaceholder = true;
      return true
    }
    // assert node match
    {
      if (!assertNodeMatch(elm, vnode, inVPre)) {
        return false
      }
    }
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }
      if (isDef(i = vnode.componentInstance)) {
        // child component. it should have hydrated its own tree.
        initComponent(vnode, insertedVnodeQueue);
        return true
      }
    }
    if (isDef(tag)) {
      if (isDef(children)) {
        // empty element, allow client to pick up and populate children
        if (!elm.hasChildNodes()) {
          createChildren(vnode, children, insertedVnodeQueue);
        } else {
          // v-html and domProps: innerHTML
          if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {
            if (i !== elm.innerHTML) {
              /* istanbul ignore if */
              if (typeof console !== 'undefined' &&
                !hydrationBailed
              ) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('server innerHTML: ', i);
                console.warn('client innerHTML: ', elm.innerHTML);
              }
              return false
            }
          } else {
            // iterate and compare children lists
            var childrenMatch = true;
            var childNode = elm.firstChild;
            for (var i$1 = 0; i$1 < children.length; i$1++) {
              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {
                childrenMatch = false;
                break
              }
              childNode = childNode.nextSibling;
            }
            // if childNode is not null, it means the actual childNodes list is
            // longer than the virtual children list.
            if (!childrenMatch || childNode) {
              /* istanbul ignore if */
              if (typeof console !== 'undefined' &&
                !hydrationBailed
              ) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);
              }
              return false
            }
          }
        }
      }
      if (isDef(data)) {
        var fullInvoke = false;
        for (var key in data) {
          if (!isRenderedModule(key)) {
            fullInvoke = true;
            invokeCreateHooks(vnode, insertedVnodeQueue);
            break
          }
        }
        if (!fullInvoke && data['class']) {
          // ensure collecting deps for deep class bindings for future updates
          traverse(data['class']);
        }
      }
    } else if (elm.data !== vnode.text) {
      elm.data = vnode.text;
    }
    return true
  }

  function assertNodeMatch (node, vnode, inVPre) {
    if (isDef(vnode.tag)) {
      return vnode.tag.indexOf('vue-component') === 0 || (
        !isUnknownElement$$1(vnode, inVPre) &&
        vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())
      )
    } else {
      return node.nodeType === (vnode.isComment ? 8 : 3)
    }
  }

  return function patch (oldVnode, vnode, hydrating, removeOnly) {
    if (isUndef(vnode)) {
      if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }
      return
    }

    var isInitialPatch = false;
    var insertedVnodeQueue = [];

    if (isUndef(oldVnode)) {
      // empty mount (likely as component), create new root element
      isInitialPatch = true;
      createElm(vnode, insertedVnodeQueue);
    } else {
      var isRealElement = isDef(oldVnode.nodeType);
      if (!isRealElement && sameVnode(oldVnode, vnode)) {
        // patch existing root node
        patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly);
      } else {
        if (isRealElement) {
          // mounting to a real element
          // check if this is server-rendered content and if we can perform
          // a successful hydration.
          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
            oldVnode.removeAttribute(SSR_ATTR);
            hydrating = true;
          }
          if (isTrue(hydrating)) {
            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
              invokeInsertHook(vnode, insertedVnodeQueue, true);
              return oldVnode
            } else {
              warn(
                'The client-side rendered virtual DOM tree is not matching ' +
                'server-rendered content. This is likely caused by incorrect ' +
                'HTML markup, for example nesting block-level elements inside ' +
                '<p>, or missing <tbody>. Bailing hydration and performing ' +
                'full client-side render.'
              );
            }
          }
          // either not server-rendered, or hydration failed.
          // create an empty node and replace it
          oldVnode = emptyNodeAt(oldVnode);
        }

        // replacing existing element
        var oldElm = oldVnode.elm;
        var parentElm = nodeOps.parentNode(oldElm);

        // create new node
        createElm(
          vnode,
          insertedVnodeQueue,
          // extremely rare edge case: do not insert if old element is in a
          // leaving transition. Only happens when combining transition +
          // keep-alive + HOCs. (#4590)
          oldElm._leaveCb ? null : parentElm,
          nodeOps.nextSibling(oldElm)
        );

        // update parent placeholder node element, recursively
        if (isDef(vnode.parent)) {
          var ancestor = vnode.parent;
          var patchable = isPatchable(vnode);
          while (ancestor) {
            for (var i = 0; i < cbs.destroy.length; ++i) {
              cbs.destroy[i](ancestor);
            }
            ancestor.elm = vnode.elm;
            if (patchable) {
              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
                cbs.create[i$1](emptyNode, ancestor);
              }
              // #6513
              // invoke insert hooks that may have been merged by create hooks.
              // e.g. for directives that uses the "inserted" hook.
              var insert = ancestor.data.hook.insert;
              if (insert.merged) {
                // start at index 1 to avoid re-invoking component mounted hook
                for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {
                  insert.fns[i$2]();
                }
              }
            } else {
              registerRef(ancestor);
            }
            ancestor = ancestor.parent;
          }
        }

        // destroy old node
        if (isDef(parentElm)) {
          removeVnodes(parentElm, [oldVnode], 0, 0);
        } else if (isDef(oldVnode.tag)) {
          invokeDestroyHook(oldVnode);
        }
      }
    }

    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
    return vnode.elm
  }
}

/*  */

var directives = {
  create: updateDirectives,
  update: updateDirectives,
  destroy: function unbindDirectives (vnode) {
    updateDirectives(vnode, emptyNode);
  }
};

function updateDirectives (oldVnode, vnode) {
  if (oldVnode.data.directives || vnode.data.directives) {
    _update(oldVnode, vnode);
  }
}

function _update (oldVnode, vnode) {
  var isCreate = oldVnode === emptyNode;
  var isDestroy = vnode === emptyNode;
  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);

  var dirsWithInsert = [];
  var dirsWithPostpatch = [];

  var key, oldDir, dir;
  for (key in newDirs) {
    oldDir = oldDirs[key];
    dir = newDirs[key];
    if (!oldDir) {
      // new directive, bind
      callHook$1(dir, 'bind', vnode, oldVnode);
      if (dir.def && dir.def.inserted) {
        dirsWithInsert.push(dir);
      }
    } else {
      // existing directive, update
      dir.oldValue = oldDir.value;
      dir.oldArg = oldDir.arg;
      callHook$1(dir, 'update', vnode, oldVnode);
      if (dir.def && dir.def.componentUpdated) {
        dirsWithPostpatch.push(dir);
      }
    }
  }

  if (dirsWithInsert.length) {
    var callInsert = function () {
      for (var i = 0; i < dirsWithInsert.length; i++) {
        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);
      }
    };
    if (isCreate) {
      mergeVNodeHook(vnode, 'insert', callInsert);
    } else {
      callInsert();
    }
  }

  if (dirsWithPostpatch.length) {
    mergeVNodeHook(vnode, 'postpatch', function () {
      for (var i = 0; i < dirsWithPostpatch.length; i++) {
        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);
      }
    });
  }

  if (!isCreate) {
    for (key in oldDirs) {
      if (!newDirs[key]) {
        // no longer present, unbind
        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);
      }
    }
  }
}

var emptyModifiers = Object.create(null);

function normalizeDirectives$1 (
  dirs,
  vm
) {
  var res = Object.create(null);
  if (!dirs) {
    // $flow-disable-line
    return res
  }
  var i, dir;
  for (i = 0; i < dirs.length; i++) {
    dir = dirs[i];
    if (!dir.modifiers) {
      // $flow-disable-line
      dir.modifiers = emptyModifiers;
    }
    res[getRawDirName(dir)] = dir;
    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);
  }
  // $flow-disable-line
  return res
}

function getRawDirName (dir) {
  return dir.rawName || ((dir.name) + "." + (Object.keys(dir.modifiers || {}).join('.')))
}

function callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {
  var fn = dir.def && dir.def[hook];
  if (fn) {
    try {
      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
    } catch (e) {
      handleError(e, vnode.context, ("directive " + (dir.name) + " " + hook + " hook"));
    }
  }
}

var baseModules = [
  ref,
  directives
];

/*  */

function updateAttrs (oldVnode, vnode) {
  var opts = vnode.componentOptions;
  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {
    return
  }
  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {
    return
  }
  var key, cur, old;
  var elm = vnode.elm;
  var oldAttrs = oldVnode.data.attrs || {};
  var attrs = vnode.data.attrs || {};
  // clone observed objects, as the user probably wants to mutate it
  if (isDef(attrs.__ob__)) {
    attrs = vnode.data.attrs = extend({}, attrs);
  }

  for (key in attrs) {
    cur = attrs[key];
    old = oldAttrs[key];
    if (old !== cur) {
      setAttr(elm, key, cur);
    }
  }
  // #4391: in IE9, setting type can reset value for input[type=radio]
  // #6666: IE/Edge forces progress value down to 1 before setting a max
  /* istanbul ignore if */
  if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {
    setAttr(elm, 'value', attrs.value);
  }
  for (key in oldAttrs) {
    if (isUndef(attrs[key])) {
      if (isXlink(key)) {
        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));
      } else if (!isEnumeratedAttr(key)) {
        elm.removeAttribute(key);
      }
    }
  }
}

function setAttr (el, key, value) {
  if (el.tagName.indexOf('-') > -1) {
    baseSetAttr(el, key, value);
  } else if (isBooleanAttr(key)) {
    // set attribute for blank value
    // e.g. <option disabled>Select one</option>
    if (isFalsyAttrValue(value)) {
      el.removeAttribute(key);
    } else {
      // technically allowfullscreen is a boolean attribute for <iframe>,
      // but Flash expects a value of "true" when used on <embed> tag
      value = key === 'allowfullscreen' && el.tagName === 'EMBED'
        ? 'true'
        : key;
      el.setAttribute(key, value);
    }
  } else if (isEnumeratedAttr(key)) {
    el.setAttribute(key, convertEnumeratedValue(key, value));
  } else if (isXlink(key)) {
    if (isFalsyAttrValue(value)) {
      el.removeAttributeNS(xlinkNS, getXlinkProp(key));
    } else {
      el.setAttributeNS(xlinkNS, key, value);
    }
  } else {
    baseSetAttr(el, key, value);
  }
}

function baseSetAttr (el, key, value) {
  if (isFalsyAttrValue(value)) {
    el.removeAttribute(key);
  } else {
    // #7138: IE10 & 11 fires input event when setting placeholder on
    // <textarea>... block the first input event and remove the blocker
    // immediately.
    /* istanbul ignore if */
    if (
      isIE && !isIE9 &&
      el.tagName === 'TEXTAREA' &&
      key === 'placeholder' && value !== '' && !el.__ieph
    ) {
      var blocker = function (e) {
        e.stopImmediatePropagation();
        el.removeEventListener('input', blocker);
      };
      el.addEventListener('input', blocker);
      // $flow-disable-line
      el.__ieph = true; /* IE placeholder patched */
    }
    el.setAttribute(key, value);
  }
}

var attrs = {
  create: updateAttrs,
  update: updateAttrs
};

/*  */

function updateClass (oldVnode, vnode) {
  var el = vnode.elm;
  var data = vnode.data;
  var oldData = oldVnode.data;
  if (
    isUndef(data.staticClass) &&
    isUndef(data.class) && (
      isUndef(oldData) || (
        isUndef(oldData.staticClass) &&
        isUndef(oldData.class)
      )
    )
  ) {
    return
  }

  var cls = genClassForVnode(vnode);

  // handle transition classes
  var transitionClass = el._transitionClasses;
  if (isDef(transitionClass)) {
    cls = concat(cls, stringifyClass(transitionClass));
  }

  // set the class
  if (cls !== el._prevClass) {
    el.setAttribute('class', cls);
    el._prevClass = cls;
  }
}

var klass = {
  create: updateClass,
  update: updateClass
};

/*  */

var validDivisionCharRE = /[\w).+\-_$\]]/;

function parseFilters (exp) {
  var inSingle = false;
  var inDouble = false;
  var inTemplateString = false;
  var inRegex = false;
  var curly = 0;
  var square = 0;
  var paren = 0;
  var lastFilterIndex = 0;
  var c, prev, i, expression, filters;

  for (i = 0; i < exp.length; i++) {
    prev = c;
    c = exp.charCodeAt(i);
    if (inSingle) {
      if (c === 0x27 && prev !== 0x5C) { inSingle = false; }
    } else if (inDouble) {
      if (c === 0x22 && prev !== 0x5C) { inDouble = false; }
    } else if (inTemplateString) {
      if (c === 0x60 && prev !== 0x5C) { inTemplateString = false; }
    } else if (inRegex) {
      if (c === 0x2f && prev !== 0x5C) { inRegex = false; }
    } else if (
      c === 0x7C && // pipe
      exp.charCodeAt(i + 1) !== 0x7C &&
      exp.charCodeAt(i - 1) !== 0x7C &&
      !curly && !square && !paren
    ) {
      if (expression === undefined) {
        // first filter, end of expression
        lastFilterIndex = i + 1;
        expression = exp.slice(0, i).trim();
      } else {
        pushFilter();
      }
    } else {
      switch (c) {
        case 0x22: inDouble = true; break         // "
        case 0x27: inSingle = true; break         // '
        case 0x60: inTemplateString = true; break // `
        case 0x28: paren++; break                 // (
        case 0x29: paren--; break                 // )
        case 0x5B: square++; break                // [
        case 0x5D: square--; break                // ]
        case 0x7B: curly++; break                 // {
        case 0x7D: curly--; break                 // }
      }
      if (c === 0x2f) { // /
        var j = i - 1;
        var p = (void 0);
        // find first non-whitespace prev char
        for (; j >= 0; j--) {
          p = exp.charAt(j);
          if (p !== ' ') { break }
        }
        if (!p || !validDivisionCharRE.test(p)) {
          inRegex = true;
        }
      }
    }
  }

  if (expression === undefined) {
    expression = exp.slice(0, i).trim();
  } else if (lastFilterIndex !== 0) {
    pushFilter();
  }

  function pushFilter () {
    (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());
    lastFilterIndex = i + 1;
  }

  if (filters) {
    for (i = 0; i < filters.length; i++) {
      expression = wrapFilter(expression, filters[i]);
    }
  }

  return expression
}

function wrapFilter (exp, filter) {
  var i = filter.indexOf('(');
  if (i < 0) {
    // _f: resolveFilter
    return ("_f(\"" + filter + "\")(" + exp + ")")
  } else {
    var name = filter.slice(0, i);
    var args = filter.slice(i + 1);
    return ("_f(\"" + name + "\")(" + exp + (args !== ')' ? ',' + args : args))
  }
}

/*  */



/* eslint-disable no-unused-vars */
function baseWarn (msg, range) {
  console.error(("[Vue compiler]: " + msg));
}
/* eslint-enable no-unused-vars */

function pluckModuleFunction (
  modules,
  key
) {
  return modules
    ? modules.map(function (m) { return m[key]; }).filter(function (_) { return _; })
    : []
}

function addProp (el, name, value, range, dynamic) {
  (el.props || (el.props = [])).push(rangeSetItem({ name: name, value: value, dynamic: dynamic }, range));
  el.plain = false;
}

function addAttr (el, name, value, range, dynamic) {
  var attrs = dynamic
    ? (el.dynamicAttrs || (el.dynamicAttrs = []))
    : (el.attrs || (el.attrs = []));
  attrs.push(rangeSetItem({ name: name, value: value, dynamic: dynamic }, range));
  el.plain = false;
}

// add a raw attr (use this in preTransforms)
function addRawAttr (el, name, value, range) {
  el.attrsMap[name] = value;
  el.attrsList.push(rangeSetItem({ name: name, value: value }, range));
}

function addDirective (
  el,
  name,
  rawName,
  value,
  arg,
  isDynamicArg,
  modifiers,
  range
) {
  (el.directives || (el.directives = [])).push(rangeSetItem({
    name: name,
    rawName: rawName,
    value: value,
    arg: arg,
    isDynamicArg: isDynamicArg,
    modifiers: modifiers
  }, range));
  el.plain = false;
}

function prependModifierMarker (symbol, name, dynamic) {
  return dynamic
    ? ("_p(" + name + ",\"" + symbol + "\")")
    : symbol + name // mark the event as captured
}

function addHandler (
  el,
  name,
  value,
  modifiers,
  important,
  warn,
  range,
  dynamic
) {
  modifiers = modifiers || emptyObject;
  // warn prevent and passive modifier
  /* istanbul ignore if */
  if (
    warn &&
    modifiers.prevent && modifiers.passive
  ) {
    warn(
      'passive and prevent can\'t be used together. ' +
      'Passive handler can\'t prevent default event.',
      range
    );
  }

  // normalize click.right and click.middle since they don't actually fire
  // this is technically browser-specific, but at least for now browsers are
  // the only target envs that have right/middle clicks.
  if (modifiers.right) {
    if (dynamic) {
      name = "(" + name + ")==='click'?'contextmenu':(" + name + ")";
    } else if (name === 'click') {
      name = 'contextmenu';
      delete modifiers.right;
    }
  } else if (modifiers.middle) {
    if (dynamic) {
      name = "(" + name + ")==='click'?'mouseup':(" + name + ")";
    } else if (name === 'click') {
      name = 'mouseup';
    }
  }

  // check capture modifier
  if (modifiers.capture) {
    delete modifiers.capture;
    name = prependModifierMarker('!', name, dynamic);
  }
  if (modifiers.once) {
    delete modifiers.once;
    name = prependModifierMarker('~', name, dynamic);
  }
  /* istanbul ignore if */
  if (modifiers.passive) {
    delete modifiers.passive;
    name = prependModifierMarker('&', name, dynamic);
  }

  var events;
  if (modifiers.native) {
    delete modifiers.native;
    events = el.nativeEvents || (el.nativeEvents = {});
  } else {
    events = el.events || (el.events = {});
  }

  var newHandler = rangeSetItem({ value: value.trim(), dynamic: dynamic }, range);
  if (modifiers !== emptyObject) {
    newHandler.modifiers = modifiers;
  }

  var handlers = events[name];
  /* istanbul ignore if */
  if (Array.isArray(handlers)) {
    important ? handlers.unshift(newHandler) : handlers.push(newHandler);
  } else if (handlers) {
    events[name] = important ? [newHandler, handlers] : [handlers, newHandler];
  } else {
    events[name] = newHandler;
  }

  el.plain = false;
}

function getRawBindingAttr (
  el,
  name
) {
  return el.rawAttrsMap[':' + name] ||
    el.rawAttrsMap['v-bind:' + name] ||
    el.rawAttrsMap[name]
}

function getBindingAttr (
  el,
  name,
  getStatic
) {
  var dynamicValue =
    getAndRemoveAttr(el, ':' + name) ||
    getAndRemoveAttr(el, 'v-bind:' + name);
  if (dynamicValue != null) {
    return parseFilters(dynamicValue)
  } else if (getStatic !== false) {
    var staticValue = getAndRemoveAttr(el, name);
    if (staticValue != null) {
      return JSON.stringify(staticValue)
    }
  }
}

// note: this only removes the attr from the Array (attrsList) so that it
// doesn't get processed by processAttrs.
// By default it does NOT remove it from the map (attrsMap) because the map is
// needed during codegen.
function getAndRemoveAttr (
  el,
  name,
  removeFromMap
) {
  var val;
  if ((val = el.attrsMap[name]) != null) {
    var list = el.attrsList;
    for (var i = 0, l = list.length; i < l; i++) {
      if (list[i].name === name) {
        list.splice(i, 1);
        break
      }
    }
  }
  if (removeFromMap) {
    delete el.attrsMap[name];
  }
  return val
}

function getAndRemoveAttrByRegex (
  el,
  name
) {
  var list = el.attrsList;
  for (var i = 0, l = list.length; i < l; i++) {
    var attr = list[i];
    if (name.test(attr.name)) {
      list.splice(i, 1);
      return attr
    }
  }
}

function rangeSetItem (
  item,
  range
) {
  if (range) {
    if (range.start != null) {
      item.start = range.start;
    }
    if (range.end != null) {
      item.end = range.end;
    }
  }
  return item
}

/*  */

/**
 * Cross-platform code generation for component v-model
 */
function genComponentModel (
  el,
  value,
  modifiers
) {
  var ref = modifiers || {};
  var number = ref.number;
  var trim = ref.trim;

  var baseValueExpression = '$$v';
  var valueExpression = baseValueExpression;
  if (trim) {
    valueExpression =
      "(typeof " + baseValueExpression + " === 'string'" +
      "? " + baseValueExpression + ".trim()" +
      ": " + baseValueExpression + ")";
  }
  if (number) {
    valueExpression = "_n(" + valueExpression + ")";
  }
  var assignment = genAssignmentCode(value, valueExpression);

  el.model = {
    value: ("(" + value + ")"),
    expression: JSON.stringify(value),
    callback: ("function (" + baseValueExpression + ") {" + assignment + "}")
  };
}

/**
 * Cross-platform codegen helper for generating v-model value assignment code.
 */
function genAssignmentCode (
  value,
  assignment
) {
  var res = parseModel(value);
  if (res.key === null) {
    return (value + "=" + assignment)
  } else {
    return ("$set(" + (res.exp) + ", " + (res.key) + ", " + assignment + ")")
  }
}

/**
 * Parse a v-model expression into a base path and a final key segment.
 * Handles both dot-path and possible square brackets.
 *
 * Possible cases:
 *
 * - test
 * - test[key]
 * - test[test1[key]]
 * - test["a"][key]
 * - xxx.test[a[a].test1[key]]
 * - test.xxx.a["asa"][test1[key]]
 *
 */

var len, str, chr, index$1, expressionPos, expressionEndPos;



function parseModel (val) {
  // Fix https://github.com/vuejs/vue/pull/7730
  // allow v-model="obj.val " (trailing whitespace)
  val = val.trim();
  len = val.length;

  if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {
    index$1 = val.lastIndexOf('.');
    if (index$1 > -1) {
      return {
        exp: val.slice(0, index$1),
        key: '"' + val.slice(index$1 + 1) + '"'
      }
    } else {
      return {
        exp: val,
        key: null
      }
    }
  }

  str = val;
  index$1 = expressionPos = expressionEndPos = 0;

  while (!eof()) {
    chr = next();
    /* istanbul ignore if */
    if (isStringStart(chr)) {
      parseString(chr);
    } else if (chr === 0x5B) {
      parseBracket(chr);
    }
  }

  return {
    exp: val.slice(0, expressionPos),
    key: val.slice(expressionPos + 1, expressionEndPos)
  }
}

function next () {
  return str.charCodeAt(++index$1)
}

function eof () {
  return index$1 >= len
}

function isStringStart (chr) {
  return chr === 0x22 || chr === 0x27
}

function parseBracket (chr) {
  var inBracket = 1;
  expressionPos = index$1;
  while (!eof()) {
    chr = next();
    if (isStringStart(chr)) {
      parseString(chr);
      continue
    }
    if (chr === 0x5B) { inBracket++; }
    if (chr === 0x5D) { inBracket--; }
    if (inBracket === 0) {
      expressionEndPos = index$1;
      break
    }
  }
}

function parseString (chr) {
  var stringQuote = chr;
  while (!eof()) {
    chr = next();
    if (chr === stringQuote) {
      break
    }
  }
}

/*  */

var warn$1;

// in some cases, the event used has to be determined at runtime
// so we used some reserved tokens during compile.
var RANGE_TOKEN = '__r';
var CHECKBOX_RADIO_TOKEN = '__c';

function model (
  el,
  dir,
  _warn
) {
  warn$1 = _warn;
  var value = dir.value;
  var modifiers = dir.modifiers;
  var tag = el.tag;
  var type = el.attrsMap.type;

  {
    // inputs with type="file" are read only and setting the input's
    // value will throw an error.
    if (tag === 'input' && type === 'file') {
      warn$1(
        "<" + (el.tag) + " v-model=\"" + value + "\" type=\"file\">:\n" +
        "File inputs are read only. Use a v-on:change listener instead.",
        el.rawAttrsMap['v-model']
      );
    }
  }

  if (el.component) {
    genComponentModel(el, value, modifiers);
    // component v-model doesn't need extra runtime
    return false
  } else if (tag === 'select') {
    genSelect(el, value, modifiers);
  } else if (tag === 'input' && type === 'checkbox') {
    genCheckboxModel(el, value, modifiers);
  } else if (tag === 'input' && type === 'radio') {
    genRadioModel(el, value, modifiers);
  } else if (tag === 'input' || tag === 'textarea') {
    genDefaultModel(el, value, modifiers);
  } else if (!config.isReservedTag(tag)) {
    genComponentModel(el, value, modifiers);
    // component v-model doesn't need extra runtime
    return false
  } else {
    warn$1(
      "<" + (el.tag) + " v-model=\"" + value + "\">: " +
      "v-model is not supported on this element type. " +
      'If you are working with contenteditable, it\'s recommended to ' +
      'wrap a library dedicated for that purpose inside a custom component.',
      el.rawAttrsMap['v-model']
    );
  }

  // ensure runtime directive metadata
  return true
}

function genCheckboxModel (
  el,
  value,
  modifiers
) {
  var number = modifiers && modifiers.number;
  var valueBinding = getBindingAttr(el, 'value') || 'null';
  var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';
  var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';
  addProp(el, 'checked',
    "Array.isArray(" + value + ")" +
    "?_i(" + value + "," + valueBinding + ")>-1" + (
      trueValueBinding === 'true'
        ? (":(" + value + ")")
        : (":_q(" + value + "," + trueValueBinding + ")")
    )
  );
  addHandler(el, 'change',
    "var $$a=" + value + "," +
        '$$el=$event.target,' +
        "$$c=$$el.checked?(" + trueValueBinding + "):(" + falseValueBinding + ");" +
    'if(Array.isArray($$a)){' +
      "var $$v=" + (number ? '_n(' + valueBinding + ')' : valueBinding) + "," +
          '$$i=_i($$a,$$v);' +
      "if($$el.checked){$$i<0&&(" + (genAssignmentCode(value, '$$a.concat([$$v])')) + ")}" +
      "else{$$i>-1&&(" + (genAssignmentCode(value, '$$a.slice(0,$$i).concat($$a.slice($$i+1))')) + ")}" +
    "}else{" + (genAssignmentCode(value, '$$c')) + "}",
    null, true
  );
}

function genRadioModel (
  el,
  value,
  modifiers
) {
  var number = modifiers && modifiers.number;
  var valueBinding = getBindingAttr(el, 'value') || 'null';
  valueBinding = number ? ("_n(" + valueBinding + ")") : valueBinding;
  addProp(el, 'checked', ("_q(" + value + "," + valueBinding + ")"));
  addHandler(el, 'change', genAssignmentCode(value, valueBinding), null, true);
}

function genSelect (
  el,
  value,
  modifiers
) {
  var number = modifiers && modifiers.number;
  var selectedVal = "Array.prototype.filter" +
    ".call($event.target.options,function(o){return o.selected})" +
    ".map(function(o){var val = \"_value\" in o ? o._value : o.value;" +
    "return " + (number ? '_n(val)' : 'val') + "})";

  var assignment = '$event.target.multiple ? $$selectedVal : $$selectedVal[0]';
  var code = "var $$selectedVal = " + selectedVal + ";";
  code = code + " " + (genAssignmentCode(value, assignment));
  addHandler(el, 'change', code, null, true);
}

function genDefaultModel (
  el,
  value,
  modifiers
) {
  var type = el.attrsMap.type;

  // warn if v-bind:value conflicts with v-model
  // except for inputs with v-bind:type
  {
    var value$1 = el.attrsMap['v-bind:value'] || el.attrsMap[':value'];
    var typeBinding = el.attrsMap['v-bind:type'] || el.attrsMap[':type'];
    if (value$1 && !typeBinding) {
      var binding = el.attrsMap['v-bind:value'] ? 'v-bind:value' : ':value';
      warn$1(
        binding + "=\"" + value$1 + "\" conflicts with v-model on the same element " +
        'because the latter already expands to a value binding internally',
        el.rawAttrsMap[binding]
      );
    }
  }

  var ref = modifiers || {};
  var lazy = ref.lazy;
  var number = ref.number;
  var trim = ref.trim;
  var needCompositionGuard = !lazy && type !== 'range';
  var event = lazy
    ? 'change'
    : type === 'range'
      ? RANGE_TOKEN
      : 'input';

  var valueExpression = '$event.target.value';
  if (trim) {
    valueExpression = "$event.target.value.trim()";
  }
  if (number) {
    valueExpression = "_n(" + valueExpression + ")";
  }

  var code = genAssignmentCode(value, valueExpression);
  if (needCompositionGuard) {
    code = "if($event.target.composing)return;" + code;
  }

  addProp(el, 'value', ("(" + value + ")"));
  addHandler(el, event, code, null, true);
  if (trim || number) {
    addHandler(el, 'blur', '$forceUpdate()');
  }
}

/*  */

// normalize v-model event tokens that can only be determined at runtime.
// it's important to place the event as the first in the array because
// the whole point is ensuring the v-model callback gets called before
// user-attached handlers.
function normalizeEvents (on) {
  /* istanbul ignore if */
  if (isDef(on[RANGE_TOKEN])) {
    // IE input[type=range] only supports `change` event
    var event = isIE ? 'change' : 'input';
    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);
    delete on[RANGE_TOKEN];
  }
  // This was originally intended to fix #4521 but no longer necessary
  // after 2.5. Keeping it for backwards compat with generated code from < 2.4
  /* istanbul ignore if */
  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {
    on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);
    delete on[CHECKBOX_RADIO_TOKEN];
  }
}

var target$1;

function createOnceHandler$1 (event, handler, capture) {
  var _target = target$1; // save current target element in closure
  return function onceHandler () {
    var res = handler.apply(null, arguments);
    if (res !== null) {
      remove$2(event, onceHandler, capture, _target);
    }
  }
}

// #9446: Firefox <= 53 (in particular, ESR 52) has incorrect Event.timeStamp
// implementation and does not fire microtasks in between event propagation, so
// safe to exclude.
var useMicrotaskFix = isUsingMicroTask && !(isFF && Number(isFF[1]) <= 53);

function add$1 (
  name,
  handler,
  capture,
  passive
) {
  // async edge case #6566: inner click event triggers patch, event handler
  // attached to outer element during patch, and triggered again. This
  // happens because browsers fire microtask ticks between event propagation.
  // the solution is simple: we save the timestamp when a handler is attached,
  // and the handler would only fire if the event passed to it was fired
  // AFTER it was attached.
  if (useMicrotaskFix) {
    var attachedTimestamp = currentFlushTimestamp;
    var original = handler;
    handler = original._wrapper = function (e) {
      if (
        // no bubbling, should always fire.
        // this is just a safety net in case event.timeStamp is unreliable in
        // certain weird environments...
        e.target === e.currentTarget ||
        // event is fired after handler attachment
        e.timeStamp >= attachedTimestamp ||
        // bail for environments that have buggy event.timeStamp implementations
        // #9462 iOS 9 bug: event.timeStamp is 0 after history.pushState
        // #9681 QtWebEngine event.timeStamp is negative value
        e.timeStamp <= 0 ||
        // #9448 bail if event is fired in another document in a multi-page
        // electron/nw.js app, since event.timeStamp will be using a different
        // starting reference
        e.target.ownerDocument !== document
      ) {
        return original.apply(this, arguments)
      }
    };
  }
  target$1.addEventListener(
    name,
    handler,
    supportsPassive
      ? { capture: capture, passive: passive }
      : capture
  );
}

function remove$2 (
  name,
  handler,
  capture,
  _target
) {
  (_target || target$1).removeEventListener(
    name,
    handler._wrapper || handler,
    capture
  );
}

function updateDOMListeners (oldVnode, vnode) {
  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {
    return
  }
  var on = vnode.data.on || {};
  var oldOn = oldVnode.data.on || {};
  target$1 = vnode.elm;
  normalizeEvents(on);
  updateListeners(on, oldOn, add$1, remove$2, createOnceHandler$1, vnode.context);
  target$1 = undefined;
}

var events = {
  create: updateDOMListeners,
  update: updateDOMListeners
};

/*  */

var svgContainer;

function updateDOMProps (oldVnode, vnode) {
  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {
    return
  }
  var key, cur;
  var elm = vnode.elm;
  var oldProps = oldVnode.data.domProps || {};
  var props = vnode.data.domProps || {};
  // clone observed objects, as the user probably wants to mutate it
  if (isDef(props.__ob__)) {
    props = vnode.data.domProps = extend({}, props);
  }

  for (key in oldProps) {
    if (!(key in props)) {
      elm[key] = '';
    }
  }

  for (key in props) {
    cur = props[key];
    // ignore children if the node has textContent or innerHTML,
    // as these will throw away existing DOM nodes and cause removal errors
    // on subsequent patches (#3360)
    if (key === 'textContent' || key === 'innerHTML') {
      if (vnode.children) { vnode.children.length = 0; }
      if (cur === oldProps[key]) { continue }
      // #6601 work around Chrome version <= 55 bug where single textNode
      // replaced by innerHTML/textContent retains its parentNode property
      if (elm.childNodes.length === 1) {
        elm.removeChild(elm.childNodes[0]);
      }
    }

    if (key === 'value' && elm.tagName !== 'PROGRESS') {
      // store value as _value as well since
      // non-string values will be stringified
      elm._value = cur;
      // avoid resetting cursor position when value is the same
      var strCur = isUndef(cur) ? '' : String(cur);
      if (shouldUpdateValue(elm, strCur)) {
        elm.value = strCur;
      }
    } else if (key === 'innerHTML' && isSVG(elm.tagName) && isUndef(elm.innerHTML)) {
      // IE doesn't support innerHTML for SVG elements
      svgContainer = svgContainer || document.createElement('div');
      svgContainer.innerHTML = "<svg>" + cur + "</svg>";
      var svg = svgContainer.firstChild;
      while (elm.firstChild) {
        elm.removeChild(elm.firstChild);
      }
      while (svg.firstChild) {
        elm.appendChild(svg.firstChild);
      }
    } else if (
      // skip the update if old and new VDOM state is the same.
      // `value` is handled separately because the DOM value may be temporarily
      // out of sync with VDOM state due to focus, composition and modifiers.
      // This  #4521 by skipping the unnecesarry `checked` update.
      cur !== oldProps[key]
    ) {
      // some property updates can throw
      // e.g. `value` on <progress> w/ non-finite value
      try {
        elm[key] = cur;
      } catch (e) {}
    }
  }
}

// check platforms/web/util/attrs.js acceptValue


function shouldUpdateValue (elm, checkVal) {
  return (!elm.composing && (
    elm.tagName === 'OPTION' ||
    isNotInFocusAndDirty(elm, checkVal) ||
    isDirtyWithModifiers(elm, checkVal)
  ))
}

function isNotInFocusAndDirty (elm, checkVal) {
  // return true when textbox (.number and .trim) loses focus and its value is
  // not equal to the updated value
  var notInFocus = true;
  // #6157
  // work around IE bug when accessing document.activeElement in an iframe
  try { notInFocus = document.activeElement !== elm; } catch (e) {}
  return notInFocus && elm.value !== checkVal
}

function isDirtyWithModifiers (elm, newVal) {
  var value = elm.value;
  var modifiers = elm._vModifiers; // injected by v-model runtime
  if (isDef(modifiers)) {
    if (modifiers.number) {
      return toNumber(value) !== toNumber(newVal)
    }
    if (modifiers.trim) {
      return value.trim() !== newVal.trim()
    }
  }
  return value !== newVal
}

var domProps = {
  create: updateDOMProps,
  update: updateDOMProps
};

/*  */

var parseStyleText = cached(function (cssText) {
  var res = {};
  var listDelimiter = /;(?![^(]*\))/g;
  var propertyDelimiter = /:(.+)/;
  cssText.split(listDelimiter).forEach(function (item) {
    if (item) {
      var tmp = item.split(propertyDelimiter);
      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return res
});

// merge static and dynamic style data on the same vnode
function normalizeStyleData (data) {
  var style = normalizeStyleBinding(data.style);
  // static style is pre-processed into an object during compilation
  // and is always a fresh object, so it's safe to merge into it
  return data.staticStyle
    ? extend(data.staticStyle, style)
    : style
}

// normalize possible array / string values into Object
function normalizeStyleBinding (bindingStyle) {
  if (Array.isArray(bindingStyle)) {
    return toObject(bindingStyle)
  }
  if (typeof bindingStyle === 'string') {
    return parseStyleText(bindingStyle)
  }
  return bindingStyle
}

/**
 * parent component style should be after child's
 * so that parent component's style could override it
 */
function getStyle (vnode, checkChild) {
  var res = {};
  var styleData;

  if (checkChild) {
    var childNode = vnode;
    while (childNode.componentInstance) {
      childNode = childNode.componentInstance._vnode;
      if (
        childNode && childNode.data &&
        (styleData = normalizeStyleData(childNode.data))
      ) {
        extend(res, styleData);
      }
    }
  }

  if ((styleData = normalizeStyleData(vnode.data))) {
    extend(res, styleData);
  }

  var parentNode = vnode;
  while ((parentNode = parentNode.parent)) {
    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {
      extend(res, styleData);
    }
  }
  return res
}

/*  */

var cssVarRE = /^--/;
var importantRE = /\s*!important$/;
var setProp = function (el, name, val) {
  /* istanbul ignore if */
  if (cssVarRE.test(name)) {
    el.style.setProperty(name, val);
  } else if (importantRE.test(val)) {
    el.style.setProperty(hyphenate(name), val.replace(importantRE, ''), 'important');
  } else {
    var normalizedName = normalize(name);
    if (Array.isArray(val)) {
      // Support values array created by autoprefixer, e.g.
      // {display: ["-webkit-box", "-ms-flexbox", "flex"]}
      // Set them one by one, and the browser will only set those it can recognize
      for (var i = 0, len = val.length; i < len; i++) {
        el.style[normalizedName] = val[i];
      }
    } else {
      el.style[normalizedName] = val;
    }
  }
};

var vendorNames = ['Webkit', 'Moz', 'ms'];

var emptyStyle;
var normalize = cached(function (prop) {
  emptyStyle = emptyStyle || document.createElement('div').style;
  prop = camelize(prop);
  if (prop !== 'filter' && (prop in emptyStyle)) {
    return prop
  }
  var capName = prop.charAt(0).toUpperCase() + prop.slice(1);
  for (var i = 0; i < vendorNames.length; i++) {
    var name = vendorNames[i] + capName;
    if (name in emptyStyle) {
      return name
    }
  }
});

function updateStyle (oldVnode, vnode) {
  var data = vnode.data;
  var oldData = oldVnode.data;

  if (isUndef(data.staticStyle) && isUndef(data.style) &&
    isUndef(oldData.staticStyle) && isUndef(oldData.style)
  ) {
    return
  }

  var cur, name;
  var el = vnode.elm;
  var oldStaticStyle = oldData.staticStyle;
  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};

  // if static style exists, stylebinding already merged into it when doing normalizeStyleData
  var oldStyle = oldStaticStyle || oldStyleBinding;

  var style = normalizeStyleBinding(vnode.data.style) || {};

  // store normalized style under a different key for next diff
  // make sure to clone it if it's reactive, since the user likely wants
  // to mutate it.
  vnode.data.normalizedStyle = isDef(style.__ob__)
    ? extend({}, style)
    : style;

  var newStyle = getStyle(vnode, true);

  for (name in oldStyle) {
    if (isUndef(newStyle[name])) {
      setProp(el, name, '');
    }
  }
  for (name in newStyle) {
    cur = newStyle[name];
    if (cur !== oldStyle[name]) {
      // ie9 setting to null has no effect, must use empty string
      setProp(el, name, cur == null ? '' : cur);
    }
  }
}

var style = {
  create: updateStyle,
  update: updateStyle
};

/*  */

var whitespaceRE = /\s+/;

/**
 * Add class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */
function addClass (el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return
  }

  /* istanbul ignore else */
  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(whitespaceRE).forEach(function (c) { return el.classList.add(c); });
    } else {
      el.classList.add(cls);
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    if (cur.indexOf(' ' + cls + ' ') < 0) {
      el.setAttribute('class', (cur + cls).trim());
    }
  }
}

/**
 * Remove class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */
function removeClass (el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return
  }

  /* istanbul ignore else */
  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(whitespaceRE).forEach(function (c) { return el.classList.remove(c); });
    } else {
      el.classList.remove(cls);
    }
    if (!el.classList.length) {
      el.removeAttribute('class');
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    var tar = ' ' + cls + ' ';
    while (cur.indexOf(tar) >= 0) {
      cur = cur.replace(tar, ' ');
    }
    cur = cur.trim();
    if (cur) {
      el.setAttribute('class', cur);
    } else {
      el.removeAttribute('class');
    }
  }
}

/*  */

function resolveTransition (def$$1) {
  if (!def$$1) {
    return
  }
  /* istanbul ignore else */
  if (typeof def$$1 === 'object') {
    var res = {};
    if (def$$1.css !== false) {
      extend(res, autoCssTransition(def$$1.name || 'v'));
    }
    extend(res, def$$1);
    return res
  } else if (typeof def$$1 === 'string') {
    return autoCssTransition(def$$1)
  }
}

var autoCssTransition = cached(function (name) {
  return {
    enterClass: (name + "-enter"),
    enterToClass: (name + "-enter-to"),
    enterActiveClass: (name + "-enter-active"),
    leaveClass: (name + "-leave"),
    leaveToClass: (name + "-leave-to"),
    leaveActiveClass: (name + "-leave-active")
  }
});

var hasTransition = inBrowser && !isIE9;
var TRANSITION = 'transition';
var ANIMATION = 'animation';

// Transition property/event sniffing
var transitionProp = 'transition';
var transitionEndEvent = 'transitionend';
var animationProp = 'animation';
var animationEndEvent = 'animationend';
if (hasTransition) {
  /* istanbul ignore if */
  if (window.ontransitionend === undefined &&
    window.onwebkittransitionend !== undefined
  ) {
    transitionProp = 'WebkitTransition';
    transitionEndEvent = 'webkitTransitionEnd';
  }
  if (window.onanimationend === undefined &&
    window.onwebkitanimationend !== undefined
  ) {
    animationProp = 'WebkitAnimation';
    animationEndEvent = 'webkitAnimationEnd';
  }
}

// binding to window is necessary to make hot reload work in IE in strict mode
var raf = inBrowser
  ? window.requestAnimationFrame
    ? window.requestAnimationFrame.bind(window)
    : setTimeout
  : /* istanbul ignore next */ function (fn) { return fn(); };

function nextFrame (fn) {
  raf(function () {
    raf(fn);
  });
}

function addTransitionClass (el, cls) {
  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);
  if (transitionClasses.indexOf(cls) < 0) {
    transitionClasses.push(cls);
    addClass(el, cls);
  }
}

function removeTransitionClass (el, cls) {
  if (el._transitionClasses) {
    remove(el._transitionClasses, cls);
  }
  removeClass(el, cls);
}

function whenTransitionEnds (
  el,
  expectedType,
  cb
) {
  var ref = getTransitionInfo(el, expectedType);
  var type = ref.type;
  var timeout = ref.timeout;
  var propCount = ref.propCount;
  if (!type) { return cb() }
  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;
  var ended = 0;
  var end = function () {
    el.removeEventListener(event, onEnd);
    cb();
  };
  var onEnd = function (e) {
    if (e.target === el) {
      if (++ended >= propCount) {
        end();
      }
    }
  };
  setTimeout(function () {
    if (ended < propCount) {
      end();
    }
  }, timeout + 1);
  el.addEventListener(event, onEnd);
}

var transformRE = /\b(transform|all)(,|$)/;

function getTransitionInfo (el, expectedType) {
  var styles = window.getComputedStyle(el);
  // JSDOM may return undefined for transition properties
  var transitionDelays = (styles[transitionProp + 'Delay'] || '').split(', ');
  var transitionDurations = (styles[transitionProp + 'Duration'] || '').split(', ');
  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);
  var animationDelays = (styles[animationProp + 'Delay'] || '').split(', ');
  var animationDurations = (styles[animationProp + 'Duration'] || '').split(', ');
  var animationTimeout = getTimeout(animationDelays, animationDurations);

  var type;
  var timeout = 0;
  var propCount = 0;
  /* istanbul ignore if */
  if (expectedType === TRANSITION) {
    if (transitionTimeout > 0) {
      type = TRANSITION;
      timeout = transitionTimeout;
      propCount = transitionDurations.length;
    }
  } else if (expectedType === ANIMATION) {
    if (animationTimeout > 0) {
      type = ANIMATION;
      timeout = animationTimeout;
      propCount = animationDurations.length;
    }
  } else {
    timeout = Math.max(transitionTimeout, animationTimeout);
    type = timeout > 0
      ? transitionTimeout > animationTimeout
        ? TRANSITION
        : ANIMATION
      : null;
    propCount = type
      ? type === TRANSITION
        ? transitionDurations.length
        : animationDurations.length
      : 0;
  }
  var hasTransform =
    type === TRANSITION &&
    transformRE.test(styles[transitionProp + 'Property']);
  return {
    type: type,
    timeout: timeout,
    propCount: propCount,
    hasTransform: hasTransform
  }
}

function getTimeout (delays, durations) {
  /* istanbul ignore next */
  while (delays.length < durations.length) {
    delays = delays.concat(delays);
  }

  return Math.max.apply(null, durations.map(function (d, i) {
    return toMs(d) + toMs(delays[i])
  }))
}

// Old versions of Chromium (below 61.0.3163.100) formats floating pointer numbers
// in a locale-dependent way, using a comma instead of a dot.
// If comma is not replaced with a dot, the input will be rounded down (i.e. acting
// as a floor function) causing unexpected behaviors
function toMs (s) {
  return Number(s.slice(0, -1).replace(',', '.')) * 1000
}

/*  */

function enter (vnode, toggleDisplay) {
  var el = vnode.elm;

  // call leave callback now
  if (isDef(el._leaveCb)) {
    el._leaveCb.cancelled = true;
    el._leaveCb();
  }

  var data = resolveTransition(vnode.data.transition);
  if (isUndef(data)) {
    return
  }

  /* istanbul ignore if */
  if (isDef(el._enterCb) || el.nodeType !== 1) {
    return
  }

  var css = data.css;
  var type = data.type;
  var enterClass = data.enterClass;
  var enterToClass = data.enterToClass;
  var enterActiveClass = data.enterActiveClass;
  var appearClass = data.appearClass;
  var appearToClass = data.appearToClass;
  var appearActiveClass = data.appearActiveClass;
  var beforeEnter = data.beforeEnter;
  var enter = data.enter;
  var afterEnter = data.afterEnter;
  var enterCancelled = data.enterCancelled;
  var beforeAppear = data.beforeAppear;
  var appear = data.appear;
  var afterAppear = data.afterAppear;
  var appearCancelled = data.appearCancelled;
  var duration = data.duration;

  // activeInstance will always be the <transition> component managing this
  // transition. One edge case to check is when the <transition> is placed
  // as the root node of a child component. In that case we need to check
  // <transition>'s parent for appear check.
  var context = activeInstance;
  var transitionNode = activeInstance.$vnode;
  while (transitionNode && transitionNode.parent) {
    context = transitionNode.context;
    transitionNode = transitionNode.parent;
  }

  var isAppear = !context._isMounted || !vnode.isRootInsert;

  if (isAppear && !appear && appear !== '') {
    return
  }

  var startClass = isAppear && appearClass
    ? appearClass
    : enterClass;
  var activeClass = isAppear && appearActiveClass
    ? appearActiveClass
    : enterActiveClass;
  var toClass = isAppear && appearToClass
    ? appearToClass
    : enterToClass;

  var beforeEnterHook = isAppear
    ? (beforeAppear || beforeEnter)
    : beforeEnter;
  var enterHook = isAppear
    ? (typeof appear === 'function' ? appear : enter)
    : enter;
  var afterEnterHook = isAppear
    ? (afterAppear || afterEnter)
    : afterEnter;
  var enterCancelledHook = isAppear
    ? (appearCancelled || enterCancelled)
    : enterCancelled;

  var explicitEnterDuration = toNumber(
    isObject(duration)
      ? duration.enter
      : duration
  );

  if (explicitEnterDuration != null) {
    checkDuration(explicitEnterDuration, 'enter', vnode);
  }

  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(enterHook);

  var cb = el._enterCb = once(function () {
    if (expectsCSS) {
      removeTransitionClass(el, toClass);
      removeTransitionClass(el, activeClass);
    }
    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, startClass);
      }
      enterCancelledHook && enterCancelledHook(el);
    } else {
      afterEnterHook && afterEnterHook(el);
    }
    el._enterCb = null;
  });

  if (!vnode.data.show) {
    // remove pending leave element on enter by injecting an insert hook
    mergeVNodeHook(vnode, 'insert', function () {
      var parent = el.parentNode;
      var pendingNode = parent && parent._pending && parent._pending[vnode.key];
      if (pendingNode &&
        pendingNode.tag === vnode.tag &&
        pendingNode.elm._leaveCb
      ) {
        pendingNode.elm._leaveCb();
      }
      enterHook && enterHook(el, cb);
    });
  }

  // start enter transition
  beforeEnterHook && beforeEnterHook(el);
  if (expectsCSS) {
    addTransitionClass(el, startClass);
    addTransitionClass(el, activeClass);
    nextFrame(function () {
      removeTransitionClass(el, startClass);
      if (!cb.cancelled) {
        addTransitionClass(el, toClass);
        if (!userWantsControl) {
          if (isValidDuration(explicitEnterDuration)) {
            setTimeout(cb, explicitEnterDuration);
          } else {
            whenTransitionEnds(el, type, cb);
          }
        }
      }
    });
  }

  if (vnode.data.show) {
    toggleDisplay && toggleDisplay();
    enterHook && enterHook(el, cb);
  }

  if (!expectsCSS && !userWantsControl) {
    cb();
  }
}

function leave (vnode, rm) {
  var el = vnode.elm;

  // call enter callback now
  if (isDef(el._enterCb)) {
    el._enterCb.cancelled = true;
    el._enterCb();
  }

  var data = resolveTransition(vnode.data.transition);
  if (isUndef(data) || el.nodeType !== 1) {
    return rm()
  }

  /* istanbul ignore if */
  if (isDef(el._leaveCb)) {
    return
  }

  var css = data.css;
  var type = data.type;
  var leaveClass = data.leaveClass;
  var leaveToClass = data.leaveToClass;
  var leaveActiveClass = data.leaveActiveClass;
  var beforeLeave = data.beforeLeave;
  var leave = data.leave;
  var afterLeave = data.afterLeave;
  var leaveCancelled = data.leaveCancelled;
  var delayLeave = data.delayLeave;
  var duration = data.duration;

  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(leave);

  var explicitLeaveDuration = toNumber(
    isObject(duration)
      ? duration.leave
      : duration
  );

  if (isDef(explicitLeaveDuration)) {
    checkDuration(explicitLeaveDuration, 'leave', vnode);
  }

  var cb = el._leaveCb = once(function () {
    if (el.parentNode && el.parentNode._pending) {
      el.parentNode._pending[vnode.key] = null;
    }
    if (expectsCSS) {
      removeTransitionClass(el, leaveToClass);
      removeTransitionClass(el, leaveActiveClass);
    }
    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, leaveClass);
      }
      leaveCancelled && leaveCancelled(el);
    } else {
      rm();
      afterLeave && afterLeave(el);
    }
    el._leaveCb = null;
  });

  if (delayLeave) {
    delayLeave(performLeave);
  } else {
    performLeave();
  }

  function performLeave () {
    // the delayed leave may have already been cancelled
    if (cb.cancelled) {
      return
    }
    // record leaving element
    if (!vnode.data.show && el.parentNode) {
      (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;
    }
    beforeLeave && beforeLeave(el);
    if (expectsCSS) {
      addTransitionClass(el, leaveClass);
      addTransitionClass(el, leaveActiveClass);
      nextFrame(function () {
        removeTransitionClass(el, leaveClass);
        if (!cb.cancelled) {
          addTransitionClass(el, leaveToClass);
          if (!userWantsControl) {
            if (isValidDuration(explicitLeaveDuration)) {
              setTimeout(cb, explicitLeaveDuration);
            } else {
              whenTransitionEnds(el, type, cb);
            }
          }
        }
      });
    }
    leave && leave(el, cb);
    if (!expectsCSS && !userWantsControl) {
      cb();
    }
  }
}

// only used in dev mode
function checkDuration (val, name, vnode) {
  if (typeof val !== 'number') {
    warn(
      "<transition> explicit " + name + " duration is not a valid number - " +
      "got " + (JSON.stringify(val)) + ".",
      vnode.context
    );
  } else if (isNaN(val)) {
    warn(
      "<transition> explicit " + name + " duration is NaN - " +
      'the duration expression might be incorrect.',
      vnode.context
    );
  }
}

function isValidDuration (val) {
  return typeof val === 'number' && !isNaN(val)
}

/**
 * Normalize a transition hook's argument length. The hook may be:
 * - a merged hook (invoker) with the original in .fns
 * - a wrapped component method (check ._length)
 * - a plain function (.length)
 */
function getHookArgumentsLength (fn) {
  if (isUndef(fn)) {
    return false
  }
  var invokerFns = fn.fns;
  if (isDef(invokerFns)) {
    // invoker
    return getHookArgumentsLength(
      Array.isArray(invokerFns)
        ? invokerFns[0]
        : invokerFns
    )
  } else {
    return (fn._length || fn.length) > 1
  }
}

function _enter (_, vnode) {
  if (vnode.data.show !== true) {
    enter(vnode);
  }
}

var transition = inBrowser ? {
  create: _enter,
  activate: _enter,
  remove: function remove$$1 (vnode, rm) {
    /* istanbul ignore else */
    if (vnode.data.show !== true) {
      leave(vnode, rm);
    } else {
      rm();
    }
  }
} : {};

var platformModules = [
  attrs,
  klass,
  events,
  domProps,
  style,
  transition
];

/*  */

// the directive module should be applied last, after all
// built-in modules have been applied.
var modules = platformModules.concat(baseModules);

var patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });

/**
 * Not type checking this file because flow doesn't like attaching
 * properties to Elements.
 */

/* istanbul ignore if */
if (isIE9) {
  // http://www.matts411.com/post/internet-explorer-9-oninput/
  document.addEventListener('selectionchange', function () {
    var el = document.activeElement;
    if (el && el.vmodel) {
      trigger(el, 'input');
    }
  });
}

var directive = {
  inserted: function inserted (el, binding, vnode, oldVnode) {
    if (vnode.tag === 'select') {
      // #6903
      if (oldVnode.elm && !oldVnode.elm._vOptions) {
        mergeVNodeHook(vnode, 'postpatch', function () {
          directive.componentUpdated(el, binding, vnode);
        });
      } else {
        setSelected(el, binding, vnode.context);
      }
      el._vOptions = [].map.call(el.options, getValue);
    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {
      el._vModifiers = binding.modifiers;
      if (!binding.modifiers.lazy) {
        el.addEventListener('compositionstart', onCompositionStart);
        el.addEventListener('compositionend', onCompositionEnd);
        // Safari < 10.2 & UIWebView doesn't fire compositionend when
        // switching focus before confirming composition choice
        // this also fixes the issue where some browsers e.g. iOS Chrome
        // fires "change" instead of "input" on autocomplete.
        el.addEventListener('change', onCompositionEnd);
        /* istanbul ignore if */
        if (isIE9) {
          el.vmodel = true;
        }
      }
    }
  },

  componentUpdated: function componentUpdated (el, binding, vnode) {
    if (vnode.tag === 'select') {
      setSelected(el, binding, vnode.context);
      // in case the options rendered by v-for have changed,
      // it's possible that the value is out-of-sync with the rendered options.
      // detect such cases and filter out values that no longer has a matching
      // option in the DOM.
      var prevOptions = el._vOptions;
      var curOptions = el._vOptions = [].map.call(el.options, getValue);
      if (curOptions.some(function (o, i) { return !looseEqual(o, prevOptions[i]); })) {
        // trigger change event if
        // no matching option found for at least one value
        var needReset = el.multiple
          ? binding.value.some(function (v) { return hasNoMatchingOption(v, curOptions); })
          : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);
        if (needReset) {
          trigger(el, 'change');
        }
      }
    }
  }
};

function setSelected (el, binding, vm) {
  actuallySetSelected(el, binding, vm);
  /* istanbul ignore if */
  if (isIE || isEdge) {
    setTimeout(function () {
      actuallySetSelected(el, binding, vm);
    }, 0);
  }
}

function actuallySetSelected (el, binding, vm) {
  var value = binding.value;
  var isMultiple = el.multiple;
  if (isMultiple && !Array.isArray(value)) {
    warn(
      "<select multiple v-model=\"" + (binding.expression) + "\"> " +
      "expects an Array value for its binding, but got " + (Object.prototype.toString.call(value).slice(8, -1)),
      vm
    );
    return
  }
  var selected, option;
  for (var i = 0, l = el.options.length; i < l; i++) {
    option = el.options[i];
    if (isMultiple) {
      selected = looseIndexOf(value, getValue(option)) > -1;
      if (option.selected !== selected) {
        option.selected = selected;
      }
    } else {
      if (looseEqual(getValue(option), value)) {
        if (el.selectedIndex !== i) {
          el.selectedIndex = i;
        }
        return
      }
    }
  }
  if (!isMultiple) {
    el.selectedIndex = -1;
  }
}

function hasNoMatchingOption (value, options) {
  return options.every(function (o) { return !looseEqual(o, value); })
}

function getValue (option) {
  return '_value' in option
    ? option._value
    : option.value
}

function onCompositionStart (e) {
  e.target.composing = true;
}

function onCompositionEnd (e) {
  // prevent triggering an input event for no reason
  if (!e.target.composing) { return }
  e.target.composing = false;
  trigger(e.target, 'input');
}

function trigger (el, type) {
  var e = document.createEvent('HTMLEvents');
  e.initEvent(type, true, true);
  el.dispatchEvent(e);
}

/*  */

// recursively search for possible transition defined inside the component root
function locateNode (vnode) {
  return vnode.componentInstance && (!vnode.data || !vnode.data.transition)
    ? locateNode(vnode.componentInstance._vnode)
    : vnode
}

var show = {
  bind: function bind (el, ref, vnode) {
    var value = ref.value;

    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;
    var originalDisplay = el.__vOriginalDisplay =
      el.style.display === 'none' ? '' : el.style.display;
    if (value && transition$$1) {
      vnode.data.show = true;
      enter(vnode, function () {
        el.style.display = originalDisplay;
      });
    } else {
      el.style.display = value ? originalDisplay : 'none';
    }
  },

  update: function update (el, ref, vnode) {
    var value = ref.value;
    var oldValue = ref.oldValue;

    /* istanbul ignore if */
    if (!value === !oldValue) { return }
    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;
    if (transition$$1) {
      vnode.data.show = true;
      if (value) {
        enter(vnode, function () {
          el.style.display = el.__vOriginalDisplay;
        });
      } else {
        leave(vnode, function () {
          el.style.display = 'none';
        });
      }
    } else {
      el.style.display = value ? el.__vOriginalDisplay : 'none';
    }
  },

  unbind: function unbind (
    el,
    binding,
    vnode,
    oldVnode,
    isDestroy
  ) {
    if (!isDestroy) {
      el.style.display = el.__vOriginalDisplay;
    }
  }
};

var platformDirectives = {
  model: directive,
  show: show
};

/*  */

var transitionProps = {
  name: String,
  appear: Boolean,
  css: Boolean,
  mode: String,
  type: String,
  enterClass: String,
  leaveClass: String,
  enterToClass: String,
  leaveToClass: String,
  enterActiveClass: String,
  leaveActiveClass: String,
  appearClass: String,
  appearActiveClass: String,
  appearToClass: String,
  duration: [Number, String, Object]
};

// in case the child is also an abstract component, e.g. <keep-alive>
// we want to recursively retrieve the real component to be rendered
function getRealChild (vnode) {
  var compOptions = vnode && vnode.componentOptions;
  if (compOptions && compOptions.Ctor.options.abstract) {
    return getRealChild(getFirstComponentChild(compOptions.children))
  } else {
    return vnode
  }
}

function extractTransitionData (comp) {
  var data = {};
  var options = comp.$options;
  // props
  for (var key in options.propsData) {
    data[key] = comp[key];
  }
  // events.
  // extract listeners and pass them directly to the transition methods
  var listeners = options._parentListeners;
  for (var key$1 in listeners) {
    data[camelize(key$1)] = listeners[key$1];
  }
  return data
}

function placeholder (h, rawChild) {
  if (/\d-keep-alive$/.test(rawChild.tag)) {
    return h('keep-alive', {
      props: rawChild.componentOptions.propsData
    })
  }
}

function hasParentTransition (vnode) {
  while ((vnode = vnode.parent)) {
    if (vnode.data.transition) {
      return true
    }
  }
}

function isSameChild (child, oldChild) {
  return oldChild.key === child.key && oldChild.tag === child.tag
}

var isNotTextNode = function (c) { return c.tag || isAsyncPlaceholder(c); };

var isVShowDirective = function (d) { return d.name === 'show'; };

var Transition = {
  name: 'transition',
  props: transitionProps,
  abstract: true,

  render: function render (h) {
    var this$1 = this;

    var children = this.$slots.default;
    if (!children) {
      return
    }

    // filter out text nodes (possible whitespaces)
    children = children.filter(isNotTextNode);
    /* istanbul ignore if */
    if (!children.length) {
      return
    }

    // warn multiple elements
    if (children.length > 1) {
      warn(
        '<transition> can only be used on a single element. Use ' +
        '<transition-group> for lists.',
        this.$parent
      );
    }

    var mode = this.mode;

    // warn invalid mode
    if (mode && mode !== 'in-out' && mode !== 'out-in'
    ) {
      warn(
        'invalid <transition> mode: ' + mode,
        this.$parent
      );
    }

    var rawChild = children[0];

    // if this is a component root node and the component's
    // parent container node also has transition, skip.
    if (hasParentTransition(this.$vnode)) {
      return rawChild
    }

    // apply transition data to child
    // use getRealChild() to ignore abstract components e.g. keep-alive
    var child = getRealChild(rawChild);
    /* istanbul ignore if */
    if (!child) {
      return rawChild
    }

    if (this._leaving) {
      return placeholder(h, rawChild)
    }

    // ensure a key that is unique to the vnode type and to this transition
    // component instance. This key will be used to remove pending leaving nodes
    // during entering.
    var id = "__transition-" + (this._uid) + "-";
    child.key = child.key == null
      ? child.isComment
        ? id + 'comment'
        : id + child.tag
      : isPrimitive(child.key)
        ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)
        : child.key;

    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
    var oldRawChild = this._vnode;
    var oldChild = getRealChild(oldRawChild);

    // mark v-show
    // so that the transition module can hand over the control to the directive
    if (child.data.directives && child.data.directives.some(isVShowDirective)) {
      child.data.show = true;
    }

    if (
      oldChild &&
      oldChild.data &&
      !isSameChild(child, oldChild) &&
      !isAsyncPlaceholder(oldChild) &&
      // #6687 component root is a comment node
      !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)
    ) {
      // replace old child transition data with fresh one
      // important for dynamic transitions!
      var oldData = oldChild.data.transition = extend({}, data);
      // handle transition mode
      if (mode === 'out-in') {
        // return placeholder node and queue update when leave finishes
        this._leaving = true;
        mergeVNodeHook(oldData, 'afterLeave', function () {
          this$1._leaving = false;
          this$1.$forceUpdate();
        });
        return placeholder(h, rawChild)
      } else if (mode === 'in-out') {
        if (isAsyncPlaceholder(child)) {
          return oldRawChild
        }
        var delayedLeave;
        var performLeave = function () { delayedLeave(); };
        mergeVNodeHook(data, 'afterEnter', performLeave);
        mergeVNodeHook(data, 'enterCancelled', performLeave);
        mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });
      }
    }

    return rawChild
  }
};

/*  */

var props = extend({
  tag: String,
  moveClass: String
}, transitionProps);

delete props.mode;

var TransitionGroup = {
  props: props,

  beforeMount: function beforeMount () {
    var this$1 = this;

    var update = this._update;
    this._update = function (vnode, hydrating) {
      var restoreActiveInstance = setActiveInstance(this$1);
      // force removing pass
      this$1.__patch__(
        this$1._vnode,
        this$1.kept,
        false, // hydrating
        true // removeOnly (!important, avoids unnecessary moves)
      );
      this$1._vnode = this$1.kept;
      restoreActiveInstance();
      update.call(this$1, vnode, hydrating);
    };
  },

  render: function render (h) {
    var tag = this.tag || this.$vnode.data.tag || 'span';
    var map = Object.create(null);
    var prevChildren = this.prevChildren = this.children;
    var rawChildren = this.$slots.default || [];
    var children = this.children = [];
    var transitionData = extractTransitionData(this);

    for (var i = 0; i < rawChildren.length; i++) {
      var c = rawChildren[i];
      if (c.tag) {
        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {
          children.push(c);
          map[c.key] = c
          ;(c.data || (c.data = {})).transition = transitionData;
        } else {
          var opts = c.componentOptions;
          var name = opts ? (opts.Ctor.options.name || opts.tag || '') : c.tag;
          warn(("<transition-group> children must be keyed: <" + name + ">"));
        }
      }
    }

    if (prevChildren) {
      var kept = [];
      var removed = [];
      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {
        var c$1 = prevChildren[i$1];
        c$1.data.transition = transitionData;
        c$1.data.pos = c$1.elm.getBoundingClientRect();
        if (map[c$1.key]) {
          kept.push(c$1);
        } else {
          removed.push(c$1);
        }
      }
      this.kept = h(tag, null, kept);
      this.removed = removed;
    }

    return h(tag, null, children)
  },

  updated: function updated () {
    var children = this.prevChildren;
    var moveClass = this.moveClass || ((this.name || 'v') + '-move');
    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {
      return
    }

    // we divide the work into three loops to avoid mixing DOM reads and writes
    // in each iteration - which helps prevent layout thrashing.
    children.forEach(callPendingCbs);
    children.forEach(recordPosition);
    children.forEach(applyTranslation);

    // force reflow to put everything in position
    // assign to this to avoid being removed in tree-shaking
    // $flow-disable-line
    this._reflow = document.body.offsetHeight;

    children.forEach(function (c) {
      if (c.data.moved) {
        var el = c.elm;
        var s = el.style;
        addTransitionClass(el, moveClass);
        s.transform = s.WebkitTransform = s.transitionDuration = '';
        el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {
          if (e && e.target !== el) {
            return
          }
          if (!e || /transform$/.test(e.propertyName)) {
            el.removeEventListener(transitionEndEvent, cb);
            el._moveCb = null;
            removeTransitionClass(el, moveClass);
          }
        });
      }
    });
  },

  methods: {
    hasMove: function hasMove (el, moveClass) {
      /* istanbul ignore if */
      if (!hasTransition) {
        return false
      }
      /* istanbul ignore if */
      if (this._hasMove) {
        return this._hasMove
      }
      // Detect whether an element with the move class applied has
      // CSS transitions. Since the element may be inside an entering
      // transition at this very moment, we make a clone of it and remove
      // all other transition classes applied to ensure only the move class
      // is applied.
      var clone = el.cloneNode();
      if (el._transitionClasses) {
        el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });
      }
      addClass(clone, moveClass);
      clone.style.display = 'none';
      this.$el.appendChild(clone);
      var info = getTransitionInfo(clone);
      this.$el.removeChild(clone);
      return (this._hasMove = info.hasTransform)
    }
  }
};

function callPendingCbs (c) {
  /* istanbul ignore if */
  if (c.elm._moveCb) {
    c.elm._moveCb();
  }
  /* istanbul ignore if */
  if (c.elm._enterCb) {
    c.elm._enterCb();
  }
}

function recordPosition (c) {
  c.data.newPos = c.elm.getBoundingClientRect();
}

function applyTranslation (c) {
  var oldPos = c.data.pos;
  var newPos = c.data.newPos;
  var dx = oldPos.left - newPos.left;
  var dy = oldPos.top - newPos.top;
  if (dx || dy) {
    c.data.moved = true;
    var s = c.elm.style;
    s.transform = s.WebkitTransform = "translate(" + dx + "px," + dy + "px)";
    s.transitionDuration = '0s';
  }
}

var platformComponents = {
  Transition: Transition,
  TransitionGroup: TransitionGroup
};

/*  */

// install platform specific utils
Vue.config.mustUseProp = mustUseProp;
Vue.config.isReservedTag = isReservedTag;
Vue.config.isReservedAttr = isReservedAttr;
Vue.config.getTagNamespace = getTagNamespace;
Vue.config.isUnknownElement = isUnknownElement;

// install platform runtime directives & components
extend(Vue.options.directives, platformDirectives);
extend(Vue.options.components, platformComponents);

// install platform patch function
Vue.prototype.__patch__ = inBrowser ? patch : noop;

// public mount method
Vue.prototype.$mount = function (
  el,
  hydrating
) {
  el = el && inBrowser ? query(el) : undefined;
  return mountComponent(this, el, hydrating)
};

// devtools global hook
/* istanbul ignore next */
if (inBrowser) {
  setTimeout(function () {
    if (config.devtools) {
      if (devtools) {
        devtools.emit('init', Vue);
      } else {
        console[console.info ? 'info' : 'log'](
          'Download the Vue Devtools extension for a better development experience:\n' +
          'https://github.com/vuejs/vue-devtools'
        );
      }
    }
    if (config.productionTip !== false &&
      typeof console !== 'undefined'
    ) {
      console[console.info ? 'info' : 'log'](
        "You are running Vue in development mode.\n" +
        "Make sure to turn on production mode when deploying for production.\n" +
        "See more tips at https://vuejs.org/guide/deployment.html"
      );
    }
  }, 0);
}

/*  */

var defaultTagRE = /\{\{((?:.|\r?\n)+?)\}\}/g;
var regexEscapeRE = /[-.*+?^${}()|[\]\/\\]/g;

var buildRegex = cached(function (delimiters) {
  var open = delimiters[0].replace(regexEscapeRE, '\\$&');
  var close = delimiters[1].replace(regexEscapeRE, '\\$&');
  return new RegExp(open + '((?:.|\\n)+?)' + close, 'g')
});



function parseText (
  text,
  delimiters
) {
  var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;
  if (!tagRE.test(text)) {
    return
  }
  var tokens = [];
  var rawTokens = [];
  var lastIndex = tagRE.lastIndex = 0;
  var match, index, tokenValue;
  while ((match = tagRE.exec(text))) {
    index = match.index;
    // push text token
    if (index > lastIndex) {
      rawTokens.push(tokenValue = text.slice(lastIndex, index));
      tokens.push(JSON.stringify(tokenValue));
    }
    // tag token
    var exp = parseFilters(match[1].trim());
    tokens.push(("_s(" + exp + ")"));
    rawTokens.push({ '@binding': exp });
    lastIndex = index + match[0].length;
  }
  if (lastIndex < text.length) {
    rawTokens.push(tokenValue = text.slice(lastIndex));
    tokens.push(JSON.stringify(tokenValue));
  }
  return {
    expression: tokens.join('+'),
    tokens: rawTokens
  }
}

/*  */

function transformNode (el, options) {
  var warn = options.warn || baseWarn;
  var staticClass = getAndRemoveAttr(el, 'class');
  if (staticClass) {
    var res = parseText(staticClass, options.delimiters);
    if (res) {
      warn(
        "class=\"" + staticClass + "\": " +
        'Interpolation inside attributes has been removed. ' +
        'Use v-bind or the colon shorthand instead. For example, ' +
        'instead of <div class="{{ val }}">, use <div :class="val">.',
        el.rawAttrsMap['class']
      );
    }
  }
  if (staticClass) {
    el.staticClass = JSON.stringify(staticClass);
  }
  var classBinding = getBindingAttr(el, 'class', false /* getStatic */);
  if (classBinding) {
    el.classBinding = classBinding;
  }
}

function genData (el) {
  var data = '';
  if (el.staticClass) {
    data += "staticClass:" + (el.staticClass) + ",";
  }
  if (el.classBinding) {
    data += "class:" + (el.classBinding) + ",";
  }
  return data
}

var klass$1 = {
  staticKeys: ['staticClass'],
  transformNode: transformNode,
  genData: genData
};

/*  */

function transformNode$1 (el, options) {
  var warn = options.warn || baseWarn;
  var staticStyle = getAndRemoveAttr(el, 'style');
  if (staticStyle) {
    /* istanbul ignore if */
    {
      var res = parseText(staticStyle, options.delimiters);
      if (res) {
        warn(
          "style=\"" + staticStyle + "\": " +
          'Interpolation inside attributes has been removed. ' +
          'Use v-bind or the colon shorthand instead. For example, ' +
          'instead of <div style="{{ val }}">, use <div :style="val">.',
          el.rawAttrsMap['style']
        );
      }
    }
    el.staticStyle = JSON.stringify(parseStyleText(staticStyle));
  }

  var styleBinding = getBindingAttr(el, 'style', false /* getStatic */);
  if (styleBinding) {
    el.styleBinding = styleBinding;
  }
}

function genData$1 (el) {
  var data = '';
  if (el.staticStyle) {
    data += "staticStyle:" + (el.staticStyle) + ",";
  }
  if (el.styleBinding) {
    data += "style:(" + (el.styleBinding) + "),";
  }
  return data
}

var style$1 = {
  staticKeys: ['staticStyle'],
  transformNode: transformNode$1,
  genData: genData$1
};

/*  */

var decoder;

var he = {
  decode: function decode (html) {
    decoder = decoder || document.createElement('div');
    decoder.innerHTML = html;
    return decoder.textContent
  }
};

/*  */

var isUnaryTag = makeMap(
  'area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' +
  'link,meta,param,source,track,wbr'
);

// Elements that you can, intentionally, leave open
// (and which close themselves)
var canBeLeftOpenTag = makeMap(
  'colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source'
);

// HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3
// Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content
var isNonPhrasingTag = makeMap(
  'address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' +
  'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' +
  'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' +
  'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' +
  'title,tr,track'
);

/**
 * Not type-checking this file because it's mostly vendor code.
 */

// Regular Expressions for parsing tags and attributes
var attribute = /^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/;
var dynamicArgAttribute = /^\s*((?:v-[\w-]+:|@|:|#)\[[^=]+\][^\s"'<>\/=]*)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/;
var ncname = "[a-zA-Z_][\\-\\.0-9_a-zA-Z" + (unicodeRegExp.source) + "]*";
var qnameCapture = "((?:" + ncname + "\\:)?" + ncname + ")";
var startTagOpen = new RegExp(("^<" + qnameCapture));
var startTagClose = /^\s*(\/?)>/;
var endTag = new RegExp(("^<\\/" + qnameCapture + "[^>]*>"));
var doctype = /^<!DOCTYPE [^>]+>/i;
// #7298: escape - to avoid being pased as HTML comment when inlined in page
var comment = /^<!\--/;
var conditionalComment = /^<!\[/;

// Special Elements (can contain anything)
var isPlainTextElement = makeMap('script,style,textarea', true);
var reCache = {};

var decodingMap = {
  '&lt;': '<',
  '&gt;': '>',
  '&quot;': '"',
  '&amp;': '&',
  '&#10;': '\n',
  '&#9;': '\t',
  '&#39;': "'"
};
var encodedAttr = /&(?:lt|gt|quot|amp|#39);/g;
var encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#39|#10|#9);/g;

// #5992
var isIgnoreNewlineTag = makeMap('pre,textarea', true);
var shouldIgnoreFirstNewline = function (tag, html) { return tag && isIgnoreNewlineTag(tag) && html[0] === '\n'; };

function decodeAttr (value, shouldDecodeNewlines) {
  var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;
  return value.replace(re, function (match) { return decodingMap[match]; })
}

function parseHTML (html, options) {
  var stack = [];
  var expectHTML = options.expectHTML;
  var isUnaryTag$$1 = options.isUnaryTag || no;
  var canBeLeftOpenTag$$1 = options.canBeLeftOpenTag || no;
  var index = 0;
  var last, lastTag;
  while (html) {
    last = html;
    // Make sure we're not in a plaintext content element like script/style
    if (!lastTag || !isPlainTextElement(lastTag)) {
      var textEnd = html.indexOf('<');
      if (textEnd === 0) {
        // Comment:
        if (comment.test(html)) {
          var commentEnd = html.indexOf('-->');

          if (commentEnd >= 0) {
            if (options.shouldKeepComment) {
              options.comment(html.substring(4, commentEnd), index, index + commentEnd + 3);
            }
            advance(commentEnd + 3);
            continue
          }
        }

        // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment
        if (conditionalComment.test(html)) {
          var conditionalEnd = html.indexOf(']>');

          if (conditionalEnd >= 0) {
            advance(conditionalEnd + 2);
            continue
          }
        }

        // Doctype:
        var doctypeMatch = html.match(doctype);
        if (doctypeMatch) {
          advance(doctypeMatch[0].length);
          continue
        }

        // End tag:
        var endTagMatch = html.match(endTag);
        if (endTagMatch) {
          var curIndex = index;
          advance(endTagMatch[0].length);
          parseEndTag(endTagMatch[1], curIndex, index);
          continue
        }

        // Start tag:
        var startTagMatch = parseStartTag();
        if (startTagMatch) {
          handleStartTag(startTagMatch);
          if (shouldIgnoreFirstNewline(startTagMatch.tagName, html)) {
            advance(1);
          }
          continue
        }
      }

      var text = (void 0), rest = (void 0), next = (void 0);
      if (textEnd >= 0) {
        rest = html.slice(textEnd);
        while (
          !endTag.test(rest) &&
          !startTagOpen.test(rest) &&
          !comment.test(rest) &&
          !conditionalComment.test(rest)
        ) {
          // < in plain text, be forgiving and treat it as text
          next = rest.indexOf('<', 1);
          if (next < 0) { break }
          textEnd += next;
          rest = html.slice(textEnd);
        }
        text = html.substring(0, textEnd);
      }

      if (textEnd < 0) {
        text = html;
      }

      if (text) {
        advance(text.length);
      }

      if (options.chars && text) {
        options.chars(text, index - text.length, index);
      }
    } else {
      var endTagLength = 0;
      var stackedTag = lastTag.toLowerCase();
      var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\s\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));
      var rest$1 = html.replace(reStackedTag, function (all, text, endTag) {
        endTagLength = endTag.length;
        if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {
          text = text
            .replace(/<!\--([\s\S]*?)-->/g, '$1') // #7298
            .replace(/<!\[CDATA\[([\s\S]*?)]]>/g, '$1');
        }
        if (shouldIgnoreFirstNewline(stackedTag, text)) {
          text = text.slice(1);
        }
        if (options.chars) {
          options.chars(text);
        }
        return ''
      });
      index += html.length - rest$1.length;
      html = rest$1;
      parseEndTag(stackedTag, index - endTagLength, index);
    }

    if (html === last) {
      options.chars && options.chars(html);
      if (!stack.length && options.warn) {
        options.warn(("Mal-formatted tag at end of template: \"" + html + "\""), { start: index + html.length });
      }
      break
    }
  }

  // Clean up any remaining tags
  parseEndTag();

  function advance (n) {
    index += n;
    html = html.substring(n);
  }

  function parseStartTag () {
    var start = html.match(startTagOpen);
    if (start) {
      var match = {
        tagName: start[1],
        attrs: [],
        start: index
      };
      advance(start[0].length);
      var end, attr;
      while (!(end = html.match(startTagClose)) && (attr = html.match(dynamicArgAttribute) || html.match(attribute))) {
        attr.start = index;
        advance(attr[0].length);
        attr.end = index;
        match.attrs.push(attr);
      }
      if (end) {
        match.unarySlash = end[1];
        advance(end[0].length);
        match.end = index;
        return match
      }
    }
  }

  function handleStartTag (match) {
    var tagName = match.tagName;
    var unarySlash = match.unarySlash;

    if (expectHTML) {
      if (lastTag === 'p' && isNonPhrasingTag(tagName)) {
        parseEndTag(lastTag);
      }
      if (canBeLeftOpenTag$$1(tagName) && lastTag === tagName) {
        parseEndTag(tagName);
      }
    }

    var unary = isUnaryTag$$1(tagName) || !!unarySlash;

    var l = match.attrs.length;
    var attrs = new Array(l);
    for (var i = 0; i < l; i++) {
      var args = match.attrs[i];
      var value = args[3] || args[4] || args[5] || '';
      var shouldDecodeNewlines = tagName === 'a' && args[1] === 'href'
        ? options.shouldDecodeNewlinesForHref
        : options.shouldDecodeNewlines;
      attrs[i] = {
        name: args[1],
        value: decodeAttr(value, shouldDecodeNewlines)
      };
      if (options.outputSourceRange) {
        attrs[i].start = args.start + args[0].match(/^\s*/).length;
        attrs[i].end = args.end;
      }
    }

    if (!unary) {
      stack.push({ tag: tagName, lowerCasedTag: tagName.toLowerCase(), attrs: attrs, start: match.start, end: match.end });
      lastTag = tagName;
    }

    if (options.start) {
      options.start(tagName, attrs, unary, match.start, match.end);
    }
  }

  function parseEndTag (tagName, start, end) {
    var pos, lowerCasedTagName;
    if (start == null) { start = index; }
    if (end == null) { end = index; }

    // Find the closest opened tag of the same type
    if (tagName) {
      lowerCasedTagName = tagName.toLowerCase();
      for (pos = stack.length - 1; pos >= 0; pos--) {
        if (stack[pos].lowerCasedTag === lowerCasedTagName) {
          break
        }
      }
    } else {
      // If no tag name is provided, clean shop
      pos = 0;
    }

    if (pos >= 0) {
      // Close all the open elements, up the stack
      for (var i = stack.length - 1; i >= pos; i--) {
        if (i > pos || !tagName &&
          options.warn
        ) {
          options.warn(
            ("tag <" + (stack[i].tag) + "> has no matching end tag."),
            { start: stack[i].start, end: stack[i].end }
          );
        }
        if (options.end) {
          options.end(stack[i].tag, start, end);
        }
      }

      // Remove the open elements from the stack
      stack.length = pos;
      lastTag = pos && stack[pos - 1].tag;
    } else if (lowerCasedTagName === 'br') {
      if (options.start) {
        options.start(tagName, [], true, start, end);
      }
    } else if (lowerCasedTagName === 'p') {
      if (options.start) {
        options.start(tagName, [], false, start, end);
      }
      if (options.end) {
        options.end(tagName, start, end);
      }
    }
  }
}

/*  */

var onRE = /^@|^v-on:/;
var dirRE = /^v-|^@|^:/;
var forAliasRE = /([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/;
var forIteratorRE = /,([^,\}\]]*)(?:,([^,\}\]]*))?$/;
var stripParensRE = /^\(|\)$/g;
var dynamicArgRE = /^\[.*\]$/;

var argRE = /:(.*)$/;
var bindRE = /^:|^\.|^v-bind:/;
var modifierRE = /\.[^.\]]+(?=[^\]]*$)/g;

var slotRE = /^v-slot(:|$)|^#/;

var lineBreakRE = /[\r\n]/;
var whitespaceRE$1 = /\s+/g;

var invalidAttributeRE = /[\s"'<>\/=]/;

var decodeHTMLCached = cached(he.decode);

var emptySlotScopeToken = "_empty_";

// configurable state
var warn$2;
var delimiters;
var transforms;
var preTransforms;
var postTransforms;
var platformIsPreTag;
var platformMustUseProp;
var platformGetTagNamespace;
var maybeComponent;

function createASTElement (
  tag,
  attrs,
  parent
) {
  return {
    type: 1,
    tag: tag,
    attrsList: attrs,
    attrsMap: makeAttrsMap(attrs),
    rawAttrsMap: {},
    parent: parent,
    children: []
  }
}

/**
 * Convert HTML string to AST.
 */
function parse (
  template,
  options
) {
  warn$2 = options.warn || baseWarn;

  platformIsPreTag = options.isPreTag || no;
  platformMustUseProp = options.mustUseProp || no;
  platformGetTagNamespace = options.getTagNamespace || no;
  var isReservedTag = options.isReservedTag || no;
  maybeComponent = function (el) { return !!el.component || !isReservedTag(el.tag); };

  transforms = pluckModuleFunction(options.modules, 'transformNode');
  preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');
  postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');

  delimiters = options.delimiters;

  var stack = [];
  var preserveWhitespace = options.preserveWhitespace !== false;
  var whitespaceOption = options.whitespace;
  var root;
  var currentParent;
  var inVPre = false;
  var inPre = false;
  var warned = false;

  function warnOnce (msg, range) {
    if (!warned) {
      warned = true;
      warn$2(msg, range);
    }
  }

  function closeElement (element) {
    trimEndingWhitespace(element);
    if (!inVPre && !element.processed) {
      element = processElement(element, options);
    }
    // tree management
    if (!stack.length && element !== root) {
      // allow root elements with v-if, v-else-if and v-else
      if (root.if && (element.elseif || element.else)) {
        {
          checkRootConstraints(element);
        }
        addIfCondition(root, {
          exp: element.elseif,
          block: element
        });
      } else {
        warnOnce(
          "Component template should contain exactly one root element. " +
          "If you are using v-if on multiple elements, " +
          "use v-else-if to chain them instead.",
          { start: element.start }
        );
      }
    }
    if (currentParent && !element.forbidden) {
      if (element.elseif || element.else) {
        processIfConditions(element, currentParent);
      } else {
        if (element.slotScope) {
          // scoped slot
          // keep it in the children list so that v-else(-if) conditions can
          // find it as the prev node.
          var name = element.slotTarget || '"default"'
          ;(currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;
        }
        currentParent.children.push(element);
        element.parent = currentParent;
      }
    }

    // final children cleanup
    // filter out scoped slots
    element.children = element.children.filter(function (c) { return !(c).slotScope; });
    // remove trailing whitespace node again
    trimEndingWhitespace(element);

    // check pre state
    if (element.pre) {
      inVPre = false;
    }
    if (platformIsPreTag(element.tag)) {
      inPre = false;
    }
    // apply post-transforms
    for (var i = 0; i < postTransforms.length; i++) {
      postTransforms[i](element, options);
    }
  }

  function trimEndingWhitespace (el) {
    // remove trailing whitespace node
    if (!inPre) {
      var lastNode;
      while (
        (lastNode = el.children[el.children.length - 1]) &&
        lastNode.type === 3 &&
        lastNode.text === ' '
      ) {
        el.children.pop();
      }
    }
  }

  function checkRootConstraints (el) {
    if (el.tag === 'slot' || el.tag === 'template') {
      warnOnce(
        "Cannot use <" + (el.tag) + "> as component root element because it may " +
        'contain multiple nodes.',
        { start: el.start }
      );
    }
    if (el.attrsMap.hasOwnProperty('v-for')) {
      warnOnce(
        'Cannot use v-for on stateful component root element because ' +
        'it renders multiple elements.',
        el.rawAttrsMap['v-for']
      );
    }
  }

  parseHTML(template, {
    warn: warn$2,
    expectHTML: options.expectHTML,
    isUnaryTag: options.isUnaryTag,
    canBeLeftOpenTag: options.canBeLeftOpenTag,
    shouldDecodeNewlines: options.shouldDecodeNewlines,
    shouldDecodeNewlinesForHref: options.shouldDecodeNewlinesForHref,
    shouldKeepComment: options.comments,
    outputSourceRange: options.outputSourceRange,
    start: function start (tag, attrs, unary, start$1, end) {
      // check namespace.
      // inherit parent ns if there is one
      var ns = (currentParent && currentParent.ns) || platformGetTagNamespace(tag);

      // handle IE svg bug
      /* istanbul ignore if */
      if (isIE && ns === 'svg') {
        attrs = guardIESVGBug(attrs);
      }

      var element = createASTElement(tag, attrs, currentParent);
      if (ns) {
        element.ns = ns;
      }

      {
        if (options.outputSourceRange) {
          element.start = start$1;
          element.end = end;
          element.rawAttrsMap = element.attrsList.reduce(function (cumulated, attr) {
            cumulated[attr.name] = attr;
            return cumulated
          }, {});
        }
        attrs.forEach(function (attr) {
          if (invalidAttributeRE.test(attr.name)) {
            warn$2(
              "Invalid dynamic argument expression: attribute names cannot contain " +
              "spaces, quotes, <, >, / or =.",
              {
                start: attr.start + attr.name.indexOf("["),
                end: attr.start + attr.name.length
              }
            );
          }
        });
      }

      if (isForbiddenTag(element) && !isServerRendering()) {
        element.forbidden = true;
        warn$2(
          'Templates should only be responsible for mapping the state to the ' +
          'UI. Avoid placing tags with side-effects in your templates, such as ' +
          "<" + tag + ">" + ', as they will not be parsed.',
          { start: element.start }
        );
      }

      // apply pre-transforms
      for (var i = 0; i < preTransforms.length; i++) {
        element = preTransforms[i](element, options) || element;
      }

      if (!inVPre) {
        processPre(element);
        if (element.pre) {
          inVPre = true;
        }
      }
      if (platformIsPreTag(element.tag)) {
        inPre = true;
      }
      if (inVPre) {
        processRawAttrs(element);
      } else if (!element.processed) {
        // structural directives
        processFor(element);
        processIf(element);
        processOnce(element);
      }

      if (!root) {
        root = element;
        {
          checkRootConstraints(root);
        }
      }

      if (!unary) {
        currentParent = element;
        stack.push(element);
      } else {
        closeElement(element);
      }
    },

    end: function end (tag, start, end$1) {
      var element = stack[stack.length - 1];
      // pop stack
      stack.length -= 1;
      currentParent = stack[stack.length - 1];
      if (options.outputSourceRange) {
        element.end = end$1;
      }
      closeElement(element);
    },

    chars: function chars (text, start, end) {
      if (!currentParent) {
        {
          if (text === template) {
            warnOnce(
              'Component template requires a root element, rather than just text.',
              { start: start }
            );
          } else if ((text = text.trim())) {
            warnOnce(
              ("text \"" + text + "\" outside root element will be ignored."),
              { start: start }
            );
          }
        }
        return
      }
      // IE textarea placeholder bug
      /* istanbul ignore if */
      if (isIE &&
        currentParent.tag === 'textarea' &&
        currentParent.attrsMap.placeholder === text
      ) {
        return
      }
      var children = currentParent.children;
      if (inPre || text.trim()) {
        text = isTextTag(currentParent) ? text : decodeHTMLCached(text);
      } else if (!children.length) {
        // remove the whitespace-only node right after an opening tag
        text = '';
      } else if (whitespaceOption) {
        if (whitespaceOption === 'condense') {
          // in condense mode, remove the whitespace node if it contains
          // line break, otherwise condense to a single space
          text = lineBreakRE.test(text) ? '' : ' ';
        } else {
          text = ' ';
        }
      } else {
        text = preserveWhitespace ? ' ' : '';
      }
      if (text) {
        if (!inPre && whitespaceOption === 'condense') {
          // condense consecutive whitespaces into single space
          text = text.replace(whitespaceRE$1, ' ');
        }
        var res;
        var child;
        if (!inVPre && text !== ' ' && (res = parseText(text, delimiters))) {
          child = {
            type: 2,
            expression: res.expression,
            tokens: res.tokens,
            text: text
          };
        } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {
          child = {
            type: 3,
            text: text
          };
        }
        if (child) {
          if (options.outputSourceRange) {
            child.start = start;
            child.end = end;
          }
          children.push(child);
        }
      }
    },
    comment: function comment (text, start, end) {
      // adding anyting as a sibling to the root node is forbidden
      // comments should still be allowed, but ignored
      if (currentParent) {
        var child = {
          type: 3,
          text: text,
          isComment: true
        };
        if (options.outputSourceRange) {
          child.start = start;
          child.end = end;
        }
        currentParent.children.push(child);
      }
    }
  });
  return root
}

function processPre (el) {
  if (getAndRemoveAttr(el, 'v-pre') != null) {
    el.pre = true;
  }
}

function processRawAttrs (el) {
  var list = el.attrsList;
  var len = list.length;
  if (len) {
    var attrs = el.attrs = new Array(len);
    for (var i = 0; i < len; i++) {
      attrs[i] = {
        name: list[i].name,
        value: JSON.stringify(list[i].value)
      };
      if (list[i].start != null) {
        attrs[i].start = list[i].start;
        attrs[i].end = list[i].end;
      }
    }
  } else if (!el.pre) {
    // non root node in pre blocks with no attributes
    el.plain = true;
  }
}

function processElement (
  element,
  options
) {
  processKey(element);

  // determine whether this is a plain element after
  // removing structural attributes
  element.plain = (
    !element.key &&
    !element.scopedSlots &&
    !element.attrsList.length
  );

  processRef(element);
  processSlotContent(element);
  processSlotOutlet(element);
  processComponent(element);
  for (var i = 0; i < transforms.length; i++) {
    element = transforms[i](element, options) || element;
  }
  processAttrs(element);
  return element
}

function processKey (el) {
  var exp = getBindingAttr(el, 'key');
  if (exp) {
    {
      if (el.tag === 'template') {
        warn$2(
          "<template> cannot be keyed. Place the key on real elements instead.",
          getRawBindingAttr(el, 'key')
        );
      }
      if (el.for) {
        var iterator = el.iterator2 || el.iterator1;
        var parent = el.parent;
        if (iterator && iterator === exp && parent && parent.tag === 'transition-group') {
          warn$2(
            "Do not use v-for index as key on <transition-group> children, " +
            "this is the same as not using keys.",
            getRawBindingAttr(el, 'key'),
            true /* tip */
          );
        }
      }
    }
    el.key = exp;
  }
}

function processRef (el) {
  var ref = getBindingAttr(el, 'ref');
  if (ref) {
    el.ref = ref;
    el.refInFor = checkInFor(el);
  }
}

function processFor (el) {
  var exp;
  if ((exp = getAndRemoveAttr(el, 'v-for'))) {
    var res = parseFor(exp);
    if (res) {
      extend(el, res);
    } else {
      warn$2(
        ("Invalid v-for expression: " + exp),
        el.rawAttrsMap['v-for']
      );
    }
  }
}



function parseFor (exp) {
  var inMatch = exp.match(forAliasRE);
  if (!inMatch) { return }
  var res = {};
  res.for = inMatch[2].trim();
  var alias = inMatch[1].trim().replace(stripParensRE, '');
  var iteratorMatch = alias.match(forIteratorRE);
  if (iteratorMatch) {
    res.alias = alias.replace(forIteratorRE, '').trim();
    res.iterator1 = iteratorMatch[1].trim();
    if (iteratorMatch[2]) {
      res.iterator2 = iteratorMatch[2].trim();
    }
  } else {
    res.alias = alias;
  }
  return res
}

function processIf (el) {
  var exp = getAndRemoveAttr(el, 'v-if');
  if (exp) {
    el.if = exp;
    addIfCondition(el, {
      exp: exp,
      block: el
    });
  } else {
    if (getAndRemoveAttr(el, 'v-else') != null) {
      el.else = true;
    }
    var elseif = getAndRemoveAttr(el, 'v-else-if');
    if (elseif) {
      el.elseif = elseif;
    }
  }
}

function processIfConditions (el, parent) {
  var prev = findPrevElement(parent.children);
  if (prev && prev.if) {
    addIfCondition(prev, {
      exp: el.elseif,
      block: el
    });
  } else {
    warn$2(
      "v-" + (el.elseif ? ('else-if="' + el.elseif + '"') : 'else') + " " +
      "used on element <" + (el.tag) + "> without corresponding v-if.",
      el.rawAttrsMap[el.elseif ? 'v-else-if' : 'v-else']
    );
  }
}

function findPrevElement (children) {
  var i = children.length;
  while (i--) {
    if (children[i].type === 1) {
      return children[i]
    } else {
      if (children[i].text !== ' ') {
        warn$2(
          "text \"" + (children[i].text.trim()) + "\" between v-if and v-else(-if) " +
          "will be ignored.",
          children[i]
        );
      }
      children.pop();
    }
  }
}

function addIfCondition (el, condition) {
  if (!el.ifConditions) {
    el.ifConditions = [];
  }
  el.ifConditions.push(condition);
}

function processOnce (el) {
  var once$$1 = getAndRemoveAttr(el, 'v-once');
  if (once$$1 != null) {
    el.once = true;
  }
}

// handle content being passed to a component as slot,
// e.g. <template slot="xxx">, <div slot-scope="xxx">
function processSlotContent (el) {
  var slotScope;
  if (el.tag === 'template') {
    slotScope = getAndRemoveAttr(el, 'scope');
    /* istanbul ignore if */
    if (slotScope) {
      warn$2(
        "the \"scope\" attribute for scoped slots have been deprecated and " +
        "replaced by \"slot-scope\" since 2.5. The new \"slot-scope\" attribute " +
        "can also be used on plain elements in addition to <template> to " +
        "denote scoped slots.",
        el.rawAttrsMap['scope'],
        true
      );
    }
    el.slotScope = slotScope || getAndRemoveAttr(el, 'slot-scope');
  } else if ((slotScope = getAndRemoveAttr(el, 'slot-scope'))) {
    /* istanbul ignore if */
    if (el.attrsMap['v-for']) {
      warn$2(
        "Ambiguous combined usage of slot-scope and v-for on <" + (el.tag) + "> " +
        "(v-for takes higher priority). Use a wrapper <template> for the " +
        "scoped slot to make it clearer.",
        el.rawAttrsMap['slot-scope'],
        true
      );
    }
    el.slotScope = slotScope;
  }

  // slot="xxx"
  var slotTarget = getBindingAttr(el, 'slot');
  if (slotTarget) {
    el.slotTarget = slotTarget === '""' ? '"default"' : slotTarget;
    el.slotTargetDynamic = !!(el.attrsMap[':slot'] || el.attrsMap['v-bind:slot']);
    // preserve slot as an attribute for native shadow DOM compat
    // only for non-scoped slots.
    if (el.tag !== 'template' && !el.slotScope) {
      addAttr(el, 'slot', slotTarget, getRawBindingAttr(el, 'slot'));
    }
  }

  // 2.6 v-slot syntax
  {
    if (el.tag === 'template') {
      // v-slot on <template>
      var slotBinding = getAndRemoveAttrByRegex(el, slotRE);
      if (slotBinding) {
        {
          if (el.slotTarget || el.slotScope) {
            warn$2(
              "Unexpected mixed usage of different slot syntaxes.",
              el
            );
          }
          if (el.parent && !maybeComponent(el.parent)) {
            warn$2(
              "<template v-slot> can only appear at the root level inside " +
              "the receiving the component",
              el
            );
          }
        }
        var ref = getSlotName(slotBinding);
        var name = ref.name;
        var dynamic = ref.dynamic;
        el.slotTarget = name;
        el.slotTargetDynamic = dynamic;
        el.slotScope = slotBinding.value || emptySlotScopeToken; // force it into a scoped slot for perf
      }
    } else {
      // v-slot on component, denotes default slot
      var slotBinding$1 = getAndRemoveAttrByRegex(el, slotRE);
      if (slotBinding$1) {
        {
          if (!maybeComponent(el)) {
            warn$2(
              "v-slot can only be used on components or <template>.",
              slotBinding$1
            );
          }
          if (el.slotScope || el.slotTarget) {
            warn$2(
              "Unexpected mixed usage of different slot syntaxes.",
              el
            );
          }
          if (el.scopedSlots) {
            warn$2(
              "To avoid scope ambiguity, the default slot should also use " +
              "<template> syntax when there are other named slots.",
              slotBinding$1
            );
          }
        }
        // add the component's children to its default slot
        var slots = el.scopedSlots || (el.scopedSlots = {});
        var ref$1 = getSlotName(slotBinding$1);
        var name$1 = ref$1.name;
        var dynamic$1 = ref$1.dynamic;
        var slotContainer = slots[name$1] = createASTElement('template', [], el);
        slotContainer.slotTarget = name$1;
        slotContainer.slotTargetDynamic = dynamic$1;
        slotContainer.children = el.children.filter(function (c) {
          if (!c.slotScope) {
            c.parent = slotContainer;
            return true
          }
        });
        slotContainer.slotScope = slotBinding$1.value || emptySlotScopeToken;
        // remove children as they are returned from scopedSlots now
        el.children = [];
        // mark el non-plain so data gets generated
        el.plain = false;
      }
    }
  }
}

function getSlotName (binding) {
  var name = binding.name.replace(slotRE, '');
  if (!name) {
    if (binding.name[0] !== '#') {
      name = 'default';
    } else {
      warn$2(
        "v-slot shorthand syntax requires a slot name.",
        binding
      );
    }
  }
  return dynamicArgRE.test(name)
    // dynamic [name]
    ? { name: name.slice(1, -1), dynamic: true }
    // static name
    : { name: ("\"" + name + "\""), dynamic: false }
}

// handle <slot/> outlets
function processSlotOutlet (el) {
  if (el.tag === 'slot') {
    el.slotName = getBindingAttr(el, 'name');
    if (el.key) {
      warn$2(
        "`key` does not work on <slot> because slots are abstract outlets " +
        "and can possibly expand into multiple elements. " +
        "Use the key on a wrapping element instead.",
        getRawBindingAttr(el, 'key')
      );
    }
  }
}

function processComponent (el) {
  var binding;
  if ((binding = getBindingAttr(el, 'is'))) {
    el.component = binding;
  }
  if (getAndRemoveAttr(el, 'inline-template') != null) {
    el.inlineTemplate = true;
  }
}

function processAttrs (el) {
  var list = el.attrsList;
  var i, l, name, rawName, value, modifiers, syncGen, isDynamic;
  for (i = 0, l = list.length; i < l; i++) {
    name = rawName = list[i].name;
    value = list[i].value;
    if (dirRE.test(name)) {
      // mark element as dynamic
      el.hasBindings = true;
      // modifiers
      modifiers = parseModifiers(name.replace(dirRE, ''));
      // support .foo shorthand syntax for the .prop modifier
      if (modifiers) {
        name = name.replace(modifierRE, '');
      }
      if (bindRE.test(name)) { // v-bind
        name = name.replace(bindRE, '');
        value = parseFilters(value);
        isDynamic = dynamicArgRE.test(name);
        if (isDynamic) {
          name = name.slice(1, -1);
        }
        if (
          value.trim().length === 0
        ) {
          warn$2(
            ("The value for a v-bind expression cannot be empty. Found in \"v-bind:" + name + "\"")
          );
        }
        if (modifiers) {
          if (modifiers.prop && !isDynamic) {
            name = camelize(name);
            if (name === 'innerHtml') { name = 'innerHTML'; }
          }
          if (modifiers.camel && !isDynamic) {
            name = camelize(name);
          }
          if (modifiers.sync) {
            syncGen = genAssignmentCode(value, "$event");
            if (!isDynamic) {
              addHandler(
                el,
                ("update:" + (camelize(name))),
                syncGen,
                null,
                false,
                warn$2,
                list[i]
              );
              if (hyphenate(name) !== camelize(name)) {
                addHandler(
                  el,
                  ("update:" + (hyphenate(name))),
                  syncGen,
                  null,
                  false,
                  warn$2,
                  list[i]
                );
              }
            } else {
              // handler w/ dynamic event name
              addHandler(
                el,
                ("\"update:\"+(" + name + ")"),
                syncGen,
                null,
                false,
                warn$2,
                list[i],
                true // dynamic
              );
            }
          }
        }
        if ((modifiers && modifiers.prop) || (
          !el.component && platformMustUseProp(el.tag, el.attrsMap.type, name)
        )) {
          addProp(el, name, value, list[i], isDynamic);
        } else {
          addAttr(el, name, value, list[i], isDynamic);
        }
      } else if (onRE.test(name)) { // v-on
        name = name.replace(onRE, '');
        isDynamic = dynamicArgRE.test(name);
        if (isDynamic) {
          name = name.slice(1, -1);
        }
        addHandler(el, name, value, modifiers, false, warn$2, list[i], isDynamic);
      } else { // normal directives
        name = name.replace(dirRE, '');
        // parse arg
        var argMatch = name.match(argRE);
        var arg = argMatch && argMatch[1];
        isDynamic = false;
        if (arg) {
          name = name.slice(0, -(arg.length + 1));
          if (dynamicArgRE.test(arg)) {
            arg = arg.slice(1, -1);
            isDynamic = true;
          }
        }
        addDirective(el, name, rawName, value, arg, isDynamic, modifiers, list[i]);
        if (name === 'model') {
          checkForAliasModel(el, value);
        }
      }
    } else {
      // literal attribute
      {
        var res = parseText(value, delimiters);
        if (res) {
          warn$2(
            name + "=\"" + value + "\": " +
            'Interpolation inside attributes has been removed. ' +
            'Use v-bind or the colon shorthand instead. For example, ' +
            'instead of <div id="{{ val }}">, use <div :id="val">.',
            list[i]
          );
        }
      }
      addAttr(el, name, JSON.stringify(value), list[i]);
      // #6887 firefox doesn't update muted state if set via attribute
      // even immediately after element creation
      if (!el.component &&
          name === 'muted' &&
          platformMustUseProp(el.tag, el.attrsMap.type, name)) {
        addProp(el, name, 'true', list[i]);
      }
    }
  }
}

function checkInFor (el) {
  var parent = el;
  while (parent) {
    if (parent.for !== undefined) {
      return true
    }
    parent = parent.parent;
  }
  return false
}

function parseModifiers (name) {
  var match = name.match(modifierRE);
  if (match) {
    var ret = {};
    match.forEach(function (m) { ret[m.slice(1)] = true; });
    return ret
  }
}

function makeAttrsMap (attrs) {
  var map = {};
  for (var i = 0, l = attrs.length; i < l; i++) {
    if (
      map[attrs[i].name] && !isIE && !isEdge
    ) {
      warn$2('duplicate attribute: ' + attrs[i].name, attrs[i]);
    }
    map[attrs[i].name] = attrs[i].value;
  }
  return map
}

// for script (e.g. type="x/template") or style, do not decode content
function isTextTag (el) {
  return el.tag === 'script' || el.tag === 'style'
}

function isForbiddenTag (el) {
  return (
    el.tag === 'style' ||
    (el.tag === 'script' && (
      !el.attrsMap.type ||
      el.attrsMap.type === 'text/javascript'
    ))
  )
}

var ieNSBug = /^xmlns:NS\d+/;
var ieNSPrefix = /^NS\d+:/;

/* istanbul ignore next */
function guardIESVGBug (attrs) {
  var res = [];
  for (var i = 0; i < attrs.length; i++) {
    var attr = attrs[i];
    if (!ieNSBug.test(attr.name)) {
      attr.name = attr.name.replace(ieNSPrefix, '');
      res.push(attr);
    }
  }
  return res
}

function checkForAliasModel (el, value) {
  var _el = el;
  while (_el) {
    if (_el.for && _el.alias === value) {
      warn$2(
        "<" + (el.tag) + " v-model=\"" + value + "\">: " +
        "You are binding v-model directly to a v-for iteration alias. " +
        "This will not be able to modify the v-for source array because " +
        "writing to the alias is like modifying a function local variable. " +
        "Consider using an array of objects and use v-model on an object property instead.",
        el.rawAttrsMap['v-model']
      );
    }
    _el = _el.parent;
  }
}

/*  */

function preTransformNode (el, options) {
  if (el.tag === 'input') {
    var map = el.attrsMap;
    if (!map['v-model']) {
      return
    }

    var typeBinding;
    if (map[':type'] || map['v-bind:type']) {
      typeBinding = getBindingAttr(el, 'type');
    }
    if (!map.type && !typeBinding && map['v-bind']) {
      typeBinding = "(" + (map['v-bind']) + ").type";
    }

    if (typeBinding) {
      var ifCondition = getAndRemoveAttr(el, 'v-if', true);
      var ifConditionExtra = ifCondition ? ("&&(" + ifCondition + ")") : "";
      var hasElse = getAndRemoveAttr(el, 'v-else', true) != null;
      var elseIfCondition = getAndRemoveAttr(el, 'v-else-if', true);
      // 1. checkbox
      var branch0 = cloneASTElement(el);
      // process for on the main node
      processFor(branch0);
      addRawAttr(branch0, 'type', 'checkbox');
      processElement(branch0, options);
      branch0.processed = true; // prevent it from double-processed
      branch0.if = "(" + typeBinding + ")==='checkbox'" + ifConditionExtra;
      addIfCondition(branch0, {
        exp: branch0.if,
        block: branch0
      });
      // 2. add radio else-if condition
      var branch1 = cloneASTElement(el);
      getAndRemoveAttr(branch1, 'v-for', true);
      addRawAttr(branch1, 'type', 'radio');
      processElement(branch1, options);
      addIfCondition(branch0, {
        exp: "(" + typeBinding + ")==='radio'" + ifConditionExtra,
        block: branch1
      });
      // 3. other
      var branch2 = cloneASTElement(el);
      getAndRemoveAttr(branch2, 'v-for', true);
      addRawAttr(branch2, ':type', typeBinding);
      processElement(branch2, options);
      addIfCondition(branch0, {
        exp: ifCondition,
        block: branch2
      });

      if (hasElse) {
        branch0.else = true;
      } else if (elseIfCondition) {
        branch0.elseif = elseIfCondition;
      }

      return branch0
    }
  }
}

function cloneASTElement (el) {
  return createASTElement(el.tag, el.attrsList.slice(), el.parent)
}

var model$1 = {
  preTransformNode: preTransformNode
};

var modules$1 = [
  klass$1,
  style$1,
  model$1
];

/*  */

function text (el, dir) {
  if (dir.value) {
    addProp(el, 'textContent', ("_s(" + (dir.value) + ")"), dir);
  }
}

/*  */

function html (el, dir) {
  if (dir.value) {
    addProp(el, 'innerHTML', ("_s(" + (dir.value) + ")"), dir);
  }
}

var directives$1 = {
  model: model,
  text: text,
  html: html
};

/*  */

var baseOptions = {
  expectHTML: true,
  modules: modules$1,
  directives: directives$1,
  isPreTag: isPreTag,
  isUnaryTag: isUnaryTag,
  mustUseProp: mustUseProp,
  canBeLeftOpenTag: canBeLeftOpenTag,
  isReservedTag: isReservedTag,
  getTagNamespace: getTagNamespace,
  staticKeys: genStaticKeys(modules$1)
};

/*  */

var isStaticKey;
var isPlatformReservedTag;

var genStaticKeysCached = cached(genStaticKeys$1);

/**
 * Goal of the optimizer: walk the generated template AST tree
 * and detect sub-trees that are purely static, i.e. parts of
 * the DOM that never needs to change.
 *
 * Once we detect these sub-trees, we can:
 *
 * 1. Hoist them into constants, so that we no longer need to
 *    create fresh nodes for them on each re-render;
 * 2. Completely skip them in the patching process.
 */
function optimize (root, options) {
  if (!root) { return }
  isStaticKey = genStaticKeysCached(options.staticKeys || '');
  isPlatformReservedTag = options.isReservedTag || no;
  // first pass: mark all non-static nodes.
  markStatic$1(root);
  // second pass: mark static roots.
  markStaticRoots(root, false);
}

function genStaticKeys$1 (keys) {
  return makeMap(
    'type,tag,attrsList,attrsMap,plain,parent,children,attrs,start,end,rawAttrsMap' +
    (keys ? ',' + keys : '')
  )
}

function markStatic$1 (node) {
  node.static = isStatic(node);
  if (node.type === 1) {
    // do not make component slot content static. this avoids
    // 1. components not able to mutate slot nodes
    // 2. static slot content fails for hot-reloading
    if (
      !isPlatformReservedTag(node.tag) &&
      node.tag !== 'slot' &&
      node.attrsMap['inline-template'] == null
    ) {
      return
    }
    for (var i = 0, l = node.children.length; i < l; i++) {
      var child = node.children[i];
      markStatic$1(child);
      if (!child.static) {
        node.static = false;
      }
    }
    if (node.ifConditions) {
      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {
        var block = node.ifConditions[i$1].block;
        markStatic$1(block);
        if (!block.static) {
          node.static = false;
        }
      }
    }
  }
}

function markStaticRoots (node, isInFor) {
  if (node.type === 1) {
    if (node.static || node.once) {
      node.staticInFor = isInFor;
    }
    // For a node to qualify as a static root, it should have children that
    // are not just static text. Otherwise the cost of hoisting out will
    // outweigh the benefits and it's better off to just always render it fresh.
    if (node.static && node.children.length && !(
      node.children.length === 1 &&
      node.children[0].type === 3
    )) {
      node.staticRoot = true;
      return
    } else {
      node.staticRoot = false;
    }
    if (node.children) {
      for (var i = 0, l = node.children.length; i < l; i++) {
        markStaticRoots(node.children[i], isInFor || !!node.for);
      }
    }
    if (node.ifConditions) {
      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {
        markStaticRoots(node.ifConditions[i$1].block, isInFor);
      }
    }
  }
}

function isStatic (node) {
  if (node.type === 2) { // expression
    return false
  }
  if (node.type === 3) { // text
    return true
  }
  return !!(node.pre || (
    !node.hasBindings && // no dynamic bindings
    !node.if && !node.for && // not v-if or v-for or v-else
    !isBuiltInTag(node.tag) && // not a built-in
    isPlatformReservedTag(node.tag) && // not a component
    !isDirectChildOfTemplateFor(node) &&
    Object.keys(node).every(isStaticKey)
  ))
}

function isDirectChildOfTemplateFor (node) {
  while (node.parent) {
    node = node.parent;
    if (node.tag !== 'template') {
      return false
    }
    if (node.for) {
      return true
    }
  }
  return false
}

/*  */

var fnExpRE = /^([\w$_]+|\([^)]*?\))\s*=>|^function\s*(?:[\w$]+)?\s*\(/;
var fnInvokeRE = /\([^)]*?\);*$/;
var simplePathRE = /^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['[^']*?']|\["[^"]*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*$/;

// KeyboardEvent.keyCode aliases
var keyCodes = {
  esc: 27,
  tab: 9,
  enter: 13,
  space: 32,
  up: 38,
  left: 37,
  right: 39,
  down: 40,
  'delete': [8, 46]
};

// KeyboardEvent.key aliases
var keyNames = {
  // #7880: IE11 and Edge use `Esc` for Escape key name.
  esc: ['Esc', 'Escape'],
  tab: 'Tab',
  enter: 'Enter',
  // #9112: IE11 uses `Spacebar` for Space key name.
  space: [' ', 'Spacebar'],
  // #7806: IE11 uses key names without `Arrow` prefix for arrow keys.
  up: ['Up', 'ArrowUp'],
  left: ['Left', 'ArrowLeft'],
  right: ['Right', 'ArrowRight'],
  down: ['Down', 'ArrowDown'],
  // #9112: IE11 uses `Del` for Delete key name.
  'delete': ['Backspace', 'Delete', 'Del']
};

// #4868: modifiers that prevent the execution of the listener
// need to explicitly return null so that we can determine whether to remove
// the listener for .once
var genGuard = function (condition) { return ("if(" + condition + ")return null;"); };

var modifierCode = {
  stop: '$event.stopPropagation();',
  prevent: '$event.preventDefault();',
  self: genGuard("$event.target !== $event.currentTarget"),
  ctrl: genGuard("!$event.ctrlKey"),
  shift: genGuard("!$event.shiftKey"),
  alt: genGuard("!$event.altKey"),
  meta: genGuard("!$event.metaKey"),
  left: genGuard("'button' in $event && $event.button !== 0"),
  middle: genGuard("'button' in $event && $event.button !== 1"),
  right: genGuard("'button' in $event && $event.button !== 2")
};

function genHandlers (
  events,
  isNative
) {
  var prefix = isNative ? 'nativeOn:' : 'on:';
  var staticHandlers = "";
  var dynamicHandlers = "";
  for (var name in events) {
    var handlerCode = genHandler(events[name]);
    if (events[name] && events[name].dynamic) {
      dynamicHandlers += name + "," + handlerCode + ",";
    } else {
      staticHandlers += "\"" + name + "\":" + handlerCode + ",";
    }
  }
  staticHandlers = "{" + (staticHandlers.slice(0, -1)) + "}";
  if (dynamicHandlers) {
    return prefix + "_d(" + staticHandlers + ",[" + (dynamicHandlers.slice(0, -1)) + "])"
  } else {
    return prefix + staticHandlers
  }
}

function genHandler (handler) {
  if (!handler) {
    return 'function(){}'
  }

  if (Array.isArray(handler)) {
    return ("[" + (handler.map(function (handler) { return genHandler(handler); }).join(',')) + "]")
  }

  var isMethodPath = simplePathRE.test(handler.value);
  var isFunctionExpression = fnExpRE.test(handler.value);
  var isFunctionInvocation = simplePathRE.test(handler.value.replace(fnInvokeRE, ''));

  if (!handler.modifiers) {
    if (isMethodPath || isFunctionExpression) {
      return handler.value
    }
    return ("function($event){" + (isFunctionInvocation ? ("return " + (handler.value)) : handler.value) + "}") // inline statement
  } else {
    var code = '';
    var genModifierCode = '';
    var keys = [];
    for (var key in handler.modifiers) {
      if (modifierCode[key]) {
        genModifierCode += modifierCode[key];
        // left/right
        if (keyCodes[key]) {
          keys.push(key);
        }
      } else if (key === 'exact') {
        var modifiers = (handler.modifiers);
        genModifierCode += genGuard(
          ['ctrl', 'shift', 'alt', 'meta']
            .filter(function (keyModifier) { return !modifiers[keyModifier]; })
            .map(function (keyModifier) { return ("$event." + keyModifier + "Key"); })
            .join('||')
        );
      } else {
        keys.push(key);
      }
    }
    if (keys.length) {
      code += genKeyFilter(keys);
    }
    // Make sure modifiers like prevent and stop get executed after key filtering
    if (genModifierCode) {
      code += genModifierCode;
    }
    var handlerCode = isMethodPath
      ? ("return " + (handler.value) + "($event)")
      : isFunctionExpression
        ? ("return (" + (handler.value) + ")($event)")
        : isFunctionInvocation
          ? ("return " + (handler.value))
          : handler.value;
    return ("function($event){" + code + handlerCode + "}")
  }
}

function genKeyFilter (keys) {
  return (
    // make sure the key filters only apply to KeyboardEvents
    // #9441: can't use 'keyCode' in $event because Chrome autofill fires fake
    // key events that do not have keyCode property...
    "if(!$event.type.indexOf('key')&&" +
    (keys.map(genFilterCode).join('&&')) + ")return null;"
  )
}

function genFilterCode (key) {
  var keyVal = parseInt(key, 10);
  if (keyVal) {
    return ("$event.keyCode!==" + keyVal)
  }
  var keyCode = keyCodes[key];
  var keyName = keyNames[key];
  return (
    "_k($event.keyCode," +
    (JSON.stringify(key)) + "," +
    (JSON.stringify(keyCode)) + "," +
    "$event.key," +
    "" + (JSON.stringify(keyName)) +
    ")"
  )
}

/*  */

function on (el, dir) {
  if (dir.modifiers) {
    warn("v-on without argument does not support modifiers.");
  }
  el.wrapListeners = function (code) { return ("_g(" + code + "," + (dir.value) + ")"); };
}

/*  */

function bind$1 (el, dir) {
  el.wrapData = function (code) {
    return ("_b(" + code + ",'" + (el.tag) + "'," + (dir.value) + "," + (dir.modifiers && dir.modifiers.prop ? 'true' : 'false') + (dir.modifiers && dir.modifiers.sync ? ',true' : '') + ")")
  };
}

/*  */

var baseDirectives = {
  on: on,
  bind: bind$1,
  cloak: noop
};

/*  */





var CodegenState = function CodegenState (options) {
  this.options = options;
  this.warn = options.warn || baseWarn;
  this.transforms = pluckModuleFunction(options.modules, 'transformCode');
  this.dataGenFns = pluckModuleFunction(options.modules, 'genData');
  this.directives = extend(extend({}, baseDirectives), options.directives);
  var isReservedTag = options.isReservedTag || no;
  this.maybeComponent = function (el) { return !!el.component || !isReservedTag(el.tag); };
  this.onceId = 0;
  this.staticRenderFns = [];
  this.pre = false;
};



function generate (
  ast,
  options
) {
  var state = new CodegenState(options);
  var code = ast ? genElement(ast, state) : '_c("div")';
  return {
    render: ("with(this){return " + code + "}"),
    staticRenderFns: state.staticRenderFns
  }
}

function genElement (el, state) {
  if (el.parent) {
    el.pre = el.pre || el.parent.pre;
  }

  if (el.staticRoot && !el.staticProcessed) {
    return genStatic(el, state)
  } else if (el.once && !el.onceProcessed) {
    return genOnce(el, state)
  } else if (el.for && !el.forProcessed) {
    return genFor(el, state)
  } else if (el.if && !el.ifProcessed) {
    return genIf(el, state)
  } else if (el.tag === 'template' && !el.slotTarget && !state.pre) {
    return genChildren(el, state) || 'void 0'
  } else if (el.tag === 'slot') {
    return genSlot(el, state)
  } else {
    // component or element
    var code;
    if (el.component) {
      code = genComponent(el.component, el, state);
    } else {
      var data;
      if (!el.plain || (el.pre && state.maybeComponent(el))) {
        data = genData$2(el, state);
      }

      var children = el.inlineTemplate ? null : genChildren(el, state, true);
      code = "_c('" + (el.tag) + "'" + (data ? ("," + data) : '') + (children ? ("," + children) : '') + ")";
    }
    // module transforms
    for (var i = 0; i < state.transforms.length; i++) {
      code = state.transforms[i](el, code);
    }
    return code
  }
}

// hoist static sub-trees out
function genStatic (el, state) {
  el.staticProcessed = true;
  // Some elements (templates) need to behave differently inside of a v-pre
  // node.  All pre nodes are static roots, so we can use this as a location to
  // wrap a state change and reset it upon exiting the pre node.
  var originalPreState = state.pre;
  if (el.pre) {
    state.pre = el.pre;
  }
  state.staticRenderFns.push(("with(this){return " + (genElement(el, state)) + "}"));
  state.pre = originalPreState;
  return ("_m(" + (state.staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + ")")
}

// v-once
function genOnce (el, state) {
  el.onceProcessed = true;
  if (el.if && !el.ifProcessed) {
    return genIf(el, state)
  } else if (el.staticInFor) {
    var key = '';
    var parent = el.parent;
    while (parent) {
      if (parent.for) {
        key = parent.key;
        break
      }
      parent = parent.parent;
    }
    if (!key) {
      state.warn(
        "v-once can only be used inside v-for that is keyed. ",
        el.rawAttrsMap['v-once']
      );
      return genElement(el, state)
    }
    return ("_o(" + (genElement(el, state)) + "," + (state.onceId++) + "," + key + ")")
  } else {
    return genStatic(el, state)
  }
}

function genIf (
  el,
  state,
  altGen,
  altEmpty
) {
  el.ifProcessed = true; // avoid recursion
  return genIfConditions(el.ifConditions.slice(), state, altGen, altEmpty)
}

function genIfConditions (
  conditions,
  state,
  altGen,
  altEmpty
) {
  if (!conditions.length) {
    return altEmpty || '_e()'
  }

  var condition = conditions.shift();
  if (condition.exp) {
    return ("(" + (condition.exp) + ")?" + (genTernaryExp(condition.block)) + ":" + (genIfConditions(conditions, state, altGen, altEmpty)))
  } else {
    return ("" + (genTernaryExp(condition.block)))
  }

  // v-if with v-once should generate code like (a)?_m(0):_m(1)
  function genTernaryExp (el) {
    return altGen
      ? altGen(el, state)
      : el.once
        ? genOnce(el, state)
        : genElement(el, state)
  }
}

function genFor (
  el,
  state,
  altGen,
  altHelper
) {
  var exp = el.for;
  var alias = el.alias;
  var iterator1 = el.iterator1 ? ("," + (el.iterator1)) : '';
  var iterator2 = el.iterator2 ? ("," + (el.iterator2)) : '';

  if (state.maybeComponent(el) &&
    el.tag !== 'slot' &&
    el.tag !== 'template' &&
    !el.key
  ) {
    state.warn(
      "<" + (el.tag) + " v-for=\"" + alias + " in " + exp + "\">: component lists rendered with " +
      "v-for should have explicit keys. " +
      "See https://vuejs.org/guide/list.html#key for more info.",
      el.rawAttrsMap['v-for'],
      true /* tip */
    );
  }

  el.forProcessed = true; // avoid recursion
  return (altHelper || '_l') + "((" + exp + ")," +
    "function(" + alias + iterator1 + iterator2 + "){" +
      "return " + ((altGen || genElement)(el, state)) +
    '})'
}

function genData$2 (el, state) {
  var data = '{';

  // directives first.
  // directives may mutate the el's other properties before they are generated.
  var dirs = genDirectives(el, state);
  if (dirs) { data += dirs + ','; }

  // key
  if (el.key) {
    data += "key:" + (el.key) + ",";
  }
  // ref
  if (el.ref) {
    data += "ref:" + (el.ref) + ",";
  }
  if (el.refInFor) {
    data += "refInFor:true,";
  }
  // pre
  if (el.pre) {
    data += "pre:true,";
  }
  // record original tag name for components using "is" attribute
  if (el.component) {
    data += "tag:\"" + (el.tag) + "\",";
  }
  // module data generation functions
  for (var i = 0; i < state.dataGenFns.length; i++) {
    data += state.dataGenFns[i](el);
  }
  // attributes
  if (el.attrs) {
    data += "attrs:" + (genProps(el.attrs)) + ",";
  }
  // DOM props
  if (el.props) {
    data += "domProps:" + (genProps(el.props)) + ",";
  }
  // event handlers
  if (el.events) {
    data += (genHandlers(el.events, false)) + ",";
  }
  if (el.nativeEvents) {
    data += (genHandlers(el.nativeEvents, true)) + ",";
  }
  // slot target
  // only for non-scoped slots
  if (el.slotTarget && !el.slotScope) {
    data += "slot:" + (el.slotTarget) + ",";
  }
  // scoped slots
  if (el.scopedSlots) {
    data += (genScopedSlots(el, el.scopedSlots, state)) + ",";
  }
  // component v-model
  if (el.model) {
    data += "model:{value:" + (el.model.value) + ",callback:" + (el.model.callback) + ",expression:" + (el.model.expression) + "},";
  }
  // inline-template
  if (el.inlineTemplate) {
    var inlineTemplate = genInlineTemplate(el, state);
    if (inlineTemplate) {
      data += inlineTemplate + ",";
    }
  }
  data = data.replace(/,$/, '') + '}';
  // v-bind dynamic argument wrap
  // v-bind with dynamic arguments must be applied using the same v-bind object
  // merge helper so that class/style/mustUseProp attrs are handled correctly.
  if (el.dynamicAttrs) {
    data = "_b(" + data + ",\"" + (el.tag) + "\"," + (genProps(el.dynamicAttrs)) + ")";
  }
  // v-bind data wrap
  if (el.wrapData) {
    data = el.wrapData(data);
  }
  // v-on data wrap
  if (el.wrapListeners) {
    data = el.wrapListeners(data);
  }
  return data
}

function genDirectives (el, state) {
  var dirs = el.directives;
  if (!dirs) { return }
  var res = 'directives:[';
  var hasRuntime = false;
  var i, l, dir, needRuntime;
  for (i = 0, l = dirs.length; i < l; i++) {
    dir = dirs[i];
    needRuntime = true;
    var gen = state.directives[dir.name];
    if (gen) {
      // compile-time directive that manipulates AST.
      // returns true if it also needs a runtime counterpart.
      needRuntime = !!gen(el, dir, state.warn);
    }
    if (needRuntime) {
      hasRuntime = true;
      res += "{name:\"" + (dir.name) + "\",rawName:\"" + (dir.rawName) + "\"" + (dir.value ? (",value:(" + (dir.value) + "),expression:" + (JSON.stringify(dir.value))) : '') + (dir.arg ? (",arg:" + (dir.isDynamicArg ? dir.arg : ("\"" + (dir.arg) + "\""))) : '') + (dir.modifiers ? (",modifiers:" + (JSON.stringify(dir.modifiers))) : '') + "},";
    }
  }
  if (hasRuntime) {
    return res.slice(0, -1) + ']'
  }
}

function genInlineTemplate (el, state) {
  var ast = el.children[0];
  if (el.children.length !== 1 || ast.type !== 1) {
    state.warn(
      'Inline-template components must have exactly one child element.',
      { start: el.start }
    );
  }
  if (ast && ast.type === 1) {
    var inlineRenderFns = generate(ast, state.options);
    return ("inlineTemplate:{render:function(){" + (inlineRenderFns.render) + "},staticRenderFns:[" + (inlineRenderFns.staticRenderFns.map(function (code) { return ("function(){" + code + "}"); }).join(',')) + "]}")
  }
}

function genScopedSlots (
  el,
  slots,
  state
) {
  // by default scoped slots are considered "stable", this allows child
  // components with only scoped slots to skip forced updates from parent.
  // but in some cases we have to bail-out of this optimization
  // for example if the slot contains dynamic names, has v-if or v-for on them...
  var needsForceUpdate = el.for || Object.keys(slots).some(function (key) {
    var slot = slots[key];
    return (
      slot.slotTargetDynamic ||
      slot.if ||
      slot.for ||
      containsSlotChild(slot) // is passing down slot from parent which may be dynamic
    )
  });

  // #9534: if a component with scoped slots is inside a conditional branch,
  // it's possible for the same component to be reused but with different
  // compiled slot content. To avoid that, we generate a unique key based on
  // the generated code of all the slot contents.
  var needsKey = !!el.if;

  // OR when it is inside another scoped slot or v-for (the reactivity may be
  // disconnected due to the intermediate scope variable)
  // #9438, #9506
  // TODO: this can be further optimized by properly analyzing in-scope bindings
  // and skip force updating ones that do not actually use scope variables.
  if (!needsForceUpdate) {
    var parent = el.parent;
    while (parent) {
      if (
        (parent.slotScope && parent.slotScope !== emptySlotScopeToken) ||
        parent.for
      ) {
        needsForceUpdate = true;
        break
      }
      if (parent.if) {
        needsKey = true;
      }
      parent = parent.parent;
    }
  }

  var generatedSlots = Object.keys(slots)
    .map(function (key) { return genScopedSlot(slots[key], state); })
    .join(',');

  return ("scopedSlots:_u([" + generatedSlots + "]" + (needsForceUpdate ? ",null,true" : "") + (!needsForceUpdate && needsKey ? (",null,false," + (hash(generatedSlots))) : "") + ")")
}

function hash(str) {
  var hash = 5381;
  var i = str.length;
  while(i) {
    hash = (hash * 33) ^ str.charCodeAt(--i);
  }
  return hash >>> 0
}

function containsSlotChild (el) {
  if (el.type === 1) {
    if (el.tag === 'slot') {
      return true
    }
    return el.children.some(containsSlotChild)
  }
  return false
}

function genScopedSlot (
  el,
  state
) {
  var isLegacySyntax = el.attrsMap['slot-scope'];
  if (el.if && !el.ifProcessed && !isLegacySyntax) {
    return genIf(el, state, genScopedSlot, "null")
  }
  if (el.for && !el.forProcessed) {
    return genFor(el, state, genScopedSlot)
  }
  var slotScope = el.slotScope === emptySlotScopeToken
    ? ""
    : String(el.slotScope);
  var fn = "function(" + slotScope + "){" +
    "return " + (el.tag === 'template'
      ? el.if && isLegacySyntax
        ? ("(" + (el.if) + ")?" + (genChildren(el, state) || 'undefined') + ":undefined")
        : genChildren(el, state) || 'undefined'
      : genElement(el, state)) + "}";
  // reverse proxy v-slot without scope on this.$slots
  var reverseProxy = slotScope ? "" : ",proxy:true";
  return ("{key:" + (el.slotTarget || "\"default\"") + ",fn:" + fn + reverseProxy + "}")
}

function genChildren (
  el,
  state,
  checkSkip,
  altGenElement,
  altGenNode
) {
  var children = el.children;
  if (children.length) {
    var el$1 = children[0];
    // optimize single v-for
    if (children.length === 1 &&
      el$1.for &&
      el$1.tag !== 'template' &&
      el$1.tag !== 'slot'
    ) {
      var normalizationType = checkSkip
        ? state.maybeComponent(el$1) ? ",1" : ",0"
        : "";
      return ("" + ((altGenElement || genElement)(el$1, state)) + normalizationType)
    }
    var normalizationType$1 = checkSkip
      ? getNormalizationType(children, state.maybeComponent)
      : 0;
    var gen = altGenNode || genNode;
    return ("[" + (children.map(function (c) { return gen(c, state); }).join(',')) + "]" + (normalizationType$1 ? ("," + normalizationType$1) : ''))
  }
}

// determine the normalization needed for the children array.
// 0: no normalization needed
// 1: simple normalization needed (possible 1-level deep nested array)
// 2: full normalization needed
function getNormalizationType (
  children,
  maybeComponent
) {
  var res = 0;
  for (var i = 0; i < children.length; i++) {
    var el = children[i];
    if (el.type !== 1) {
      continue
    }
    if (needsNormalization(el) ||
        (el.ifConditions && el.ifConditions.some(function (c) { return needsNormalization(c.block); }))) {
      res = 2;
      break
    }
    if (maybeComponent(el) ||
        (el.ifConditions && el.ifConditions.some(function (c) { return maybeComponent(c.block); }))) {
      res = 1;
    }
  }
  return res
}

function needsNormalization (el) {
  return el.for !== undefined || el.tag === 'template' || el.tag === 'slot'
}

function genNode (node, state) {
  if (node.type === 1) {
    return genElement(node, state)
  } else if (node.type === 3 && node.isComment) {
    return genComment(node)
  } else {
    return genText(node)
  }
}

function genText (text) {
  return ("_v(" + (text.type === 2
    ? text.expression // no need for () because already wrapped in _s()
    : transformSpecialNewlines(JSON.stringify(text.text))) + ")")
}

function genComment (comment) {
  return ("_e(" + (JSON.stringify(comment.text)) + ")")
}

function genSlot (el, state) {
  var slotName = el.slotName || '"default"';
  var children = genChildren(el, state);
  var res = "_t(" + slotName + (children ? ("," + children) : '');
  var attrs = el.attrs || el.dynamicAttrs
    ? genProps((el.attrs || []).concat(el.dynamicAttrs || []).map(function (attr) { return ({
        // slot props are camelized
        name: camelize(attr.name),
        value: attr.value,
        dynamic: attr.dynamic
      }); }))
    : null;
  var bind$$1 = el.attrsMap['v-bind'];
  if ((attrs || bind$$1) && !children) {
    res += ",null";
  }
  if (attrs) {
    res += "," + attrs;
  }
  if (bind$$1) {
    res += (attrs ? '' : ',null') + "," + bind$$1;
  }
  return res + ')'
}

// componentName is el.component, take it as argument to shun flow's pessimistic refinement
function genComponent (
  componentName,
  el,
  state
) {
  var children = el.inlineTemplate ? null : genChildren(el, state, true);
  return ("_c(" + componentName + "," + (genData$2(el, state)) + (children ? ("," + children) : '') + ")")
}

function genProps (props) {
  var staticProps = "";
  var dynamicProps = "";
  for (var i = 0; i < props.length; i++) {
    var prop = props[i];
    var value = transformSpecialNewlines(prop.value);
    if (prop.dynamic) {
      dynamicProps += (prop.name) + "," + value + ",";
    } else {
      staticProps += "\"" + (prop.name) + "\":" + value + ",";
    }
  }
  staticProps = "{" + (staticProps.slice(0, -1)) + "}";
  if (dynamicProps) {
    return ("_d(" + staticProps + ",[" + (dynamicProps.slice(0, -1)) + "])")
  } else {
    return staticProps
  }
}

// #3895, #4268
function transformSpecialNewlines (text) {
  return text
    .replace(/\u2028/g, '\\u2028')
    .replace(/\u2029/g, '\\u2029')
}

/*  */



// these keywords should not appear inside expressions, but operators like
// typeof, instanceof and in are allowed
var prohibitedKeywordRE = new RegExp('\\b' + (
  'do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' +
  'super,throw,while,yield,delete,export,import,return,switch,default,' +
  'extends,finally,continue,debugger,function,arguments'
).split(',').join('\\b|\\b') + '\\b');

// these unary operators should not be used as property/method names
var unaryOperatorsRE = new RegExp('\\b' + (
  'delete,typeof,void'
).split(',').join('\\s*\\([^\\)]*\\)|\\b') + '\\s*\\([^\\)]*\\)');

// strip strings in expressions
var stripStringRE = /'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`/g;

// detect problematic expressions in a template
function detectErrors (ast, warn) {
  if (ast) {
    checkNode(ast, warn);
  }
}

function checkNode (node, warn) {
  if (node.type === 1) {
    for (var name in node.attrsMap) {
      if (dirRE.test(name)) {
        var value = node.attrsMap[name];
        if (value) {
          var range = node.rawAttrsMap[name];
          if (name === 'v-for') {
            checkFor(node, ("v-for=\"" + value + "\""), warn, range);
          } else if (onRE.test(name)) {
            checkEvent(value, (name + "=\"" + value + "\""), warn, range);
          } else {
            checkExpression(value, (name + "=\"" + value + "\""), warn, range);
          }
        }
      }
    }
    if (node.children) {
      for (var i = 0; i < node.children.length; i++) {
        checkNode(node.children[i], warn);
      }
    }
  } else if (node.type === 2) {
    checkExpression(node.expression, node.text, warn, node);
  }
}

function checkEvent (exp, text, warn, range) {
  var stipped = exp.replace(stripStringRE, '');
  var keywordMatch = stipped.match(unaryOperatorsRE);
  if (keywordMatch && stipped.charAt(keywordMatch.index - 1) !== '$') {
    warn(
      "avoid using JavaScript unary operator as property name: " +
      "\"" + (keywordMatch[0]) + "\" in expression " + (text.trim()),
      range
    );
  }
  checkExpression(exp, text, warn, range);
}

function checkFor (node, text, warn, range) {
  checkExpression(node.for || '', text, warn, range);
  checkIdentifier(node.alias, 'v-for alias', text, warn, range);
  checkIdentifier(node.iterator1, 'v-for iterator', text, warn, range);
  checkIdentifier(node.iterator2, 'v-for iterator', text, warn, range);
}

function checkIdentifier (
  ident,
  type,
  text,
  warn,
  range
) {
  if (typeof ident === 'string') {
    try {
      new Function(("var " + ident + "=_"));
    } catch (e) {
      warn(("invalid " + type + " \"" + ident + "\" in expression: " + (text.trim())), range);
    }
  }
}

function checkExpression (exp, text, warn, range) {
  try {
    new Function(("return " + exp));
  } catch (e) {
    var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);
    if (keywordMatch) {
      warn(
        "avoid using JavaScript keyword as property name: " +
        "\"" + (keywordMatch[0]) + "\"\n  Raw expression: " + (text.trim()),
        range
      );
    } else {
      warn(
        "invalid expression: " + (e.message) + " in\n\n" +
        "    " + exp + "\n\n" +
        "  Raw expression: " + (text.trim()) + "\n",
        range
      );
    }
  }
}

/*  */

var range = 2;

function generateCodeFrame (
  source,
  start,
  end
) {
  if ( start === void 0 ) start = 0;
  if ( end === void 0 ) end = source.length;

  var lines = source.split(/\r?\n/);
  var count = 0;
  var res = [];
  for (var i = 0; i < lines.length; i++) {
    count += lines[i].length + 1;
    if (count >= start) {
      for (var j = i - range; j <= i + range || end > count; j++) {
        if (j < 0 || j >= lines.length) { continue }
        res.push(("" + (j + 1) + (repeat$1(" ", 3 - String(j + 1).length)) + "|  " + (lines[j])));
        var lineLength = lines[j].length;
        if (j === i) {
          // push underline
          var pad = start - (count - lineLength) + 1;
          var length = end > count ? lineLength - pad : end - start;
          res.push("   |  " + repeat$1(" ", pad) + repeat$1("^", length));
        } else if (j > i) {
          if (end > count) {
            var length$1 = Math.min(end - count, lineLength);
            res.push("   |  " + repeat$1("^", length$1));
          }
          count += lineLength + 1;
        }
      }
      break
    }
  }
  return res.join('\n')
}

function repeat$1 (str, n) {
  var result = '';
  if (n > 0) {
    while (true) { // eslint-disable-line
      if (n & 1) { result += str; }
      n >>>= 1;
      if (n <= 0) { break }
      str += str;
    }
  }
  return result
}

/*  */



function createFunction (code, errors) {
  try {
    return new Function(code)
  } catch (err) {
    errors.push({ err: err, code: code });
    return noop
  }
}

function createCompileToFunctionFn (compile) {
  var cache = Object.create(null);

  return function compileToFunctions (
    template,
    options,
    vm
  ) {
    options = extend({}, options);
    var warn$$1 = options.warn || warn;
    delete options.warn;

    /* istanbul ignore if */
    {
      // detect possible CSP restriction
      try {
        new Function('return 1');
      } catch (e) {
        if (e.toString().match(/unsafe-eval|CSP/)) {
          warn$$1(
            'It seems you are using the standalone build of Vue.js in an ' +
            'environment with Content Security Policy that prohibits unsafe-eval. ' +
            'The template compiler cannot work in this environment. Consider ' +
            'relaxing the policy to allow unsafe-eval or pre-compiling your ' +
            'templates into render functions.'
          );
        }
      }
    }

    // check cache
    var key = options.delimiters
      ? String(options.delimiters) + template
      : template;
    if (cache[key]) {
      return cache[key]
    }

    // compile
    var compiled = compile(template, options);

    // check compilation errors/tips
    {
      if (compiled.errors && compiled.errors.length) {
        if (options.outputSourceRange) {
          compiled.errors.forEach(function (e) {
            warn$$1(
              "Error compiling template:\n\n" + (e.msg) + "\n\n" +
              generateCodeFrame(template, e.start, e.end),
              vm
            );
          });
        } else {
          warn$$1(
            "Error compiling template:\n\n" + template + "\n\n" +
            compiled.errors.map(function (e) { return ("- " + e); }).join('\n') + '\n',
            vm
          );
        }
      }
      if (compiled.tips && compiled.tips.length) {
        if (options.outputSourceRange) {
          compiled.tips.forEach(function (e) { return tip(e.msg, vm); });
        } else {
          compiled.tips.forEach(function (msg) { return tip(msg, vm); });
        }
      }
    }

    // turn code into functions
    var res = {};
    var fnGenErrors = [];
    res.render = createFunction(compiled.render, fnGenErrors);
    res.staticRenderFns = compiled.staticRenderFns.map(function (code) {
      return createFunction(code, fnGenErrors)
    });

    // check function generation errors.
    // this should only happen if there is a bug in the compiler itself.
    // mostly for codegen development use
    /* istanbul ignore if */
    {
      if ((!compiled.errors || !compiled.errors.length) && fnGenErrors.length) {
        warn$$1(
          "Failed to generate render function:\n\n" +
          fnGenErrors.map(function (ref) {
            var err = ref.err;
            var code = ref.code;

            return ((err.toString()) + " in\n\n" + code + "\n");
        }).join('\n'),
          vm
        );
      }
    }

    return (cache[key] = res)
  }
}

/*  */

function createCompilerCreator (baseCompile) {
  return function createCompiler (baseOptions) {
    function compile (
      template,
      options
    ) {
      var finalOptions = Object.create(baseOptions);
      var errors = [];
      var tips = [];

      var warn = function (msg, range, tip) {
        (tip ? tips : errors).push(msg);
      };

      if (options) {
        if (options.outputSourceRange) {
          // $flow-disable-line
          var leadingSpaceLength = template.match(/^\s*/)[0].length;

          warn = function (msg, range, tip) {
            var data = { msg: msg };
            if (range) {
              if (range.start != null) {
                data.start = range.start + leadingSpaceLength;
              }
              if (range.end != null) {
                data.end = range.end + leadingSpaceLength;
              }
            }
            (tip ? tips : errors).push(data);
          };
        }
        // merge custom modules
        if (options.modules) {
          finalOptions.modules =
            (baseOptions.modules || []).concat(options.modules);
        }
        // merge custom directives
        if (options.directives) {
          finalOptions.directives = extend(
            Object.create(baseOptions.directives || null),
            options.directives
          );
        }
        // copy other options
        for (var key in options) {
          if (key !== 'modules' && key !== 'directives') {
            finalOptions[key] = options[key];
          }
        }
      }

      finalOptions.warn = warn;

      var compiled = baseCompile(template.trim(), finalOptions);
      {
        detectErrors(compiled.ast, warn);
      }
      compiled.errors = errors;
      compiled.tips = tips;
      return compiled
    }

    return {
      compile: compile,
      compileToFunctions: createCompileToFunctionFn(compile)
    }
  }
}

/*  */

// `createCompilerCreator` allows creating compilers that use alternative
// parser/optimizer/codegen, e.g the SSR optimizing compiler.
// Here we just export a default compiler using the default parts.
var createCompiler = createCompilerCreator(function baseCompile (
  template,
  options
) {
  var ast = parse(template.trim(), options);
  if (options.optimize !== false) {
    optimize(ast, options);
  }
  var code = generate(ast, options);
  return {
    ast: ast,
    render: code.render,
    staticRenderFns: code.staticRenderFns
  }
});

/*  */

var ref$1 = createCompiler(baseOptions);
var compile = ref$1.compile;
var compileToFunctions = ref$1.compileToFunctions;

/*  */

// check whether current browser encodes a char inside attribute values
var div;
function getShouldDecode (href) {
  div = div || document.createElement('div');
  div.innerHTML = href ? "<a href=\"\n\"/>" : "<div a=\"\n\"/>";
  return div.innerHTML.indexOf('&#10;') > 0
}

// #3663: IE encodes newlines inside attribute values while other browsers don't
var shouldDecodeNewlines = inBrowser ? getShouldDecode(false) : false;
// #6828: chrome encodes content in a[href]
var shouldDecodeNewlinesForHref = inBrowser ? getShouldDecode(true) : false;

/*  */

var idToTemplate = cached(function (id) {
  var el = query(id);
  return el && el.innerHTML
});

var mount = Vue.prototype.$mount;
Vue.prototype.$mount = function (
  el,
  hydrating
) {
  el = el && query(el);

  /* istanbul ignore if */
  if (el === document.body || el === document.documentElement) {
    warn(
      "Do not mount Vue to <html> or <body> - mount to normal elements instead."
    );
    return this
  }

  var options = this.$options;
  // resolve template/el and convert to render function
  if (!options.render) {
    var template = options.template;
    if (template) {
      if (typeof template === 'string') {
        if (template.charAt(0) === '#') {
          template = idToTemplate(template);
          /* istanbul ignore if */
          if (!template) {
            warn(
              ("Template element not found or is empty: " + (options.template)),
              this
            );
          }
        }
      } else if (template.nodeType) {
        template = template.innerHTML;
      } else {
        {
          warn('invalid template option:' + template, this);
        }
        return this
      }
    } else if (el) {
      template = getOuterHTML(el);
    }
    if (template) {
      /* istanbul ignore if */
      if (config.performance && mark) {
        mark('compile');
      }

      var ref = compileToFunctions(template, {
        outputSourceRange: "development" !== 'production',
        shouldDecodeNewlines: shouldDecodeNewlines,
        shouldDecodeNewlinesForHref: shouldDecodeNewlinesForHref,
        delimiters: options.delimiters,
        comments: options.comments
      }, this);
      var render = ref.render;
      var staticRenderFns = ref.staticRenderFns;
      options.render = render;
      options.staticRenderFns = staticRenderFns;

      /* istanbul ignore if */
      if (config.performance && mark) {
        mark('compile end');
        measure(("vue " + (this._name) + " compile"), 'compile', 'compile end');
      }
    }
  }
  return mount.call(this, el, hydrating)
};

/**
 * Get outerHTML of elements, taking care
 * of SVG elements in IE as well.
 */
function getOuterHTML (el) {
  if (el.outerHTML) {
    return el.outerHTML
  } else {
    var container = document.createElement('div');
    container.appendChild(el.cloneNode(true));
    return container.innerHTML
  }
}

Vue.compile = compileToFunctions;

module.exports = Vue;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../../timers-browserify/main.js */ "./node_modules/timers-browserify/main.js").setImmediate))

/***/ }),

/***/ "./node_modules/vue/dist/vue.common.js":
/*!*********************************************!*\
  !*** ./node_modules/vue/dist/vue.common.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

if (false) {} else {
  module.exports = __webpack_require__(/*! ./vue.common.dev.js */ "./node_modules/vue/dist/vue.common.dev.js")
}


/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./resources/js/app.js":
/*!*****************************!*\
  !*** ./resources/js/app.js ***!
  \*****************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "./node_modules/vue/dist/vue.common.js");
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var vue_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vue-router */ "./node_modules/vue-router/dist/vue-router.esm.js");
/* harmony import */ var _quasar_mat_umd_min_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./quasar.mat.umd.min.js */ "./resources/js/quasar.mat.umd.min.js");
/* harmony import */ var _quasar_mat_umd_min_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_quasar_mat_umd_min_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _components_lista_cidades__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./components/lista-cidades */ "./resources/js/components/lista-cidades.vue");
/* harmony import */ var _components_principal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./components/principal */ "./resources/js/components/principal.vue");
/* harmony import */ var _components_lista_cidadesadd__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./components/lista-cidadesadd */ "./resources/js/components/lista-cidadesadd.vue");
/* harmony import */ var _components_lista_cidadesedit__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./components/lista-cidadesedit */ "./resources/js/components/lista-cidadesedit.vue");




__webpack_require__(/*! ./i18n.pt-br.umd.min.js */ "./resources/js/i18n.pt-br.umd.min.js");

__webpack_require__(/*! ./quasar.ie.polyfills.umd.min.js */ "./resources/js/quasar.ie.polyfills.umd.min.js");

vue__WEBPACK_IMPORTED_MODULE_0___default.a.use(vue_router__WEBPACK_IMPORTED_MODULE_1__["default"]);




var routes = [{
  path: '/',
  component: _components_principal__WEBPACK_IMPORTED_MODULE_4__["default"]
}, {
  path: '/cidades',
  component: _components_lista_cidades__WEBPACK_IMPORTED_MODULE_3__["default"]
}, {
  path: '/cidades-add',
  component: _components_lista_cidadesadd__WEBPACK_IMPORTED_MODULE_5__["default"]
}, {
  path: '/cidades-edit',
  component: _components_lista_cidadesedit__WEBPACK_IMPORTED_MODULE_6__["default"]
}];
var router = new vue_router__WEBPACK_IMPORTED_MODULE_1__["default"]({
  routes: routes,
  mode: 'history'
});
var app = new vue__WEBPACK_IMPORTED_MODULE_0___default.a({
  el: '#app',
  router: router,
  data: function data() {
    return {
      version: _quasar_mat_umd_min_js__WEBPACK_IMPORTED_MODULE_2___default.a.version,
      drawerState: true,
      cidades: []
    };
  },
  methods: {
    launch: function launch(url) {
      //Quasar.utils.openURL(url)
      window.location.href = url;
    },
    launchurl: function launchurl(url) {
      _quasar_mat_umd_min_js__WEBPACK_IMPORTED_MODULE_2___default.a.utils.openURL(url);
    }
  },
  components: {
    Principal: _components_principal__WEBPACK_IMPORTED_MODULE_4__["default"],
    Cidades: _components_lista_cidades__WEBPACK_IMPORTED_MODULE_3__["default"]
  }
});

/***/ }),

/***/ "./resources/js/components/lista-cidades.vue":
/*!***************************************************!*\
  !*** ./resources/js/components/lista-cidades.vue ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _lista_cidades_vue_vue_type_template_id_6cb632ca___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lista-cidades.vue?vue&type=template&id=6cb632ca& */ "./resources/js/components/lista-cidades.vue?vue&type=template&id=6cb632ca&");
/* harmony import */ var _lista_cidades_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lista-cidades.vue?vue&type=script&lang=js& */ "./resources/js/components/lista-cidades.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport *//* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");





/* normalize component */

var component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__["default"])(
  _lista_cidades_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
  _lista_cidades_vue_vue_type_template_id_6cb632ca___WEBPACK_IMPORTED_MODULE_0__["render"],
  _lista_cidades_vue_vue_type_template_id_6cb632ca___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "resources/js/components/lista-cidades.vue"
/* harmony default export */ __webpack_exports__["default"] = (component.exports);

/***/ }),

/***/ "./resources/js/components/lista-cidades.vue?vue&type=script&lang=js&":
/*!****************************************************************************!*\
  !*** ./resources/js/components/lista-cidades.vue?vue&type=script&lang=js& ***!
  \****************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_lista_cidades_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/babel-loader/lib??ref--4-0!../../../node_modules/vue-loader/lib??vue-loader-options!./lista-cidades.vue?vue&type=script&lang=js& */ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/lista-cidades.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__["default"] = (_node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_lista_cidades_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]); 

/***/ }),

/***/ "./resources/js/components/lista-cidades.vue?vue&type=template&id=6cb632ca&":
/*!**********************************************************************************!*\
  !*** ./resources/js/components/lista-cidades.vue?vue&type=template&id=6cb632ca& ***!
  \**********************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_lista_cidades_vue_vue_type_template_id_6cb632ca___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../node_modules/vue-loader/lib??vue-loader-options!./lista-cidades.vue?vue&type=template&id=6cb632ca& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/lista-cidades.vue?vue&type=template&id=6cb632ca&");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_lista_cidades_vue_vue_type_template_id_6cb632ca___WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_lista_cidades_vue_vue_type_template_id_6cb632ca___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });



/***/ }),

/***/ "./resources/js/components/lista-cidadesadd.vue":
/*!******************************************************!*\
  !*** ./resources/js/components/lista-cidadesadd.vue ***!
  \******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _lista_cidadesadd_vue_vue_type_template_id_50c02d47___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lista-cidadesadd.vue?vue&type=template&id=50c02d47& */ "./resources/js/components/lista-cidadesadd.vue?vue&type=template&id=50c02d47&");
/* harmony import */ var _lista_cidadesadd_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lista-cidadesadd.vue?vue&type=script&lang=js& */ "./resources/js/components/lista-cidadesadd.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport *//* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");





/* normalize component */

var component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__["default"])(
  _lista_cidadesadd_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
  _lista_cidadesadd_vue_vue_type_template_id_50c02d47___WEBPACK_IMPORTED_MODULE_0__["render"],
  _lista_cidadesadd_vue_vue_type_template_id_50c02d47___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "resources/js/components/lista-cidadesadd.vue"
/* harmony default export */ __webpack_exports__["default"] = (component.exports);

/***/ }),

/***/ "./resources/js/components/lista-cidadesadd.vue?vue&type=script&lang=js&":
/*!*******************************************************************************!*\
  !*** ./resources/js/components/lista-cidadesadd.vue?vue&type=script&lang=js& ***!
  \*******************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_lista_cidadesadd_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/babel-loader/lib??ref--4-0!../../../node_modules/vue-loader/lib??vue-loader-options!./lista-cidadesadd.vue?vue&type=script&lang=js& */ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/lista-cidadesadd.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__["default"] = (_node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_lista_cidadesadd_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]); 

/***/ }),

/***/ "./resources/js/components/lista-cidadesadd.vue?vue&type=template&id=50c02d47&":
/*!*************************************************************************************!*\
  !*** ./resources/js/components/lista-cidadesadd.vue?vue&type=template&id=50c02d47& ***!
  \*************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_lista_cidadesadd_vue_vue_type_template_id_50c02d47___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../node_modules/vue-loader/lib??vue-loader-options!./lista-cidadesadd.vue?vue&type=template&id=50c02d47& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/lista-cidadesadd.vue?vue&type=template&id=50c02d47&");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_lista_cidadesadd_vue_vue_type_template_id_50c02d47___WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_lista_cidadesadd_vue_vue_type_template_id_50c02d47___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });



/***/ }),

/***/ "./resources/js/components/lista-cidadesedit.vue":
/*!*******************************************************!*\
  !*** ./resources/js/components/lista-cidadesedit.vue ***!
  \*******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _lista_cidadesedit_vue_vue_type_template_id_730c22d4___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lista-cidadesedit.vue?vue&type=template&id=730c22d4& */ "./resources/js/components/lista-cidadesedit.vue?vue&type=template&id=730c22d4&");
/* harmony import */ var _lista_cidadesedit_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lista-cidadesedit.vue?vue&type=script&lang=js& */ "./resources/js/components/lista-cidadesedit.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport *//* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");





/* normalize component */

var component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__["default"])(
  _lista_cidadesedit_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
  _lista_cidadesedit_vue_vue_type_template_id_730c22d4___WEBPACK_IMPORTED_MODULE_0__["render"],
  _lista_cidadesedit_vue_vue_type_template_id_730c22d4___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "resources/js/components/lista-cidadesedit.vue"
/* harmony default export */ __webpack_exports__["default"] = (component.exports);

/***/ }),

/***/ "./resources/js/components/lista-cidadesedit.vue?vue&type=script&lang=js&":
/*!********************************************************************************!*\
  !*** ./resources/js/components/lista-cidadesedit.vue?vue&type=script&lang=js& ***!
  \********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_lista_cidadesedit_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/babel-loader/lib??ref--4-0!../../../node_modules/vue-loader/lib??vue-loader-options!./lista-cidadesedit.vue?vue&type=script&lang=js& */ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/lista-cidadesedit.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__["default"] = (_node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_lista_cidadesedit_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]); 

/***/ }),

/***/ "./resources/js/components/lista-cidadesedit.vue?vue&type=template&id=730c22d4&":
/*!**************************************************************************************!*\
  !*** ./resources/js/components/lista-cidadesedit.vue?vue&type=template&id=730c22d4& ***!
  \**************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_lista_cidadesedit_vue_vue_type_template_id_730c22d4___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../node_modules/vue-loader/lib??vue-loader-options!./lista-cidadesedit.vue?vue&type=template&id=730c22d4& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/lista-cidadesedit.vue?vue&type=template&id=730c22d4&");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_lista_cidadesedit_vue_vue_type_template_id_730c22d4___WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_lista_cidadesedit_vue_vue_type_template_id_730c22d4___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });



/***/ }),

/***/ "./resources/js/components/principal.vue":
/*!***********************************************!*\
  !*** ./resources/js/components/principal.vue ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _principal_vue_vue_type_template_id_dfdbb91a___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./principal.vue?vue&type=template&id=dfdbb91a& */ "./resources/js/components/principal.vue?vue&type=template&id=dfdbb91a&");
/* harmony import */ var _principal_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./principal.vue?vue&type=script&lang=js& */ "./resources/js/components/principal.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport *//* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");





/* normalize component */

var component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__["default"])(
  _principal_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
  _principal_vue_vue_type_template_id_dfdbb91a___WEBPACK_IMPORTED_MODULE_0__["render"],
  _principal_vue_vue_type_template_id_dfdbb91a___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "resources/js/components/principal.vue"
/* harmony default export */ __webpack_exports__["default"] = (component.exports);

/***/ }),

/***/ "./resources/js/components/principal.vue?vue&type=script&lang=js&":
/*!************************************************************************!*\
  !*** ./resources/js/components/principal.vue?vue&type=script&lang=js& ***!
  \************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_principal_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/babel-loader/lib??ref--4-0!../../../node_modules/vue-loader/lib??vue-loader-options!./principal.vue?vue&type=script&lang=js& */ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/principal.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__["default"] = (_node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_principal_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]); 

/***/ }),

/***/ "./resources/js/components/principal.vue?vue&type=template&id=dfdbb91a&":
/*!******************************************************************************!*\
  !*** ./resources/js/components/principal.vue?vue&type=template&id=dfdbb91a& ***!
  \******************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_principal_vue_vue_type_template_id_dfdbb91a___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../node_modules/vue-loader/lib??vue-loader-options!./principal.vue?vue&type=template&id=dfdbb91a& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/principal.vue?vue&type=template&id=dfdbb91a&");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_principal_vue_vue_type_template_id_dfdbb91a___WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_principal_vue_vue_type_template_id_dfdbb91a___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });



/***/ }),

/***/ "./resources/js/i18n.pt-br.umd.min.js":
/*!********************************************!*\
  !*** ./resources/js/i18n.pt-br.umd.min.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*!
 * Quasar Framework v0.17.8
 * (c) 2016-present Razvan Stoenescu
 * Released under the MIT License.
 */
!function (e, r) {
  "object" == ( false ? undefined : _typeof(exports)) && "undefined" != typeof module ? module.exports = r() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (r),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : (undefined);
}(this, function () {
  "use strict";

  return {
    lang: "pt-br",
    label: {
      clear: "Limpar",
      ok: "OK",
      cancel: "Cancelar",
      close: "Fechar",
      set: "Escolher",
      select: "Selecionar",
      reset: "Redefinir",
      remove: "Remover",
      update: "Atualizar",
      create: "Criar",
      search: "Buscar",
      filter: "Filtrar",
      refresh: "Recarregar"
    },
    date: {
      days: "Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"),
      daysShort: "Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),
      months: "Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro".split("_"),
      monthsShort: "Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),
      firstDayOfWeek: 0,
      format24h: !0
    },
    pullToRefresh: {
      pull: "Puxe para recarregar",
      release: "Solte para recarregar",
      refresh: "Recarregando..."
    },
    table: {
      noData: "Sem dados disponíveis",
      noResults: "Nenhum dado correspondente encontrado",
      loading: "Carregando...",
      selectedRecords: function selectedRecords(e) {
        return e > 0 ? e + " registro" + (1 === e ? " selecionado" : "s selecionados") + "." : "Nenhum registro selecionado.";
      },
      recordsPerPage: "Registros por página:",
      allRows: "Todos",
      pagination: function pagination(e, r, a) {
        return e + "-" + r + " de " + a;
      },
      columns: "Colunas"
    },
    editor: {
      url: "URL",
      bold: "Negrito",
      italic: "Itálico",
      strikethrough: "Riscado",
      underline: "Sublinhado",
      unorderedList: "Lista não-ordenada",
      orderedList: "Lista ordenada",
      subscript: "Subscrito",
      superscript: "Sobrescrito",
      hyperlink: "Hyperlink",
      toggleFullscreen: "Tela cheia",
      quote: "Citação",
      left: "Alinhado à esquerda",
      center: "Alinhado ao centro",
      right: "Alinhado à direita",
      justify: "Justificado",
      print: "Imprimir",
      outdent: "Diminuir indentação",
      indent: "Aumentar indentação",
      removeFormat: "Remover formatação",
      formatting: "Formatação",
      fontSize: "Tamanho de fonte",
      align: "Alinhar",
      hr: "Inserir divisória horizontal",
      undo: "Desfazer",
      redo: "Refazer",
      header1: "Cabeçalho 1",
      header2: "Cabeçalho 2",
      header3: "Cabeçalho 3",
      header4: "Cabeçalho 4",
      header5: "Cabeçalho 5",
      header6: "Cabeçalho 6",
      paragraph: "Parágrafo",
      code: "Código",
      size1: "Muito pequeno",
      size2: "Pequeno",
      size3: "Normal",
      size4: "Médio",
      size5: "Grande",
      size6: "Enorme",
      size7: "Máximo",
      defaultFont: "Fonte padrão"
    },
    tree: {
      noNodes: "Sem nós disponíveis",
      noResults: "Nenhum nó correspondente encontrado"
    }
  };
});

/***/ }),

/***/ "./resources/js/quasar.ie.polyfills.umd.min.js":
/*!*****************************************************!*\
  !*** ./resources/js/quasar.ie.polyfills.umd.min.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process, global) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*!
 * Quasar Framework v0.17.8
 * (c) 2016-present Razvan Stoenescu
 * Released under the MIT License.
 */
!function (t, e) {
  "object" == ( false ? undefined : _typeof(exports)) && "undefined" != typeof module ? e() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (e),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;
}(0, function () {
  "use strict";

  function t(t) {
    return "function" == typeof t;
  }

  "undefined" != typeof window && function (t) {
    try {
      return void new e("test");
    } catch (t) {}

    var e = function e(_e, n) {
      n = n || {};
      var r = document.createEvent("MouseEvent");
      return r.initMouseEvent(_e, n.bubbles || !1, n.cancelable || !1, n.view || t, n.detail || 0, n.screenX || 0, n.screenY || 0, n.clientX || 0, n.clientY || 0, n.ctrlKey || !1, n.altKey || !1, n.shiftKey || !1, n.metaKey || !1, n.button || 0, n.relatedTarget || null), r;
    };

    e.prototype = Event.prototype, t.MouseEvent = e;
  }(window), Array.prototype.findIndex || Object.defineProperty(Array.prototype, "findIndex", {
    value: function value(t) {
      if (null == this) throw new TypeError("Array.prototype.findIndex called on null or undefined");
      if ("function" != typeof t) throw new TypeError("predicate must be a function");

      for (var e = Object(this), n = e.length >>> 0, r = arguments[1], o = 0; o < n; o++) {
        if (t.call(r, e[o], o, e)) return o;
      }

      return -1;
    }
  });

  var e = Array.isArray ? Array.isArray : function (t) {
    return "[object Array]" === Object.prototype.toString.call(t);
  },
      n = 0,
      r = void 0,
      o = void 0,
      i = function i(t, e) {
    h[n] = t, h[n + 1] = e, 2 === (n += 2) && (o ? o(p) : b());
  };

  var s = "undefined" != typeof window ? window : void 0,
      u = s || {},
      c = u.MutationObserver || u.WebKitMutationObserver,
      a = "undefined" == typeof self && "undefined" != typeof process && "[object process]" === {}.toString.call(process),
      f = "undefined" != typeof Uint8ClampedArray && "undefined" != typeof importScripts && "undefined" != typeof MessageChannel;

  function l() {
    var t = setTimeout;
    return function () {
      return t(p, 1);
    };
  }

  var h = new Array(1e3);

  function p() {
    for (var t = 0; t < n; t += 2) {
      (0, h[t])(h[t + 1]), h[t] = void 0, h[t + 1] = void 0;
    }

    n = 0;
  }

  var v,
      d,
      y,
      _,
      b = void 0;

  function w(t, e) {
    var n = this,
        r = new this.constructor(A);
    void 0 === r[g] && q(r);
    var o = n._state;

    if (o) {
      var s = arguments[o - 1];
      i(function () {
        return I(o, r, s, n._result);
      });
    } else Y(n, r, t, e);

    return r;
  }

  function m(t) {
    if (t && "object" == _typeof(t) && t.constructor === this) return t;
    var e = new this(A);
    return O(e, t), e;
  }

  a ? b = function b() {
    return process.nextTick(p);
  } : c ? (d = 0, y = new c(p), _ = document.createTextNode(""), y.observe(_, {
    characterData: !0
  }), b = function b() {
    _.data = d = ++d % 2;
  }) : f ? ((v = new MessageChannel()).port1.onmessage = p, b = function b() {
    return v.port2.postMessage(0);
  }) : b = void 0 === s && "function" == "function" ? function () {
    try {
      var t = Function("return this")().require("vertx");

      return void 0 !== (r = t.runOnLoop || t.runOnContext) ? function () {
        r(p);
      } : l();
    } catch (t) {
      return l();
    }
  }() : l();
  var g = Math.random().toString(36).substring(2);

  function A() {}

  var E = void 0,
      j = 1,
      T = 2,
      M = {
    error: null
  };

  function S(t) {
    try {
      return t.then;
    } catch (t) {
      return M.error = t, M;
    }
  }

  function x(e, n, r) {
    n.constructor === e.constructor && r === w && n.constructor.resolve === m ? function (t, e) {
      e._state === j ? P(t, e._result) : e._state === T ? K(t, e._result) : Y(e, void 0, function (e) {
        return O(t, e);
      }, function (e) {
        return K(t, e);
      });
    }(e, n) : r === M ? (K(e, M.error), M.error = null) : void 0 === r ? P(e, n) : t(r) ? function (t, e, n) {
      i(function (t) {
        var r = !1,
            o = function (t, e, n, r) {
          try {
            t.call(e, n, r);
          } catch (t) {
            return t;
          }
        }(n, e, function (n) {
          r || (r = !0, e !== n ? O(t, n) : P(t, n));
        }, function (e) {
          r || (r = !0, K(t, e));
        }, t._label);

        !r && o && (r = !0, K(t, o));
      }, t);
    }(e, n, r) : P(e, n);
  }

  function O(t, e) {
    var n, r;
    t === e ? K(t, new TypeError("You cannot resolve a promise with itself")) : (r = _typeof(n = e), null === n || "object" !== r && "function" !== r ? P(t, e) : x(t, e, S(e)));
  }

  function C(t) {
    t._onerror && t._onerror(t._result), F(t);
  }

  function P(t, e) {
    t._state === E && (t._result = e, t._state = j, 0 !== t._subscribers.length && i(F, t));
  }

  function K(t, e) {
    t._state === E && (t._state = T, t._result = e, i(C, t));
  }

  function Y(t, e, n, r) {
    var o = t._subscribers,
        s = o.length;
    t._onerror = null, o[s] = e, o[s + j] = n, o[s + T] = r, 0 === s && t._state && i(F, t);
  }

  function F(t) {
    var e = t._subscribers,
        n = t._state;

    if (0 !== e.length) {
      for (var r = void 0, o = void 0, i = t._result, s = 0; s < e.length; s += 3) {
        r = e[s], o = e[s + n], r ? I(n, r, o, i) : o(i);
      }

      t._subscribers.length = 0;
    }
  }

  function I(e, n, r, o) {
    var i = t(r),
        s = void 0,
        u = void 0,
        c = void 0,
        a = void 0;

    if (i) {
      if ((s = function (t, e) {
        try {
          return t(e);
        } catch (t) {
          return M.error = t, M;
        }
      }(r, o)) === M ? (a = !0, u = s.error, s.error = null) : c = !0, n === s) return void K(n, new TypeError("A promises callback cannot return that same promise."));
    } else s = o, c = !0;

    n._state !== E || (i && c ? O(n, s) : a ? K(n, u) : e === j ? P(n, s) : e === T && K(n, s));
  }

  var k = 0;

  function q(t) {
    t[g] = k++, t._state = void 0, t._result = void 0, t._subscribers = [];
  }

  var X = function () {
    function t(t, n) {
      this._instanceConstructor = t, this.promise = new t(A), this.promise[g] || q(this.promise), e(n) ? (this.length = n.length, this._remaining = n.length, this._result = new Array(this.length), 0 === this.length ? P(this.promise, this._result) : (this.length = this.length || 0, this._enumerate(n), 0 === this._remaining && P(this.promise, this._result))) : K(this.promise, new Error("Array Methods must be provided an Array"));
    }

    return t.prototype._enumerate = function (t) {
      for (var e = 0; this._state === E && e < t.length; e++) {
        this._eachEntry(t[e], e);
      }
    }, t.prototype._eachEntry = function (t, e) {
      var n = this._instanceConstructor,
          r = n.resolve;

      if (r === m) {
        var o = S(t);
        if (o === w && t._state !== E) this._settledAt(t._state, e, t._result);else if ("function" != typeof o) this._remaining--, this._result[e] = t;else if (n === D) {
          var i = new n(A);
          x(i, t, o), this._willSettleAt(i, e);
        } else this._willSettleAt(new n(function (e) {
          return e(t);
        }), e);
      } else this._willSettleAt(r(t), e);
    }, t.prototype._settledAt = function (t, e, n) {
      var r = this.promise;
      r._state === E && (this._remaining--, t === T ? K(r, n) : this._result[e] = n), 0 === this._remaining && P(r, this._result);
    }, t.prototype._willSettleAt = function (t, e) {
      var n = this;
      Y(t, void 0, function (t) {
        return n._settledAt(j, e, t);
      }, function (t) {
        return n._settledAt(T, e, t);
      });
    }, t;
  }();

  var D = function () {
    function t(e) {
      this[g] = k++, this._result = this._state = void 0, this._subscribers = [], A !== e && ("function" != typeof e && function () {
        throw new TypeError("You must pass a resolver function as the first argument to the promise constructor");
      }(), this instanceof t ? function (t, e) {
        try {
          e(function (e) {
            O(t, e);
          }, function (e) {
            K(t, e);
          });
        } catch (e) {
          K(t, e);
        }
      }(this, e) : function () {
        throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
      }());
    }

    return t.prototype["catch"] = function (t) {
      return this.then(null, t);
    }, t.prototype["finally"] = function (t) {
      var e = this.constructor;
      return this.then(function (n) {
        return e.resolve(t()).then(function () {
          return n;
        });
      }, function (n) {
        return e.resolve(t()).then(function () {
          throw n;
        });
      });
    }, t;
  }();

  D.prototype.then = w, D.all = function (t) {
    return new X(this, t).promise;
  }, D.race = function (t) {
    var n = this;
    return e(t) ? new n(function (e, r) {
      for (var o = t.length, i = 0; i < o; i++) {
        n.resolve(t[i]).then(e, r);
      }
    }) : new n(function (t, e) {
      return e(new TypeError("You must pass an array to race."));
    });
  }, D.resolve = m, D.reject = function (t) {
    var e = new this(A);
    return K(e, t), e;
  }, D._setScheduler = function (t) {
    o = t;
  }, D._setAsap = function (t) {
    i = t;
  }, D._asap = i, function () {
    var t = void 0;
    if ("undefined" != typeof global) t = global;else if ("undefined" != typeof self) t = self;else try {
      t = Function("return this")();
    } catch (t) {
      throw new Error("polyfill failed because global object is unavailable in this environment");
    }
    var e = t.Promise;

    if (e) {
      var n = null;

      try {
        n = Object.prototype.toString.call(e.resolve());
      } catch (t) {}

      if ("[object Promise]" === n && !e.cast) return;
    }

    t.Promise = D;
  }();
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/process/browser.js */ "./node_modules/process/browser.js"), __webpack_require__(/*! ./../../node_modules/webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./resources/js/quasar.mat.umd.min.js":
/*!********************************************!*\
  !*** ./resources/js/quasar.mat.umd.min.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*!
 * Quasar Framework v0.17.8
 * (c) 2016-present Razvan Stoenescu
 * Released under the MIT License.
 */
!function (t, e) {
  "object" == ( false ? undefined : _typeof(exports)) && "undefined" != typeof module ? module.exports = e(__webpack_require__(/*! vue */ "./node_modules/vue/dist/vue.common.js")) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! vue */ "./node_modules/vue/dist/vue.common.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (e),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;
}(this, function (t) {
  "use strict";

  t = t && t.hasOwnProperty("default") ? t["default"] : t;
  var e,
      i = "undefined" == typeof window,
      s = !1,
      n = i;

  function o(t) {
    var e = function (t, e) {
      var i = /(edge)\/([\w.]+)/.exec(t) || /(opr)[\/]([\w.]+)/.exec(t) || /(vivaldi)[\/]([\w.]+)/.exec(t) || /(chrome)[\/]([\w.]+)/.exec(t) || /(iemobile)[\/]([\w.]+)/.exec(t) || /(version)(applewebkit)[\/]([\w.]+).*(safari)[\/]([\w.]+)/.exec(t) || /(webkit)[\/]([\w.]+).*(version)[\/]([\w.]+).*(safari)[\/]([\w.]+)/.exec(t) || /(webkit)[\/]([\w.]+)/.exec(t) || /(opera)(?:.*version|)[\/]([\w.]+)/.exec(t) || /(msie) ([\w.]+)/.exec(t) || t.indexOf("trident") >= 0 && /(rv)(?::| )([\w.]+)/.exec(t) || t.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(t) || [];
      return {
        browser: i[5] || i[3] || i[1] || "",
        version: i[2] || i[4] || "0",
        versionNumber: i[4] || i[2] || "0",
        platform: e[0] || ""
      };
    }(t = (t || navigator.userAgent || navigator.vendor || window.opera).toLowerCase(), function (t) {
      return /(ipad)/.exec(t) || /(ipod)/.exec(t) || /(windows phone)/.exec(t) || /(iphone)/.exec(t) || /(kindle)/.exec(t) || /(silk)/.exec(t) || /(android)/.exec(t) || /(win)/.exec(t) || /(mac)/.exec(t) || /(linux)/.exec(t) || /(cros)/.exec(t) || /(playbook)/.exec(t) || /(bb)/.exec(t) || /(blackberry)/.exec(t) || [];
    }(t)),
        o = {};

    return e.browser && (o[e.browser] = !0, o.version = e.version, o.versionNumber = parseInt(e.versionNumber, 10)), e.platform && (o[e.platform] = !0), (o.android || o.bb || o.blackberry || o.ipad || o.iphone || o.ipod || o.kindle || o.playbook || o.silk || o["windows phone"]) && (o.mobile = !0), (o.ipod || o.ipad || o.iphone) && (o.ios = !0), o["windows phone"] && (o.winphone = !0, delete o["windows phone"]), (o.cros || o.mac || o.linux || o.win) && (o.desktop = !0), (o.chrome || o.opr || o.safari || o.vivaldi) && (o.webkit = !0), (o.rv || o.iemobile) && (e.browser = "ie", o.ie = !0), o.edge && (e.browser = "edge", o.edge = !0), (o.safari && o.blackberry || o.bb) && (e.browser = "blackberry", o.blackberry = !0), o.safari && o.playbook && (e.browser = "playbook", o.playbook = !0), o.opr && (e.browser = "opera", o.opera = !0), o.safari && o.android && (e.browser = "android", o.android = !0), o.safari && o.kindle && (e.browser = "kindle", o.kindle = !0), o.safari && o.silk && (e.browser = "silk", o.silk = !0), o.vivaldi && (e.browser = "vivaldi", o.vivaldi = !0), o.name = e.browser, o.platform = e.platform, i || (window.process && window.process.versions && window.process.versions.electron ? o.electron = !0 : 0 === document.location.href.indexOf("chrome-extension://") ? o.chromeExt = !0 : (window._cordovaNative || window.cordova) && (o.cordova = !0), (s = void 0 === o.cordova && void 0 === o.electron && !!document.querySelector("[data-server-rendered]")) && (n = !0)), o;
  }

  function r() {
    if (void 0 !== e) return e;

    try {
      if (window.localStorage) return e = !0, !0;
    } catch (t) {}

    return e = !1, !1;
  }

  function a() {
    return {
      has: {
        touch: !!("ontouchstart" in document.documentElement) || window.navigator.msMaxTouchPoints > 0,
        webStorage: r()
      },
      within: {
        iframe: window.self !== window.top
      }
    };
  }

  var l = {
    has: {
      touch: !1,
      webStorage: !1
    },
    within: {
      iframe: !1
    },
    parseSSR: function parseSSR(t) {
      return t ? {
        is: o(t.req.headers["user-agent"]),
        has: this.has,
        within: this.within
      } : Object.assign({}, {
        is: o()
      }, a());
    },
    install: function install(t, e, r) {
      var l = this;
      i ? e.server.push(function (t, e) {
        t.platform = l.parseSSR(e.ssr);
      }) : (this.is = o(), s ? (e.takeover.push(function (t) {
        n = s = !1, Object.assign(t.platform, a());
      }), r.util.defineReactive(t, "platform", this)) : (Object.assign(this, a()), t.platform = this));
    }
  };
  Object.assign || Object.defineProperty(Object, "assign", {
    enumerable: !1,
    configurable: !0,
    writable: !0,
    value: function value(t, e) {
      var i = arguments;
      if (void 0 === t || null === t) throw new TypeError("Cannot convert first argument to object");

      for (var s = Object(t), n = 1; n < arguments.length; n++) {
        var o = i[n];
        if (void 0 !== o && null !== o) for (var r = Object.keys(Object(o)), a = 0, l = r.length; a < l; a++) {
          var c = r[a],
              h = Object.getOwnPropertyDescriptor(o, c);
          void 0 !== h && h.enumerable && (s[c] = o[c]);
        }
      }

      return s;
    }
  }), Number.isInteger || (Number.isInteger = function (t) {
    return "number" == typeof t && isFinite(t) && Math.floor(t) === t;
  }), Array.prototype.includes || (Array.prototype.includes = function (t, e) {
    var i = Object(this),
        s = parseInt(i.length, 10) || 0;
    if (0 === s) return !1;
    var n,
        o,
        r = parseInt(e, 10) || 0;

    for (r >= 0 ? n = r : (n = s + r) < 0 && (n = 0); n < s;) {
      if (t === (o = i[n]) || t != t && o != o) return !0;
      n++;
    }

    return !1;
  }), String.prototype.startsWith || (String.prototype.startsWith = function (t, e) {
    return e = e || 0, this.substr(e, t.length) === t;
  }), String.prototype.endsWith || (String.prototype.endsWith = function (t, e) {
    var i = this.toString();
    ("number" != typeof e || !isFinite(e) || Math.floor(e) !== e || e > i.length) && (e = i.length), e -= t.length;
    var s = i.indexOf(t, e);
    return -1 !== s && s === e;
  }), i || ("function" != typeof Element.prototype.matches && (Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.webkitMatchesSelector || function (t) {
    for (var e = (this.document || this.ownerDocument).querySelectorAll(t), i = 0; e[i] && e[i] !== this;) {
      ++i;
    }

    return Boolean(e[i]);
  }), "function" != typeof Element.prototype.closest && (Element.prototype.closest = function (t) {
    for (var e = this; e && 1 === e.nodeType;) {
      if (e.matches(t)) return e;
      e = e.parentNode;
    }

    return null;
  }), [Element.prototype, CharacterData.prototype, DocumentType.prototype].forEach(function (t) {
    t.hasOwnProperty("remove") || Object.defineProperty(t, "remove", {
      configurable: !0,
      enumerable: !0,
      writable: !0,
      value: function value() {
        null !== this.parentNode && this.parentNode.removeChild(this);
      }
    });
  })), Array.prototype.find || Object.defineProperty(Array.prototype, "find", {
    value: function value(t) {
      if (null == this) throw new TypeError("Array.prototype.find called on null or undefined");
      if ("function" != typeof t) throw new TypeError("predicate must be a function");

      for (var e, i = Object(this), s = i.length >>> 0, n = arguments[1], o = 0; o < s; o++) {
        if (e = i[o], t.call(n, e, o, i)) return e;
      }
    }
  });
  var c = {
    __history: [],
    add: function add() {},
    remove: function remove() {},
    install: function install(t, e) {
      var s = this;

      if (!i && t.platform.is.cordova) {
        this.add = function (t) {
          s.__history.push(t);
        }, this.remove = function (t) {
          var e = s.__history.indexOf(t);

          e >= 0 && s.__history.splice(e, 1);
        };
        var n = void 0 === e.cordova || !1 !== e.cordova.backButtonExit;
        document.addEventListener("deviceready", function () {
          document.addEventListener("backbutton", function () {
            s.__history.length ? s.__history.pop().handler() : n && "#/" === window.location.hash ? navigator.app.exitApp() : window.history.back();
          }, !1);
        });
      }
    }
  },
      h = {
    lang: "en-us",
    label: {
      clear: "Clear",
      ok: "OK",
      cancel: "Cancel",
      close: "Close",
      set: "Set",
      select: "Select",
      reset: "Reset",
      remove: "Remove",
      update: "Update",
      create: "Create",
      search: "Search",
      filter: "Filter",
      refresh: "Refresh"
    },
    date: {
      days: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
      daysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
      months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
      monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
      firstDayOfWeek: 0,
      format24h: !1
    },
    pullToRefresh: {
      pull: "Pull down to refresh",
      release: "Release to refresh",
      refresh: "Refreshing..."
    },
    table: {
      noData: "No data available",
      noResults: "No matching records found",
      loading: "Loading...",
      selectedRecords: function selectedRecords(t) {
        return 1 === t ? "1 record selected." : (0 === t ? "No" : t) + " records selected.";
      },
      recordsPerPage: "Records per page:",
      allRows: "All",
      pagination: function pagination(t, e, i) {
        return t + "-" + e + " of " + i;
      },
      columns: "Columns"
    },
    editor: {
      url: "URL",
      bold: "Bold",
      italic: "Italic",
      strikethrough: "Strikethrough",
      underline: "Underline",
      unorderedList: "Unordered List",
      orderedList: "Ordered List",
      subscript: "Subscript",
      superscript: "Superscript",
      hyperlink: "Hyperlink",
      toggleFullscreen: "Toggle Fullscreen",
      quote: "Quote",
      left: "Left align",
      center: "Center align",
      right: "Right align",
      justify: "Justify align",
      print: "Print",
      outdent: "Decrease indentation",
      indent: "Increase indentation",
      removeFormat: "Remove formatting",
      formatting: "Formatting",
      fontSize: "Font Size",
      align: "Align",
      hr: "Insert Horizontal Rule",
      undo: "Undo",
      redo: "Redo",
      header1: "Header 1",
      header2: "Header 2",
      header3: "Header 3",
      header4: "Header 4",
      header5: "Header 5",
      header6: "Header 6",
      paragraph: "Paragraph",
      code: "Code",
      size1: "Very small",
      size2: "A bit small",
      size3: "Normal",
      size4: "Medium-large",
      size5: "Big",
      size6: "Very big",
      size7: "Maximum",
      defaultFont: "Default Font"
    },
    tree: {
      noNodes: "No nodes available",
      noResults: "No matching nodes found"
    }
  },
      u = {
    install: function install(t, e, s, n) {
      var o = this;
      i && e.server.push(function (t, e) {
        var i = {
          lang: t.i18n.lang,
          dir: t.i18n.rtl ? "rtl" : "ltr"
        },
            s = e.ssr.setHtmlAttrs;
        "function" == typeof s ? s(i) : e.ssr.Q_HTML_ATTRS = Object.keys(i).map(function (t) {
          return t + "=" + i[t];
        }).join(" ");
      }), this.set = function (e) {
        if (void 0 === e && (e = h), e.set = o.set, e.getLocale = o.getLocale, e.rtl = e.rtl || !1, !i) {
          var n = document.documentElement;
          n.setAttribute("dir", e.rtl ? "rtl" : "ltr"), n.setAttribute("lang", e.lang);
        }

        i || t.i18n ? t.i18n = e : s.util.defineReactive(t, "i18n", e), o.name = e.lang, o.lang = e;
      }, this.set(n);
    },
    getLocale: function getLocale() {
      if (!i) {
        var t = navigator.language || navigator.languages[0] || navigator.browserLanguage || navigator.userLanguage || navigator.systemLanguage;
        return t ? t.toLowerCase() : void 0;
      }
    }
  };

  function d(t) {
    var e = t.r,
        i = t.g,
        s = t.b,
        n = t.a,
        o = void 0 !== n;
    if (e = Math.round(e), i = Math.round(i), s = Math.round(s), e > 255 || i > 255 || s > 255 || o && n > 100) throw new TypeError("Expected 3 numbers below 256 (and optionally one below 100)");
    return n = o ? (256 | Math.round(255 * n / 100)).toString(16).slice(1) : "", "#" + (s | i << 8 | e << 16 | 1 << 24).toString(16).slice(1) + n;
  }

  function p(t) {
    if ("string" != typeof t) throw new TypeError("Expected a string");
    3 === (t = t.replace(/^#/, "")).length ? t = t[0] + t[0] + t[1] + t[1] + t[2] + t[2] : 4 === t.length && (t = t[0] + t[0] + t[1] + t[1] + t[2] + t[2] + t[3] + t[3]);
    var e = parseInt(t, 16);
    return t.length > 6 ? {
      r: e >> 24 & 255,
      g: e >> 16 & 255,
      b: e >> 8 & 255,
      a: Math.round((255 & e) / 2.55)
    } : {
      r: e >> 16,
      g: e >> 8 & 255,
      b: 255 & e
    };
  }

  function f(t) {
    var e,
        i,
        s,
        n,
        o,
        r,
        a,
        l,
        c = t.h,
        h = t.s,
        u = t.v,
        d = t.a;

    switch (r = (u /= 100) * (1 - (h /= 100)), a = u * (1 - (o = 6 * (c /= 360) - (n = Math.floor(6 * c))) * h), l = u * (1 - (1 - o) * h), n % 6) {
      case 0:
        e = u, i = l, s = r;
        break;

      case 1:
        e = a, i = u, s = r;
        break;

      case 2:
        e = r, i = u, s = l;
        break;

      case 3:
        e = r, i = a, s = u;
        break;

      case 4:
        e = l, i = r, s = u;
        break;

      case 5:
        e = u, i = r, s = a;
    }

    return {
      r: Math.round(255 * e),
      g: Math.round(255 * i),
      b: Math.round(255 * s),
      a: d
    };
  }

  function m(t) {
    var e,
        i = t.r,
        s = t.g,
        n = t.b,
        o = t.a,
        r = Math.max(i, s, n),
        a = Math.min(i, s, n),
        l = r - a,
        c = 0 === r ? 0 : l / r,
        h = r / 255;

    switch (r) {
      case a:
        e = 0;
        break;

      case i:
        e = s - n + l * (s < n ? 6 : 0), e /= 6 * l;
        break;

      case s:
        e = n - i + 2 * l, e /= 6 * l;
        break;

      case n:
        e = i - s + 4 * l, e /= 6 * l;
    }

    return {
      h: Math.round(360 * e),
      s: Math.round(100 * c),
      v: Math.round(100 * h),
      a: o
    };
  }

  var g = /^\s*rgb(a)?\s*\((\s*(\d+)\s*,\s*?){2}(\d+)\s*,?\s*([01]?\.?\d*?)?\s*\)\s*$/;

  function v(t) {
    if ("string" != typeof t) throw new TypeError("Expected a string");
    var e = g.exec(t);

    if (e) {
      var i = {
        r: Math.max(255, parseInt(e[2], 10)),
        g: Math.max(255, parseInt(e[3], 10)),
        b: Math.max(255, parseInt(e[4], 10))
      };
      return e[1] && (i.a = Math.max(1, parseFloat(e[5]))), i;
    }

    return p(t);
  }

  function b(t, e) {
    if ("string" != typeof t) throw new TypeError("Expected a string as color");
    if ("number" != typeof e) throw new TypeError("Expected a numeric percent");
    var i = v(t),
        s = e < 0 ? 0 : 255,
        n = Math.abs(e) / 100,
        o = i.r,
        r = i.g,
        a = i.b;
    return "#" + (16777216 + 65536 * (Math.round((s - o) * n) + o) + 256 * (Math.round((s - r) * n) + r) + (Math.round((s - a) * n) + a)).toString(16).slice(1);
  }

  function _(t, e, i) {
    if (void 0 === i && (i = document.body), "string" != typeof t) throw new TypeError("Expected a string as color");
    if ("string" != typeof e) throw new TypeError("Expected a string as value");
    if (!(i instanceof Element)) throw new TypeError("Expected a DOM element");

    switch (i.style.setProperty("--q-color-" + t, e), t) {
      case "negative":
      case "warning":
        i.style.setProperty("--q-color-" + t + "-l", b(e, 46));
        break;

      case "light":
        i.style.setProperty("--q-color-" + t + "-d", b(e, -10));
    }
  }

  function y(t, e) {
    if (void 0 === e && (e = document.body), "string" != typeof t) throw new TypeError("Expected a string as color");
    if (!(e instanceof Element)) throw new TypeError("Expected a DOM element");
    return getComputedStyle(e).getPropertyValue("--q-color-" + t).trim() || null;
  }

  var w = {
    rgbToHex: d,
    hexToRgb: p,
    hsvToRgb: f,
    rgbToHsv: m,
    textToRgb: v,
    lighten: b,
    luminosity: function luminosity(t) {
      if ("string" != typeof t && (!t || void 0 === t.r)) throw new TypeError("Expected a string or a {r, g, b} object as color");
      var e = "string" == typeof t ? v(t) : t,
          i = e.r / 255,
          s = e.g / 255,
          n = e.b / 255;
      return .2126 * (i <= .03928 ? i / 12.92 : Math.pow((i + .055) / 1.055, 2.4)) + .7152 * (s <= .03928 ? s / 12.92 : Math.pow((s + .055) / 1.055, 2.4)) + .0722 * (n <= .03928 ? n / 12.92 : Math.pow((n + .055) / 1.055, 2.4));
    },
    setBrand: _,
    getBrand: y
  };

  function C(t, e) {
    var i = t.is,
        s = t.has,
        n = t.within,
        o = ["mat", i.desktop ? "desktop" : "mobile", s.touch ? "touch" : "no-touch", "platform-" + (i.ios ? "ios" : "mat")];

    if (i.cordova && (o.push("cordova"), i.ios && (void 0 === e.cordova || !1 !== e.cordova.iosStatusBarPadding))) {
      var r = window.devicePixelRatio || 1,
          a = window.screen.width * r,
          l = window.screen.height * r;
      1125 === a && 2436 === l && o.push("q-ios-statusbar-x"), 1125 === a && 2001 === l || o.push("q-ios-statusbar-padding");
    }

    return n.iframe && o.push("within-iframe"), i.electron && o.push("electron"), o;
  }

  var x = {
    install: function install(t, e, s) {
      i ? e.server.push(function (t, e) {
        var i = C(t.platform, s),
            n = e.ssr.setBodyClasses;
        "function" == typeof n ? n(i) : e.ssr.Q_BODY_CLASSES = i.join(" ");
      }) : (s.brand && function (t) {
        for (var e in t) {
          _(e, t[e]);
        }
      }(s.brand), function (t, e) {
        var i = C(t, e);
        t.is.ie && 11 === t.is.versionNumber ? i.forEach(function (t) {
          return document.body.classList.add(t);
        }) : document.body.classList.add.apply(document.body.classList, i), t.is.ios && document.body.addEventListener("touchstart", function () {});
      }(t.platform, s));
    }
  },
      k = {
    name: "material-icons",
    type: {
      positive: "check_circle",
      negative: "warning",
      info: "info",
      warning: "priority_high"
    },
    arrow: {
      up: "arrow_upward",
      right: "arrow_forward",
      down: "arrow_downward",
      left: "arrow_back"
    },
    chevron: {
      left: "chevron_left",
      right: "chevron_right"
    },
    pullToRefresh: {
      arrow: "arrow_downward",
      refresh: "refresh"
    },
    search: {
      icon: "search",
      clear: "cancel",
      clearInverted: "clear"
    },
    carousel: {
      left: "chevron_left",
      right: "chevron_right",
      quickNav: "lens",
      thumbnails: "view_carousel"
    },
    checkbox: {
      checked: {
        ios: "check_circle",
        mat: "check_box"
      },
      unchecked: {
        ios: "radio_button_unchecked",
        mat: "check_box_outline_blank"
      },
      indeterminate: {
        ios: "remove_circle_outline",
        mat: "indeterminate_check_box"
      }
    },
    chip: {
      close: "cancel"
    },
    chipsInput: {
      add: "send"
    },
    collapsible: {
      icon: "arrow_drop_down"
    },
    datetime: {
      arrowLeft: "chevron_left",
      arrowRight: "chevron_right"
    },
    editor: {
      bold: "format_bold",
      italic: "format_italic",
      strikethrough: "strikethrough_s",
      underline: "format_underlined",
      unorderedList: "format_list_bulleted",
      orderedList: "format_list_numbered",
      subscript: "vertical_align_bottom",
      superscript: "vertical_align_top",
      hyperlink: "link",
      toggleFullscreen: "fullscreen",
      quote: "format_quote",
      left: "format_align_left",
      center: "format_align_center",
      right: "format_align_right",
      justify: "format_align_justify",
      print: "print",
      outdent: "format_indent_decrease",
      indent: "format_indent_increase",
      removeFormat: "format_clear",
      formatting: "text_format",
      fontSize: "format_size",
      align: "format_align_left",
      hr: "remove",
      undo: "undo",
      redo: "redo",
      header: "format_size",
      code: "code",
      size: "format_size",
      font: "font_download"
    },
    fab: {
      icon: "add",
      activeIcon: "close"
    },
    input: {
      showPass: "visibility",
      hidePass: "visibility_off",
      showNumber: "keyboard",
      hideNumber: "keyboard_hide",
      clear: "cancel",
      clearInverted: "clear",
      dropdown: "arrow_drop_down"
    },
    pagination: {
      first: "first_page",
      prev: "keyboard_arrow_left",
      next: "keyboard_arrow_right",
      last: "last_page"
    },
    radio: {
      checked: {
        ios: "check",
        mat: "radio_button_checked"
      },
      unchecked: {
        ios: "",
        mat: "radio_button_unchecked"
      }
    },
    rating: {
      icon: "grade"
    },
    stepper: {
      done: "check",
      active: "edit",
      error: "warning"
    },
    tabs: {
      left: "chevron_left",
      right: "chevron_right"
    },
    table: {
      arrowUp: "arrow_upward",
      warning: "warning",
      prevPage: "chevron_left",
      nextPage: "chevron_right"
    },
    tree: {
      icon: "play_arrow"
    },
    uploader: {
      done: "done",
      clear: "cancel",
      clearInverted: "clear",
      add: "add",
      upload: "cloud_upload",
      expand: "keyboard_arrow_down",
      file: "insert_drive_file"
    }
  },
      S = {
    __installed: !1,
    install: function install(t, e, s) {
      var n = this;
      this.set = function (s) {
        void 0 === s && (s = k), s.set = n.set, i || t.icon ? t.icon = s : e.util.defineReactive(t, "icon", s), n.name = s.name, n.def = s;
      }, this.set(s);
    }
  },
      q = {
    server: [],
    takeover: []
  },
      $ = {
    version: "0.17.8",
    theme: "mat"
  };
  var T = [],
      P = {
    __installed: !1,
    __install: function __install() {
      this.__installed = !0, window.addEventListener("keyup", function (t) {
        0 !== T.length && (27 !== t.which && 27 !== t.keyCode || T[T.length - 1]());
      });
    },
    register: function register(t) {
      l.is.desktop && (this.__installed || this.__install(), T.push(t));
    },
    pop: function pop() {
      l.is.desktop && T.pop();
    }
  },
      M = {
    props: {
      value: Boolean
    },
    data: function data() {
      return {
        showing: !1
      };
    },
    watch: {
      value: function value(t) {
        var e = this;
        this.disable && t ? this.$emit("input", !1) : this.$nextTick(function () {
          e.value !== e.showing && e[t ? "show" : "hide"]();
        });
      }
    },
    methods: {
      toggle: function toggle(t) {
        return this[this.showing ? "hide" : "show"](t);
      },
      show: function show(t) {
        var e = this;
        return this.disable || this.showing ? this.showPromise || Promise.resolve(t) : (this.hidePromise && this.hidePromiseReject(), this.showing = !0, !1 === this.value && this.$emit("input", !0), (void 0 === this.$options.modelToggle || this.$options.modelToggle.history) && (this.__historyEntry = {
          handler: this.hide
        }, c.add(this.__historyEntry)), this.__show ? (this.showPromise = new Promise(function (i, s) {
          e.showPromiseResolve = function () {
            e.showPromise = null, e.$emit("show", t), i(t);
          }, e.showPromiseReject = function () {
            e.showPromise["catch"](function () {}), e.showPromise = null, s(null);
          };
        }), this.__show(t), this.showPromise || Promise.resolve(t)) : (this.$emit("show", t), Promise.resolve(t)));
      },
      hide: function hide(t) {
        var e = this;
        return this.disable || !this.showing ? this.hidePromise || Promise.resolve(t) : (this.showPromise && this.showPromiseReject(), this.showing = !1, !0 === this.value && this.$emit("input", !1), this.__removeHistory(), this.__hide ? (this.hidePromise = new Promise(function (i, s) {
          e.hidePromiseResolve = function () {
            e.hidePromise = null, e.$emit("hide", t), i();
          }, e.hidePromiseReject = function () {
            e.hidePromise["catch"](function () {}), e.hidePromise = null, s(null);
          };
        }), this.__hide(t), this.hidePromise || Promise.resolve(t)) : (this.$emit("hide", t), Promise.resolve()));
      },
      __removeHistory: function __removeHistory() {
        this.__historyEntry && (c.remove(this.__historyEntry), this.__historyEntry = null);
      }
    },
    beforeDestroy: function beforeDestroy() {
      this.showing && (this.showPromise && this.showPromiseReject(), this.hidePromise && this.hidePromiseReject(), this.$emit("input", !1), this.__removeHistory(), this.__hide && this.__hide());
    }
  },
      L = {};

  function B(t) {
    return 0 === t.button;
  }

  function E(t) {
    return t.which || t.keyCode;
  }

  function N(t) {
    var e, i;
    if (t.touches && t.touches[0] ? t = t.touches[0] : t.changedTouches && t.changedTouches[0] && (t = t.changedTouches[0]), t.clientX || t.clientY) e = t.clientX, i = t.clientY;else if (t.pageX || t.pageY) e = t.pageX - document.body.scrollLeft - document.documentElement.scrollLeft, i = t.pageY - document.body.scrollTop - document.documentElement.scrollTop;else {
      var s = O(t).getBoundingClientRect();
      e = (s.right - s.left) / 2 + s.left, i = (s.bottom - s.top) / 2 + s.top;
    }
    return {
      top: i,
      left: e
    };
  }

  function O(t) {
    var e;
    return t.target ? e = t.target : t.srcElement && (e = t.srcElement), 3 === e.nodeType && (e = e.parentNode), e;
  }

  function D(t) {
    if (t.path) return t.path;
    if (t.composedPath) return t.composedPath();

    for (var e = [], i = t.target; i;) {
      if (e.push(i), "HTML" === i.tagName) return e.push(document), e.push(window), e;
      i = i.parentElement;
    }
  }

  Object.defineProperty(L, "passive", {
    configurable: !0,
    get: function get() {
      var t;

      try {
        var e = Object.defineProperty({}, "passive", {
          get: function get() {
            t = {
              passive: !0
            };
          }
        });
        window.addEventListener("qtest", null, e), window.removeEventListener("qtest", null, e);
      } catch (t) {}

      return L.passive = t, t;
    },
    set: function set(t) {
      Object.defineProperty(this, "passive", {
        value: t
      });
    }
  });
  var z = 10,
      R = 40,
      I = 800;

  function H(t) {
    var e = 0,
        i = 0,
        s = 0,
        n = 0;
    return "detail" in t && (i = t.detail), "wheelDelta" in t && (i = -t.wheelDelta / 120), "wheelDeltaY" in t && (i = -t.wheelDeltaY / 120), "wheelDeltaX" in t && (e = -t.wheelDeltaX / 120), "axis" in t && t.axis === t.HORIZONTAL_AXIS && (e = i, i = 0), s = e * z, n = i * z, "deltaY" in t && (n = t.deltaY), "deltaX" in t && (s = t.deltaX), (s || n) && t.deltaMode && (1 === t.deltaMode ? (s *= R, n *= R) : (s *= I, n *= I)), s && !e && (e = s < 1 ? -1 : 1), n && !i && (i = n < 1 ? -1 : 1), {
      spinX: e,
      spinY: i,
      pixelX: s,
      pixelY: n
    };
  }

  function F(t) {
    t.preventDefault(), t.stopPropagation();
  }

  var A = {
    listenOpts: L,
    leftClick: B,
    middleClick: function middleClick(t) {
      return 1 === t.button;
    },
    rightClick: function rightClick(t) {
      return 2 === t.button;
    },
    getEventKey: E,
    position: N,
    targetElement: O,
    getEventPath: D,
    getMouseWheelDistance: H,
    stopAndPrevent: F
  };

  function Q(t) {
    if (!t || t === window) return {
      top: 0,
      left: 0
    };
    var e = t.getBoundingClientRect();
    return {
      top: e.top,
      left: e.left
    };
  }

  function j(t, e) {
    return window.getComputedStyle(t).getPropertyValue(e);
  }

  function V(t) {
    return t === window ? window.innerHeight : parseFloat(j(t, "height"));
  }

  function W(t) {
    return t === window ? window.innerWidth : parseFloat(j(t, "width"));
  }

  function U(t, e) {
    var i = t.style;
    Object.keys(e).forEach(function (t) {
      i[t] = e[t];
    });
  }

  var K = ["-webkit-", "-moz-", "-ms-", "-o-"];

  function Y(t) {
    var e = {
      transform: t
    };
    return K.forEach(function (i) {
      e[i + "transform"] = t;
    }), e;
  }

  var J,
      X = {
    offset: Q,
    style: j,
    height: V,
    width: W,
    css: U,
    ready: function ready(t) {
      if ("function" == typeof t) return "loading" !== document.readyState ? t() : void document.addEventListener("DOMContentLoaded", t, !1);
    },
    cssTransform: Y
  };

  function G(t) {
    return t.closest(".scroll,.scroll-y") || window;
  }

  function Z(t) {
    return t === window ? window.pageYOffset || window.scrollY || document.body.scrollTop || 0 : t.scrollTop;
  }

  function tt(t, e, i) {
    if (!(i <= 0)) {
      var s = Z(t);
      requestAnimationFrame(function () {
        et(t, s + (e - s) / Math.max(16, i) * 16), t.scrollTop !== e && tt(t, e, i - 16);
      });
    }
  }

  function et(t, e) {
    if (t === window) return document.documentElement.scrollTop = e, void (document.body.scrollTop = e);
    t.scrollTop = e;
  }

  function it(t, e, i) {
    i ? tt(t, e, i) : et(t, e);
  }

  function st(t) {
    return !(!t || t.nodeType !== Node.ELEMENT_NODE) && (t.classList.contains("scroll") || ["auto", "scroll"].includes(window.getComputedStyle(t)["overflow-y"])) && t.scrollHeight > t.clientHeight;
  }

  var nt = {
    getScrollTarget: G,
    getScrollHeight: function getScrollHeight(t) {
      return (t === window ? document.body : t).scrollHeight;
    },
    getScrollPosition: Z,
    animScrollTo: tt,
    setScrollPosition: it,
    getScrollbarWidth: function getScrollbarWidth() {
      if (void 0 !== J) return J;
      var t = document.createElement("p"),
          e = document.createElement("div");
      U(t, {
        width: "100%",
        height: "200px"
      }), U(e, {
        position: "absolute",
        top: "0px",
        left: "0px",
        visibility: "hidden",
        width: "200px",
        height: "150px",
        overflow: "hidden"
      }), e.appendChild(t), document.body.appendChild(e);
      var i = t.offsetWidth;
      e.style.overflow = "scroll";
      var s = t.offsetWidth;
      return i === s && (s = e.clientWidth), e.remove(), J = i - s;
    },
    hasScrollbar: st
  },
      ot = 0;

  function rt(t) {
    (function (t) {
      if (t.target === document.body) return !0;

      for (var e = D(t), i = t.deltaY || -t.wheelDelta, s = 0; s < e.length; s++) {
        var n = e[s];
        if (st(n)) return i < 0 && 0 === n.scrollTop || i > 0 && n.scrollTop + n.clientHeight === n.scrollHeight;
      }

      return !0;
    })(t) && t.preventDefault();
  }

  var at = {
    methods: {
      __preventScroll: function __preventScroll(t) {
        if (!((ot += t ? 1 : -1) > 1)) {
          var e = t ? "add" : "remove";
          this.$q.platform.is.mobile ? document.body.classList[e]("q-body-prevent-scroll") : this.$q.platform.is.desktop && window[e + "EventListener"]("wheel", rt);
        }
      }
    }
  },
      lt = {
    top: "items-start justify-center with-backdrop",
    bottom: "items-end justify-center with-backdrop",
    right: "items-center justify-end with-backdrop",
    left: "items-center justify-start with-backdrop"
  },
      ct = {
    maxHeight: "80vh",
    height: "auto"
  };
  var ht = {
    responsive: 0,
    maximized: 0
  },
      ut = {
    name: "QModal",
    mixins: [M, at],
    provide: function provide() {
      var t = this;
      return {
        __qmodal: {
          register: function register(e) {
            t.layout !== e && (t.layout = e);
          },
          unregister: function unregister(e) {
            t.layout === e && (t.layout = null);
          }
        }
      };
    },
    props: {
      position: {
        type: String,
        "default": "",
        validator: function validator(t) {
          return "" === t || ["top", "bottom", "left", "right"].includes(t);
        }
      },
      transition: String,
      enterClass: String,
      leaveClass: String,
      positionClasses: {
        type: String,
        "default": "flex-center"
      },
      contentClasses: [Object, Array, String],
      contentCss: [Object, Array, String],
      noBackdropDismiss: {
        type: Boolean,
        "default": !1
      },
      noEscDismiss: {
        type: Boolean,
        "default": !1
      },
      noRouteDismiss: Boolean,
      noRefocus: Boolean,
      minimized: Boolean,
      maximized: Boolean
    },
    data: function data() {
      return {
        layout: null
      };
    },
    watch: {
      $route: function $route() {
        this.noRouteDismiss || this.hide();
      }
    },
    computed: {
      modalClasses: function modalClasses() {
        var t = this.position ? lt[this.position] : this.positionClasses;
        return this.maximized ? ["maximized", t] : this.minimized ? ["minimized", t] : t;
      },
      contentClassesCalc: function contentClassesCalc() {
        return this.layout ? [this.contentClasses, "column no-wrap"] : this.contentClasses;
      },
      transitionProps: function transitionProps() {
        return this.position ? {
          name: "q-modal-" + this.position
        } : this.enterClass || this.leaveClass ? {
          enterActiveClass: this.enterClass,
          leaveActiveClass: this.leaveClass
        } : {
          name: this.transition || "q-modal"
        };
      },
      modalCss: function modalCss() {
        if (this.position) {
          var t = Array.isArray(this.contentCss) ? this.contentCss : [this.contentCss];
          return t.unshift(Object.assign({}, ct, function (t) {
            var e = {};
            return ["left", "right"].includes(t) && (e.maxWidth = "90vw"), e;
          }(this.position))), t;
        }

        return this.contentCss;
      }
    },
    methods: {
      __dismiss: function __dismiss() {
        var t = this;
        this.noBackdropDismiss || this.hide().then(function () {
          t.$emit("dismiss");
        });
      },
      __show: function __show() {
        var t = this;
        this.noRefocus || (this.__refocusTarget = document.activeElement), document.body.appendChild(this.$el), this.__register(!0), this.__preventScroll(!0), P.register(function () {
          t.noEscDismiss || t.hide().then(function () {
            t.$emit("escape-key"), t.$emit("dismiss");
          });
        });
        var e = this.$refs.content;
        this.$q.platform.is.ios && e.click(), e.scrollTop = 0, ["modal-scroll", "layout-view"].forEach(function (t) {
          [].slice.call(e.getElementsByClassName(t)).forEach(function (t) {
            t.scrollTop = 0;
          });
        }), this.$nextTick(function () {
          return e && e.focus();
        });
      },
      __hide: function __hide() {
        P.pop(), this.__preventScroll(!1), this.__register(!1), !this.noRefocus && this.__refocusTarget && this.__refocusTarget.focus();
      },
      __stopPropagation: function __stopPropagation(t) {
        t.stopPropagation();
      },
      __register: function __register(t) {
        var e = t ? {
          action: "add",
          step: 1
        } : {
          action: "remove",
          step: -1
        };

        if (this.maximized) {
          if (ht.maximized += e.step, !t && ht.maximized > 0) return;
          document.body.classList[e.action]("q-maximized-modal");
        } else if (!this.minimized) {
          if (ht.responsive += e.step, !t && ht.responsive > 0) return;
          document.body.classList[e.action]("q-responsive-modal");
        }
      }
    },
    mounted: function mounted() {
      this.value && this.show();
    },
    beforeDestroy: function beforeDestroy() {
      this.$el.remove();
    },
    render: function render(t) {
      var e = this;
      return t("transition", {
        props: this.transitionProps,
        on: {
          afterEnter: function afterEnter() {
            e.showPromise && e.showPromiseResolve();
          },
          enterCancelled: function enterCancelled() {
            e.showPromise && e.showPromiseReject(), e.$el.remove();
          },
          afterLeave: function afterLeave() {
            e.hidePromise && e.hidePromiseResolve(), e.$el.remove();
          },
          leaveCancelled: function leaveCancelled() {
            e.hidePromise && e.hidePromiseReject();
          }
        }
      }, [t("div", {
        staticClass: "modal fullscreen row",
        "class": this.modalClasses,
        on: {
          click: this.__dismiss
        },
        directives: [{
          name: "show",
          value: this.showing
        }]
      }, [t("div", {
        ref: "content",
        staticClass: "modal-content",
        style: this.modalCss,
        "class": this.contentClassesCalc,
        attrs: {
          tabindex: -1
        },
        on: {
          click: this.__stopPropagation,
          touchstart: this.__stopPropagation
        }
      }, this.$slots["default"])])]);
    }
  },
      dt = {
    name: "QIcon",
    props: {
      name: String,
      color: String,
      size: String
    },
    computed: {
      classes: function classes() {
        var t,
            e = this.name;
        return e ? (t = /^fa[s|r|l|b]{0,1} /.test(e) || e.startsWith("icon-") ? e : e.startsWith("bt-") ? "bt " + e : /^ion-(md|ios|logo)/.test(e) ? "ionicons " + e : e.startsWith("ion-") ? "ionicons ion-md" + e.substr(3) : e.startsWith("mdi-") ? "mdi " + e : "material-icons", this.color ? t + " text-" + this.color : t) : "";
      },
      content: function content() {
        return this.classes.startsWith("material-icons") ? this.name.replace(/ /g, "_") : " ";
      },
      style: function style() {
        if (this.size) return {
          fontSize: this.size
        };
      }
    },
    render: function render(t) {
      return t("i", {
        staticClass: "q-icon",
        "class": this.classes,
        style: this.style,
        attrs: {
          "aria-hidden": !0
        }
      }, [this.content, this.$slots["default"]]);
    }
  },
      pt = {
    name: "QList",
    props: {
      noBorder: Boolean,
      dark: Boolean,
      dense: Boolean,
      sparse: Boolean,
      striped: Boolean,
      stripedOdd: Boolean,
      separator: Boolean,
      insetSeparator: Boolean,
      multiline: Boolean,
      highlight: Boolean,
      link: Boolean
    },
    computed: {
      classes: function classes() {
        return {
          "no-border": this.noBorder,
          "q-list-dark": this.dark,
          "q-list-dense": this.dense,
          "q-list-sparse": this.sparse,
          "q-list-striped": this.striped,
          "q-list-striped-odd": this.stripedOdd,
          "q-list-separator": this.separator,
          "q-list-inset-separator": this.insetSeparator,
          "q-list-multiline": this.multiline,
          "q-list-highlight": this.highlight,
          "q-list-link": this.link
        };
      }
    },
    render: function render(t) {
      return t("div", {
        staticClass: "q-list",
        "class": this.classes
      }, this.$slots["default"]);
    }
  };

  function ft(t) {
    return void 0 === t || t < 2 ? {} : {
      overflow: "hidden",
      display: "-webkit-box",
      "-webkit-box-orient": "vertical",
      "-webkit-line-clamp": t
    };
  }

  var mt = {
    icon: String,
    rightIcon: String,
    image: String,
    rightImage: String,
    avatar: String,
    rightAvatar: String,
    letter: String,
    rightLetter: String,
    label: String,
    sublabel: String,
    labelLines: [String, Number],
    sublabelLines: [String, Number]
  },
      gt = {
    props: {
      dark: Boolean,
      link: Boolean,
      dense: Boolean,
      sparse: Boolean,
      separator: Boolean,
      insetSeparator: Boolean,
      multiline: Boolean,
      highlight: Boolean,
      tag: {
        type: String,
        "default": "div"
      }
    },
    computed: {
      itemClasses: function itemClasses() {
        return {
          "q-item": !0,
          "q-item-division": !0,
          "relative-position": !0,
          "q-item-dark": this.dark,
          "q-item-dense": this.dense,
          "q-item-sparse": this.sparse,
          "q-item-separator": this.separator,
          "q-item-inset-separator": this.insetSeparator,
          "q-item-multiline": this.multiline,
          "q-item-highlight": this.highlight,
          "q-item-link": this.to || this.link
        };
      }
    }
  },
      vt = null;
  if (!i) try {
    vt = new Event("qrouterlinkclick");
  } catch (t) {
    (vt = document.createEvent("Event")).initEvent("qrouterlinkclick", !0, !1);
  }
  var bt = {
    to: [String, Object],
    exact: Boolean,
    append: Boolean,
    replace: Boolean,
    event: [String, Array],
    activeClass: String,
    exactActiveClass: String
  },
      _t = {
    props: bt,
    data: function data() {
      return {
        routerLinkEventName: "qrouterlinkclick"
      };
    }
  },
      yt = {
    name: "QItem",
    mixins: [gt, {
      props: bt
    }],
    props: {
      active: Boolean,
      link: Boolean
    },
    computed: {
      classes: function classes() {
        return [void 0 !== this.to ? "q-link" : {
          active: this.active
        }, this.itemClasses];
      }
    },
    render: function render(t) {
      return void 0 !== this.to ? t("router-link", {
        props: Object.assign({}, this.$props, {
          tag: "a"
        }),
        "class": this.classes
      }, this.$slots["default"]) : t(this.tag, {
        "class": this.classes
      }, this.$slots["default"]);
    }
  },
      wt = {
    name: "QItemSide",
    props: {
      right: Boolean,
      icon: String,
      letter: {
        type: String,
        validator: function validator(t) {
          return 1 === t.length;
        }
      },
      inverted: Boolean,
      avatar: String,
      image: String,
      stamp: String,
      color: String,
      textColor: String
    },
    computed: {
      type: function type() {
        var t = this;
        return ["icon", "image", "avatar", "letter", "stamp"].find(function (e) {
          return t[e];
        });
      },
      classes: function classes() {
        var t = ["q-item-side-" + (this.right ? "right" : "left")];
        return !this.color || this.icon || this.letter || t.push("text-" + this.color), t;
      },
      typeClasses: function typeClasses() {
        var t = ["q-item-" + this.type];
        return this.color && (this.inverted && (this.icon || this.letter) ? t.push("bg-" + this.color) : this.textColor || t.push("text-" + this.color)), this.textColor && t.push("text-" + this.textColor), this.inverted && (this.icon || this.letter) && (t.push("q-item-inverted"), t.push("flex"), t.push("flex-center")), t;
      },
      imagePath: function imagePath() {
        return this.image || this.avatar;
      }
    },
    render: function render(t) {
      var e;
      return this.type && (this.icon ? (e = t(dt, {
        "class": this.inverted ? null : this.typeClasses,
        props: {
          name: this.icon
        }
      }), this.inverted && (e = t("div", {
        "class": this.typeClasses
      }, [e]))) : e = this.imagePath ? t("img", {
        "class": this.typeClasses,
        attrs: {
          src: this.imagePath
        }
      }) : t("div", {
        "class": this.typeClasses
      }, [this.stamp || this.letter])), t("div", {
        staticClass: "q-item-side q-item-section",
        "class": this.classes
      }, [e, this.$slots["default"]]);
    }
  };

  function Ct(t, e, i, s) {
    return t("div", {
      staticClass: "q-item-" + e + (1 === (s = parseInt(s, 10)) ? " ellipsis" : ""),
      style: ft(s)
    }, [i]);
  }

  var xt = {
    name: "QItemMain",
    props: {
      label: String,
      labelLines: [String, Number],
      sublabel: String,
      sublabelLines: [String, Number],
      inset: Boolean,
      tag: {
        type: String,
        "default": "div"
      }
    },
    render: function render(t) {
      return t(this.tag, {
        staticClass: "q-item-main q-item-section",
        "class": {
          "q-item-main-inset": this.inset
        }
      }, [this.label ? Ct(t, "label", this.label, this.labelLines) : null, this.sublabel ? Ct(t, "sublabel", this.sublabel, this.sublabelLines) : null, this.$slots["default"]]);
    }
  },
      kt = {
    name: "QItemSeparator",
    props: {
      inset: Boolean
    },
    render: function render(t) {
      return t("div", {
        staticClass: "q-item-separator-component",
        "class": {
          "q-item-separator-inset-component": this.inset
        }
      }, this.$slots["default"]);
    }
  },
      St = {
    name: "QActionSheet",
    props: {
      value: Boolean,
      title: String,
      grid: Boolean,
      actions: Array,
      dismissLabel: String
    },
    computed: {
      contentCss: function contentCss() {}
    },
    render: function render(t) {
      var e = this,
          i = [],
          s = this.$slots.title || this.title;
      return s && i.push(t("div", {
        staticClass: "q-actionsheet-title column justify-center"
      }, [s])), i.push(t("div", {
        staticClass: "q-actionsheet-body scroll"
      }, this.actions ? [this.grid ? t("div", {
        staticClass: "q-actionsheet-grid row wrap items-center justify-between"
      }, this.__getActions(t)) : t(pt, {
        staticClass: "no-border",
        props: {
          link: !0
        }
      }, this.__getActions(t))] : this.$slots["default"])), t(ut, {
        ref: "modal",
        props: {
          value: this.value,
          position: "bottom",
          contentCss: this.contentCss
        },
        on: {
          input: function input(t) {
            e.$emit("input", t);
          },
          show: function show() {
            e.$emit("show");
          },
          hide: function hide() {
            e.$emit("hide");
          },
          dismiss: function dismiss() {
            e.$emit("cancel");
          },
          "escape-key": function escapeKey() {
            e.$emit("escape-key");
          }
        }
      }, i);
    },
    methods: {
      show: function show() {
        return this.$refs.modal.show();
      },
      hide: function hide() {
        return this.$refs.modal ? this.$refs.modal.hide() : Promise.resolve();
      },
      __getActions: function __getActions(t) {
        var e = this;
        return this.actions.map(function (i) {
          var s;
          return i.label ? t(e.grid ? "div" : yt, ((s = {
            staticClass: e.grid ? "q-actionsheet-grid-item cursor-pointer relative-position column inline flex-center" : null,
            "class": i.classes,
            attrs: {
              tabindex: 0
            }
          })[e.grid ? "on" : "nativeOn"] = {
            click: function click() {
              return e.__onOk(i);
            },
            keyup: function keyup(t) {
              13 === E(t) && e.__onOk(i);
            }
          }, s), e.grid ? [i.icon ? t(dt, {
            props: {
              name: i.icon,
              color: i.color
            }
          }) : null, i.avatar ? t("img", {
            domProps: {
              src: i.avatar
            },
            staticClass: "avatar"
          }) : null, t("span", [i.label])] : [t(wt, {
            props: {
              icon: i.icon,
              color: i.color,
              avatar: i.avatar
            }
          }), t(xt, {
            props: {
              inset: !0,
              label: i.label
            }
          })]) : t(kt, {
            staticClass: "col-12"
          });
        });
      },
      __onOk: function __onOk(t) {
        var e = this;
        this.hide().then(function () {
          "function" == typeof t.handler && t.handler(), e.$emit("ok", t);
        });
      },
      __onCancel: function __onCancel() {
        var t = this;
        this.hide().then(function () {
          t.$emit("cancel");
        });
      },
      __onKeyCancel: function __onKeyCancel(t) {
        13 === E(t) && this.__onCancel();
      }
    }
  },
      qt = ["B", "kB", "MB", "GB", "TB", "PB"];

  function $t(t) {
    for (var e = 0; parseInt(t, 10) >= 1024 && e < qt.length - 1;) {
      t /= 1024, ++e;
    }

    return t.toFixed(1) + " " + qt[e];
  }

  function Tt(t) {
    return t.charAt(0).toUpperCase() + t.slice(1);
  }

  function Pt(t, e, i) {
    return i <= e ? e : Math.min(i, Math.max(e, t));
  }

  function Mt(t, e, i) {
    if (i <= e) return e;
    var s = i - e + 1,
        n = e + (t - e) % s;
    return n < e && (n = s + n), 0 === n ? 0 : n;
  }

  function Lt(t, e, i) {
    void 0 === e && (e = 2), void 0 === i && (i = "0");
    var s = "" + t;
    return s.length >= e ? s : new Array(e - s.length + 1).join(i) + s;
  }

  var Bt = {
    humanStorageSize: $t,
    capitalize: Tt,
    between: Pt,
    normalizeToInterval: Mt,
    pad: Lt
  },
      Et = i ? null : XMLHttpRequest,
      Nt = i ? null : Et.prototype.send,
      Ot = {
    start: [],
    stop: []
  },
      Dt = 0;
  var zt = {
    name: "QAjaxBar",
    props: {
      position: {
        type: String,
        "default": "top",
        validator: function validator(t) {
          return ["top", "right", "bottom", "left"].includes(t);
        }
      },
      size: {
        type: String,
        "default": "2px"
      },
      color: {
        type: String,
        "default": "red"
      },
      skipHijack: Boolean,
      reverse: Boolean
    },
    data: function data() {
      return {
        calls: 0,
        progress: 0,
        onScreen: !1,
        animate: !0
      };
    },
    computed: {
      classes: function classes() {
        return [this.position, "bg-" + this.color, this.animate ? "" : "no-transition"];
      },
      style: function style() {
        var t = this.onScreen,
            e = function (t) {
          var e = t.p,
              i = t.pos,
              s = t.active,
              n = t.horiz,
              o = t.reverse,
              r = t.dir,
              a = 1,
              l = 1;
          return n ? (o && (a = -1), "bottom" === i && (l = -1), Y("translate3d(" + a * (e - 100) + "%," + (s ? 0 : -200 * l) + "%,0)")) : (o && (l = -1), "right" === i && (a = -1), Y("translate3d(" + (s ? 0 : r * a * -200) + "%," + l * (e - 100) + "%,0)"));
        }({
          p: this.progress,
          pos: this.position,
          active: t,
          horiz: this.horizontal,
          reverse: this.$q.i18n.rtl && ["top", "bottom"].includes(this.position) ? !this.reverse : this.reverse,
          dir: this.$q.i18n.rtl ? -1 : 1
        });

        return e[this.sizeProp] = this.size, e.opacity = t ? 1 : 0, e;
      },
      horizontal: function horizontal() {
        return "top" === this.position || "bottom" === this.position;
      },
      sizeProp: function sizeProp() {
        return this.horizontal ? "height" : "width";
      }
    },
    methods: {
      start: function start(t) {
        var e = this;
        void 0 === t && (t = 300), this.calls++, this.calls > 1 || (clearTimeout(this.timer), this.$emit("start"), this.onScreen || (this.progress = 0, this.onScreen = !0, this.animate = !1, this.timer = setTimeout(function () {
          e.animate = !0, e.__work(t);
        }, 100)));
      },
      increment: function increment(t) {
        this.calls > 0 && (this.progress = function (t, e) {
          return "number" != typeof e && (e = t < 25 ? 3 * Math.random() + 3 : t < 65 ? 3 * Math.random() : t < 85 ? 2 * Math.random() : t < 99 ? .6 : 0), Pt(t + e, 0, 100);
        }(this.progress, t));
      },
      stop: function stop() {
        var t = this;

        if (this.calls = Math.max(0, this.calls - 1), !(this.calls > 0)) {
          clearTimeout(this.timer), this.$emit("stop");

          var e = function e() {
            t.animate = !0, t.progress = 100, t.timer = setTimeout(function () {
              t.onScreen = !1;
            }, 1e3);
          };

          0 === this.progress ? this.timer = setTimeout(e, 1) : e();
        }
      },
      __work: function __work(t) {
        var e = this;
        this.progress < 100 && (this.timer = setTimeout(function () {
          e.increment(), e.__work(t);
        }, t));
      }
    },
    mounted: function mounted() {
      this.skipHijack || (this.hijacked = !0, function (t, e) {
        function i() {
          Ot.stop.map(function (t) {
            t();
          });
        }

        Ot.start.push(t), Ot.stop.push(e), ++Dt > 1 || (Et.prototype.send = function () {
          for (var t = this, e = [], s = arguments.length; s--;) {
            e[s] = arguments[s];
          }

          Ot.start.map(function (t) {
            t();
          }), this.addEventListener("abort", i, !1), this.addEventListener("readystatechange", function () {
            4 === t.readyState && i();
          }, !1), Nt.apply(this, e);
        });
      }(this.start, this.stop));
    },
    beforeDestroy: function beforeDestroy() {
      var t, e;
      clearTimeout(this.timer), this.hijacked && (t = this.start, e = this.stop, Ot.start = Ot.start.filter(function (e) {
        return e !== t;
      }), Ot.stop = Ot.stop.filter(function (t) {
        return t !== e;
      }), (Dt = Math.max(0, Dt - 1)) || (Et.prototype.send = Nt));
    },
    render: function render(t) {
      return t("div", {
        staticClass: "q-loading-bar",
        "class": this.classes,
        style: this.style
      });
    }
  };

  function Rt(t, e, i) {
    var s = i.stop,
        n = i.center;
    s && t.stopPropagation();
    var o,
        r,
        a = document.createElement("span"),
        l = document.createElement("span"),
        c = e.clientWidth > e.clientHeight ? e.clientWidth : e.clientHeight,
        h = (n ? c : 2 * c) + "px",
        u = e.getBoundingClientRect();
    if (a.appendChild(l), a.className = "q-ripple-container", l.className = "q-ripple-animation", l.style.width = h, l.style.height = h, e.appendChild(a), n) o = r = 0;else {
      var d = N(t);
      o = d.left - u.left - c, r = d.top - u.top - c;
    }
    l.classList.add("q-ripple-animation-enter"), l.classList.add("q-ripple-animation-visible"), U(l, Y("translate(" + o + "px, " + r + "px) scale3d(0, 0, 0)")), setTimeout(function () {
      l.classList.remove("q-ripple-animation-enter"), U(l, Y("translate(" + o + "px, " + r + "px) scale3d(1, 1, 1)")), setTimeout(function () {
        l.classList.remove("q-ripple-animation-visible"), setTimeout(function () {
          a.remove();
        }, 300);
      }, 300);
    }, 10);
  }

  function It(t) {
    t.mat;
    return t.ios && !0;
  }

  var Ht = {
    name: "ripple",
    inserted: function inserted(t, e) {
      var i = e.value,
          s = e.modifiers;

      if (!It(s)) {
        var n = {
          enabled: !1 !== i,
          modifiers: {
            stop: s.stop,
            center: s.center
          },
          click: function click(e) {
            n.enabled && -1 !== e.detail && Rt(e, t, n.modifiers);
          },
          keyup: function keyup(e) {
            n.enabled && 13 === e.keyCode && Rt(e, t, n.modifiers);
          }
        };
        t.__qripple = n, t.addEventListener("click", n.click, !1), t.addEventListener("keyup", n.keyup, !1);
      }
    },
    update: function update(t, e) {
      var i = e.value,
          s = e.modifiers,
          n = s.stop,
          o = s.center,
          r = t.__qripple;
      r && (r.enabled = !1 !== i, r.modifiers = {
        stop: n,
        center: o
      });
    },
    unbind: function unbind(t, e) {
      var i = e.modifiers,
          s = t.__qripple;
      s && !It(i) && (t.removeEventListener("click", s.click, !1), t.removeEventListener("keyup", s.keyup, !1), delete t.__qripple);
    }
  },
      Ft = {
    left: "start",
    center: "center",
    right: "end",
    between: "between",
    around: "around"
  },
      At = Object.keys(Ft),
      Qt = {
    props: {
      align: {
        type: String,
        "default": "center",
        validator: function validator(t) {
          return At.includes(t);
        }
      }
    },
    computed: {
      alignClass: function alignClass() {
        return "justify-" + Ft[this.align];
      }
    }
  },
      jt = {
    xs: 8,
    sm: 10,
    md: 14,
    lg: 20,
    xl: 24,
    form: 14.777,
    "form-label": 21.777,
    "form-hide-underline": 9.333,
    "form-label-hide-underline": 16.333
  },
      Vt = {
    mixins: [Qt],
    directives: {
      Ripple: Ht
    },
    props: {
      type: String,
      loading: Boolean,
      disable: Boolean,
      label: [Number, String],
      noCaps: Boolean,
      noWrap: Boolean,
      icon: String,
      iconRight: String,
      round: Boolean,
      outline: Boolean,
      flat: Boolean,
      rounded: Boolean,
      push: Boolean,
      size: String,
      fab: Boolean,
      fabMini: Boolean,
      color: String,
      textColor: String,
      glossy: Boolean,
      dense: Boolean,
      noRipple: Boolean,
      tabindex: Number,
      to: [Object, String],
      replace: Boolean
    },
    computed: {
      style: function style() {
        if (this.size && !this.fab && !this.fabMini) return {
          fontSize: this.size in jt ? jt[this.size] + "px" : this.size
        };
      },
      isRectangle: function isRectangle() {
        return !this.isRound;
      },
      isRound: function isRound() {
        return this.round || this.fab || this.fabMini;
      },
      shape: function shape() {
        return "q-btn-" + (this.isRound ? "round" : "rectangle");
      },
      isDisabled: function isDisabled() {
        return this.disable || this.loading;
      },
      hasRipple: function hasRipple() {
        return !this.noRipple && !this.isDisabled;
      },
      computedTabIndex: function computedTabIndex() {
        return this.isDisabled ? -1 : this.tabindex || 0;
      },
      isLink: function isLink() {
        return "a" === this.type || void 0 !== this.to;
      },
      attrs: function attrs() {
        var t = {
          tabindex: this.computedTabIndex
        };
        return "a" !== this.type && (t.type = this.type || "button"), void 0 !== this.to && (t.href = this.$router.resolve(this.to).href), t;
      },
      classes: function classes() {
        var t = [this.shape];
        return this.fab ? t.push("q-btn-fab") : this.fabMini && t.push("q-btn-fab-mini"), this.flat ? t.push("q-btn-flat") : this.outline ? t.push("q-btn-outline") : this.push && t.push("q-btn-push"), this.isDisabled ? t.push("disabled") : (t.push("q-focusable q-hoverable"), this.active && t.push("active")), this.color ? this.flat || this.outline ? t.push("text-" + (this.textColor || this.color)) : (t.push("bg-" + this.color), t.push("text-" + (this.textColor || "white"))) : this.textColor && t.push("text-" + this.textColor), t.push({
          "q-btn-no-uppercase": this.noCaps,
          "q-btn-rounded": this.rounded,
          "q-btn-dense": this.dense,
          glossy: this.glossy
        }), t;
      },
      innerClasses: function innerClasses() {
        var t = [this.alignClass];
        return this.noWrap && t.push("no-wrap", "text-no-wrap"), this.repeating && t.push("non-selectable"), t;
      }
    }
  },
      Wt = {
    props: {
      color: String,
      size: {
        type: [Number, String],
        "default": "1em"
      }
    },
    computed: {
      classes: function classes() {
        if (this.color) return "text-" + this.color;
      }
    }
  },
      Ut = {
    name: "QSpinnerMat",
    mixins: [Wt],
    render: function render(t) {
      return t("svg", {
        staticClass: "q-spinner q-spinner-mat",
        "class": this.classes,
        attrs: {
          width: this.size,
          height: this.size,
          viewBox: "25 25 50 50"
        }
      }, [t("circle", {
        staticClass: "path",
        attrs: {
          cx: "50",
          cy: "50",
          r: "20",
          fill: "none",
          stroke: "currentColor",
          "stroke-width": "3",
          "stroke-miterlimit": "10"
        }
      })]);
    }
  },
      Kt = {
    mixins: [Ut],
    name: "QSpinner"
  },
      Yt = {
    name: "QBtn",
    mixins: [Vt],
    props: {
      percentage: Number,
      darkPercentage: Boolean,
      waitForRipple: Boolean,
      repeatTimeout: [Number, Function]
    },
    computed: {
      hasPercentage: function hasPercentage() {
        return void 0 !== this.percentage;
      },
      width: function width() {
        return Pt(this.percentage, 0, 100) + "%";
      },
      events: function events() {
        var t = this;
        return this.isDisabled || !this.repeatTimeout ? {
          click: this.click,
          keydown: this.__onKeyDown,
          keyup: this.__onKeyUp
        } : {
          mousedown: this.__startRepeat,
          touchstart: this.__startRepeat,
          keydown: function keydown(e) {
            t.__onKeyDown(e, !0);
          },
          mouseup: this.__endRepeat,
          touchend: this.__endRepeat,
          keyup: function keyup(e) {
            t.__onKeyUp(e, !0);
          },
          mouseleave: this.__abortRepeat,
          touchmove: this.__abortRepeat,
          blur: this.__abortRepeat
        };
      }
    },
    data: function data() {
      return {
        repeating: !1,
        active: !1
      };
    },
    methods: {
      click: function click(t) {
        var e = this;
        if (this.__cleanup(), void 0 === this.to && !this.isDisabled || (t && F(t), !this.isDisabled)) if (t && -1 !== t.detail && "submit" === this.type) {
          F(t);
          var i = new MouseEvent("click", Object.assign({}, t, {
            detail: -1
          }));
          this.timer = setTimeout(function () {
            return e.$el && e.$el.dispatchEvent(i);
          }, 200);
        } else {
          var s = function s() {
            e.$router[e.replace ? "replace" : "push"](e.to);
          },
              n = function n() {
            e.isDisabled || (e.$emit("click", t, s), void 0 !== e.to && !1 !== t.navigate && s());
          };

          this.waitForRipple && this.hasRipple ? this.timer = setTimeout(n, 300) : n();
        }
      },
      __cleanup: function __cleanup() {
        clearTimeout(this.timer);
      },
      __onKeyDown: function __onKeyDown(t, e) {
        this.isDisabled || 13 !== t.keyCode || (this.active = !0, e ? this.__startRepeat(t) : F(t));
      },
      __onKeyUp: function __onKeyUp(t, e) {
        this.active && (this.active = !1, this.isDisabled || 13 !== t.keyCode || this[e ? "__endRepeat" : "click"](t));
      },
      __startRepeat: function __startRepeat(t) {
        var e = this;

        if (!this.repeating) {
          var i = function i() {
            e.timer = setTimeout(s, "function" == typeof e.repeatTimeout ? e.repeatTimeout(e.repeatCount) : e.repeatTimeout);
          },
              s = function s() {
            e.isDisabled || (e.repeatCount += 1, t.repeatCount = e.repeatCount, e.$emit("click", t), i());
          };

          this.repeatCount = 0, this.repeating = !0, i();
        }
      },
      __abortRepeat: function __abortRepeat() {
        this.repeating = !1, this.__cleanup();
      },
      __endRepeat: function __endRepeat(t) {
        this.repeating && (this.repeating = !1, this.repeatCount ? this.repeatCount = 0 : (t.detail || t.keyCode) && (t.repeatCount = 0, this.$emit("click", t)), this.__cleanup());
      }
    },
    beforeDestroy: function beforeDestroy() {
      this.__cleanup();
    },
    render: function render(t) {
      return t(this.isLink ? "a" : "button", {
        staticClass: "q-btn inline relative-position q-btn-item non-selectable",
        "class": this.classes,
        style: this.style,
        attrs: this.attrs,
        on: this.events,
        directives: this.hasRipple ? [{
          name: "ripple",
          value: !0,
          modifiers: {
            center: this.isRound
          }
        }] : null
      }, [this.$q.platform.is.desktop ? t("div", {
        staticClass: "q-focus-helper"
      }) : null, this.loading && this.hasPercentage ? t("div", {
        staticClass: "q-btn-progress absolute-full",
        "class": {
          "q-btn-dark-progress": this.darkPercentage
        },
        style: {
          width: this.width
        }
      }) : null, t("div", {
        staticClass: "q-btn-inner row col items-center",
        "class": this.innerClasses
      }, this.loading ? [this.$slots.loading || t(Kt)] : [this.icon ? t(dt, {
        "class": {
          "on-left": this.label && this.isRectangle
        },
        props: {
          name: this.icon
        }
      }) : null, this.label && this.isRectangle ? t("div", [this.label]) : null, this.$slots["default"], this.iconRight && this.isRectangle ? t(dt, {
        staticClass: "on-right",
        props: {
          name: this.iconRight
        }
      }) : null])]);
    }
  },
      Jt = {
    name: "QAlert",
    props: {
      type: {
        type: String,
        validator: function validator(t) {
          return ["positive", "negative", "warning", "info"].includes(t);
        }
      },
      color: {
        type: String,
        "default": "negative"
      },
      textColor: String,
      message: String,
      detail: String,
      icon: String,
      avatar: String,
      actions: Array
    },
    computed: {
      computedIcon: function computedIcon() {
        return this.icon ? this.icon : this.$q.icon.type[this.type || this.color];
      },
      classes: function classes() {
        return "bg-" + (this.type || this.color) + " text-" + (this.textColor || "white");
      }
    },
    render: function render(t) {
      var e = this,
          i = [],
          s = this.$slots.detail || this.detail;
      return this.avatar ? i.push(t("img", {
        staticClass: "avatar",
        attrs: {
          src: this.avatar
        }
      })) : (this.icon || this.type) && i.push(t(dt, {
        props: {
          name: this.computedIcon
        }
      })), t("div", [t("div", {
        staticClass: "q-alert row no-wrap shadow-2",
        "class": this.classes
      }, [i.length ? t("div", {
        staticClass: "q-alert-side col-auto row flex-center"
      }, i) : null, t("div", {
        staticClass: "q-alert-content col self-center"
      }, [t("div", this.$slots["default"] || this.message), s ? t("div", {
        staticClass: "q-alert-detail"
      }, [s]) : null]), this.actions && this.actions.length ? t("div", {
        staticClass: "q-alert-actions col-auto gutter-xs column flex-center"
      }, this.actions.map(function (i) {
        return t("div", {
          staticClass: "full-width"
        }, [t(Yt, {
          staticClass: "full-width",
          props: {
            flat: !0,
            dense: !0,
            align: "left",
            icon: i.icon,
            label: !0 === i.closeBtn ? "string" == typeof i.label ? i.label : e.$q.i18n.label.close : i.label
          },
          on: {
            click: function click() {
              return i.handler();
            }
          }
        })]);
      })) : null])]);
    }
  };

  function Xt(t, e) {
    var i = e.field,
        s = e.list,
        n = t.toLowerCase();
    return s.filter(function (t) {
      return ("" + t[i]).toLowerCase().startsWith(n);
    });
  }

  function Gt() {
    return Math.floor(65536 * (1 + Math.random())).toString(16).substring(1);
  }

  function Zt() {
    return Gt() + Gt() + "-" + Gt() + "-" + Gt() + "-" + Gt() + "-" + Gt() + Gt() + Gt();
  }

  function te(t, e, i, s, n) {
    var o = function (t, e) {
      var i = Object.assign({}, t),
          s = Object.assign({}, e),
          n = {
        x: ["left", "right"].filter(function (t) {
          return t !== s.horizontal;
        }),
        y: ["top", "bottom"].filter(function (t) {
          return t !== s.vertical;
        })
      },
          o = -1 !== [i.horizontal, s.horizontal].indexOf("middle"),
          r = -1 !== [i.vertical, s.vertical].indexOf("center");
      return n.x.splice(o ? 0 : 1, 0, "middle"), n.y.splice(r ? 0 : 1, 0, "center"), r || (i.vertical = "top" === i.vertical ? "bottom" : "top"), o || (i.horizontal = "left" === i.horizontal ? "right" : "left"), {
        positions: n,
        anchorPos: i
      };
    }(s, i),
        r = o.positions,
        a = o.anchorPos;

    if (n.top < 0 || n.top + e.bottom > window.innerHeight) {
      var l = t[a.vertical] - e[r.y[0]];
      l + e.bottom <= window.innerHeight ? n.top = l : (l = t[a.vertical] - e[r.y[1]]) + e.bottom <= window.innerHeight && (n.top = l);
    }

    if (n.left < 0 || n.left + e.right > window.innerWidth) {
      var c = t[a.horizontal] - e[r.x[0]];
      c + e.right <= window.innerWidth ? n.left = c : (c = t[a.horizontal] - e[r.x[1]]) + e.right <= window.innerWidth && (n.left = c);
    }

    return n;
  }

  function ee(t) {
    var e,
        i = t.el,
        s = t.animate,
        n = t.anchorEl,
        o = t.anchorOrigin,
        r = t.selfOrigin,
        a = t.maxHeight,
        l = t.event,
        c = t.anchorClick,
        h = t.touchPosition,
        u = t.offset;
    if (i.style.maxHeight = a || "65vh", !l || c && !h) e = function (t, e) {
      var i = t.getBoundingClientRect(),
          s = i.top,
          n = i.left,
          o = i.right,
          r = i.bottom,
          a = {
        top: s,
        left: n,
        width: t.offsetWidth,
        height: t.offsetHeight
      };
      return e && (a.top -= e[1], a.left -= e[0], r && (r += e[1]), o && (o += e[0]), a.width += e[0], a.height += e[1]), a.right = o || a.left + a.width, a.bottom = r || a.top + a.height, a.middle = a.left + (a.right - a.left) / 2, a.center = a.top + (a.bottom - a.top) / 2, a;
    }(n, u);else {
      var d = N(l),
          p = d.top,
          f = d.left;
      e = {
        top: p,
        left: f,
        width: 1,
        height: 1,
        right: f + 1,
        center: p,
        middle: f,
        bottom: p + 1
      };
    }

    var m = function (t) {
      return {
        top: 0,
        center: t.offsetHeight / 2,
        bottom: t.offsetHeight,
        left: 0,
        middle: t.offsetWidth / 2,
        right: t.offsetWidth
      };
    }(i),
        g = {
      top: e[o.vertical] - m[r.vertical],
      left: e[o.horizontal] - m[r.horizontal]
    };

    if (g = te(e, m, r, o, g), i.style.top = Math.max(0, g.top) + "px", i.style.left = Math.max(0, g.left) + "px", s) {
      var v = g.top < e.top ? ["up", "down"] : ["down", "up"];
      i.classList.add("animate-popup-" + v[0]), i.classList.remove("animate-popup-" + v[1]);
    }
  }

  function ie(t) {
    var e = t.split(" ");
    return 2 === e.length && (["top", "center", "bottom"].includes(e[0]) ? !!["left", "middle", "right"].includes(e[1]) || (console.error("Anchor/Self position must end with one of left/middle/right"), !1) : (console.error("Anchor/Self position must start with one of top/center/bottom"), !1));
  }

  function se(t) {
    return !t || 2 === t.length && "number" == typeof t[0] && "number" == typeof t[1];
  }

  function ne(t) {
    var e = t.split(" ");
    return {
      vertical: e[0],
      horizontal: e[1]
    };
  }

  function oe(t) {
    var e,
        i = !1;

    function s() {
      for (var s = this, n = [], o = arguments.length; o--;) {
        n[o] = arguments[o];
      }

      i || (i = !0, e = requestAnimationFrame(function () {
        t.apply(s, n), i = !1;
      }));
    }

    return s.cancel = function () {
      window.cancelAnimationFrame(e), i = !1;
    }, s;
  }

  var re = {
    data: function data() {
      return {
        canRender: !n
      };
    },
    mounted: function mounted() {
      !1 === this.canRender && (this.canRender = !0);
    }
  },
      ae = {
    name: "QPopover",
    mixins: [M, re],
    props: {
      anchor: {
        type: String,
        validator: ie
      },
      self: {
        type: String,
        validator: ie
      },
      fit: Boolean,
      maxHeight: String,
      touchPosition: Boolean,
      anchorClick: {
        type: Boolean,
        "default": !0
      },
      offset: {
        type: Array,
        validator: se
      },
      noFocus: Boolean,
      noRefocus: Boolean,
      disable: Boolean
    },
    watch: {
      $route: function $route() {
        this.hide();
      }
    },
    computed: {
      anchorOrigin: function anchorOrigin() {
        return ne(this.anchor || "bottom " + (this.$q.i18n.rtl ? "right" : "left"));
      },
      selfOrigin: function selfOrigin() {
        return ne(this.self || "top " + (this.$q.i18n.rtl ? "right" : "left"));
      }
    },
    render: function render(t) {
      if (this.canRender) return t("div", {
        staticClass: "q-popover scroll",
        ref: "content",
        attrs: {
          tabindex: -1
        },
        on: {
          click: function click(t) {
            t.stopPropagation();
          }
        }
      }, this.$slots["default"]);
    },
    mounted: function mounted() {
      var t = this;
      this.__updatePosition = oe(function (e, i, s) {
        return t.reposition(i, s);
      }), this.$nextTick(function () {
        t.anchorEl = t.$el.parentNode, t.anchorEl.removeChild(t.$el), (t.anchorEl.classList.contains("q-btn-inner") || t.anchorEl.classList.contains("q-if-inner")) && (t.anchorEl = t.anchorEl.parentNode), t.anchorClick && (t.anchorEl.classList.add("cursor-pointer"), t.anchorEl.addEventListener("click", t.toggle), t.anchorEl.addEventListener("keyup", t.__toggleKey));
      }), this.value && this.show();
    },
    beforeDestroy: function beforeDestroy() {
      this.anchorClick && this.anchorEl && (this.anchorEl.removeEventListener("click", this.toggle), this.anchorEl.removeEventListener("keyup", this.__toggleKey));
    },
    methods: {
      __show: function __show(t) {
        var e = this;
        this.noRefocus || (this.__refocusTarget = this.anchorClick && this.anchorEl || document.activeElement), document.body.appendChild(this.$el), P.register(function () {
          e.hide();
        }), this.scrollTarget = G(this.anchorEl), this.scrollTarget.addEventListener("scroll", this.__updatePosition, L.passive), window.addEventListener("resize", this.__updatePosition, L.passive), this.__updatePosition(0, t, !0), clearTimeout(this.timer), !this.noFocus && this.$refs.content && this.$refs.content.focus(), this.timer = setTimeout(function () {
          document.body.addEventListener("click", e.__bodyHide, !0), document.body.addEventListener("touchstart", e.__bodyHide, !0), e.showPromise && e.showPromiseResolve();
        }, 0);
      },
      __toggleKey: function __toggleKey(t) {
        13 === t.keyCode && this.toggle(t);
      },
      __bodyHide: function __bodyHide(t) {
        t && t.target && (this.$el.contains(t.target) || this.anchorEl.contains(t.target)) || this.hide(t);
      },
      __hide: function __hide() {
        clearTimeout(this.timer), document.body.removeEventListener("click", this.__bodyHide, !0), document.body.removeEventListener("touchstart", this.__bodyHide, !0), this.scrollTarget.removeEventListener("scroll", this.__updatePosition, L.passive), window.removeEventListener("resize", this.__updatePosition, L.passive), P.pop(), this.$el.remove(), this.hidePromise && this.hidePromiseResolve(), !this.noRefocus && this.__refocusTarget && this.__refocusTarget.focus();
      },
      reposition: function reposition(t, e) {
        this.fit && (this.$el.style.minWidth = W(this.anchorEl) + "px");
        var i = this.anchorEl.getBoundingClientRect(),
            s = i.top;
        if (i.bottom < 0 || s > window.innerHeight) return this.hide();
        ee({
          event: t,
          animate: e,
          el: this.$el,
          offset: this.offset,
          anchorEl: this.anchorEl,
          anchorOrigin: this.anchorOrigin,
          selfOrigin: this.selfOrigin,
          maxHeight: this.maxHeight,
          anchorClick: this.anchorClick,
          touchPosition: this.touchPosition
        });
      }
    }
  };

  function le(t, e, i, s, n, o) {
    var r = {
      props: {
        right: o.right
      }
    };
    if (s && n) t.push(e(i, r, s));else {
      var a = !1;

      for (var l in o) {
        if (o.hasOwnProperty(l) && void 0 !== (a = o[l]) && !0 !== a) {
          t.push(e(i, {
            props: o
          }));
          break;
        }
      }

      s && t.push(e(i, r, s));
    }
  }

  var ce = {
    name: "QItemWrapper",
    props: {
      cfg: {
        type: Object,
        "default": function _default() {
          return {};
        }
      },
      slotReplace: Boolean
    },
    render: function render(t) {
      var e = this.cfg,
          i = this.slotReplace,
          s = [];
      return le(s, t, wt, this.$slots.left, i, {
        icon: e.icon,
        color: e.leftColor,
        avatar: e.avatar,
        letter: e.letter,
        image: e.image,
        inverted: e.leftInverted,
        textColor: e.leftTextColor
      }), le(s, t, xt, this.$slots.main, i, {
        label: e.label,
        sublabel: e.sublabel,
        labelLines: e.labelLines,
        sublabelLines: e.sublabelLines,
        inset: e.inset
      }), le(s, t, wt, this.$slots.right, i, {
        right: !0,
        icon: e.rightIcon,
        color: e.rightColor,
        avatar: e.rightAvatar,
        letter: e.rightLetter,
        image: e.rightImage,
        stamp: e.stamp,
        inverted: e.rightInverted,
        textColor: e.rightTextColor
      }), s.push(this.$slots["default"]), t(yt, {
        attrs: this.$attrs,
        on: this.$listeners,
        props: e
      }, s);
    }
  },
      he = {
    data: function data() {
      return {
        keyboardIndex: 0,
        keyboardMoveDirection: !1,
        keyboardMoveTimer: !1
      };
    },
    watch: {
      keyboardIndex: function keyboardIndex(t) {
        var e = this;
        this.$refs.popover && this.$refs.popover.showing && this.keyboardMoveDirection && t > -1 && this.$nextTick(function () {
          if (e.$refs.popover) {
            var t = e.$refs.popover.$el.querySelector(".q-select-highlight");

            if (t && t.scrollIntoView) {
              if (t.scrollIntoViewIfNeeded) return t.scrollIntoViewIfNeeded(!1);
              t.scrollIntoView(e.keyboardMoveDirection < 0);
            }
          }
        });
      }
    },
    methods: {
      __keyboardShow: function __keyboardShow(t) {
        void 0 === t && (t = 0), this.keyboardIndex !== t && (this.keyboardIndex = t);
      },
      __keyboardSetCurrentSelection: function __keyboardSetCurrentSelection(t) {
        this.keyboardIndex >= 0 && this.keyboardIndex <= this.keyboardMaxIndex && this.__keyboardSetSelection(this.keyboardIndex, t);
      },
      __keyboardHandleKey: function __keyboardHandleKey(t) {
        var e = E(t);

        switch (e) {
          case 38:
            this.__keyboardMoveCursor(-1, t);

            break;

          case 40:
            this.__keyboardMoveCursor(1, t);

            break;

          case 13:
            if (this.$refs.popover.showing) return F(t), void this.__keyboardSetCurrentSelection();
            break;

          case 9:
            this.hide();
        }

        this.__keyboardCustomKeyHandle(e, t);
      },
      __keyboardMoveCursor: function __keyboardMoveCursor(t, e) {
        var i = this;

        if (F(e), this.$refs.popover.showing) {
          clearTimeout(this.keyboardMoveTimer);

          var s = this.keyboardIndex,
              n = this.__keyboardIsSelectableIndex || function () {
            return !0;
          };

          do {
            s = Mt(s + t, -1, i.keyboardMaxIndex);
          } while (s !== this.keyboardIndex && !n(s));

          return this.keyboardMoveDirection = s > this.keyboardIndex ? 1 : -1, this.keyboardMoveTimer = setTimeout(function () {
            i.keyboardMoveDirection = !1;
          }, 500), void (this.keyboardIndex = s);
        }

        this.__keyboardShowTrigger();
      }
    }
  },
      ue = {
    name: "QAutocomplete",
    mixins: [he],
    props: {
      minCharacters: {
        type: Number,
        "default": 1
      },
      maxResults: {
        type: Number,
        "default": 6
      },
      maxHeight: String,
      debounce: {
        type: Number,
        "default": 500
      },
      filter: {
        type: Function,
        "default": Xt
      },
      staticData: Object,
      valueField: {
        type: [String, Function],
        "default": "value"
      },
      separator: Boolean
    },
    inject: {
      __input: {
        "default": function _default() {
          console.error("QAutocomplete needs to be child of QInput, QChipsInput or QSearch");
        }
      },
      __inputDebounce: {
        "default": null
      }
    },
    data: function data() {
      return {
        searchId: "",
        results: [],
        width: 0,
        enterKey: !1,
        timer: null
      };
    },
    watch: {
      "__input.val": function __inputVal() {
        this.enterKey ? this.enterKey = !1 : this.__delayTrigger();
      }
    },
    computed: {
      computedResults: function computedResults() {
        return this.maxResults && this.results.length > 0 ? this.results.slice(0, this.maxResults) : [];
      },
      computedValueField: function computedValueField() {
        return this.valueField || (this.staticData ? this.staticData.field : "value");
      },
      keyboardMaxIndex: function keyboardMaxIndex() {
        return this.computedResults.length - 1;
      },
      computedWidth: function computedWidth() {
        return {
          minWidth: this.width
        };
      },
      searching: function searching() {
        return this.searchId.length > 0;
      }
    },
    methods: {
      isWorking: function isWorking() {
        return this.$refs && this.$refs.popover;
      },
      trigger: function trigger(t) {
        var e = this;

        if (this.__input && this.__input.isEditable() && this.__input.hasFocus() && this.isWorking()) {
          var i = [null, void 0].includes(this.__input.val) ? "" : String(this.__input.val),
              s = i.length,
              n = Zt();
          if (this.searchId = n, s < this.minCharacters || !0 === t && s > 0) return this.searchId = "", this.__clearSearch(), void this.hide();

          if (this.width = W(this.inputEl) + "px", this.staticData) {
            this.searchId = "", this.results = this.filter(i, this.staticData);
            var o = this.$refs.popover;
            this.results.length ? (this.__keyboardShow(-1), o && o.showing ? this.$nextTick(function () {
              return o && o.reposition();
            }) : o.show()) : o.hide();
          } else this.__input.loading = !0, this.$emit("search", i, function (t) {
            if (e.isWorking() && e.searchId === n) {
              if (e.__clearSearch(), Array.isArray(t) && t.length > 0) return e.results = t, e.__keyboardShow(-1), void e.$refs.popover.show();
              e.hide();
            }
          });
        }
      },
      hide: function hide() {
        return this.results = [], this.isWorking() ? this.$refs.popover.hide() : Promise.resolve();
      },
      blurHide: function blurHide() {
        var t = this;
        this.__clearSearch(), this.timer = setTimeout(function () {
          return t.hide();
        }, 300);
      },
      __clearSearch: function __clearSearch() {
        clearTimeout(this.timer), this.__input.loading = !1, this.searchId = "";
      },
      __keyboardCustomKeyHandle: function __keyboardCustomKeyHandle(t) {
        switch (t) {
          case 27:
            this.__clearSearch();

            break;

          case 38:
          case 40:
          case 9:
            this.__keyboardSetCurrentSelection(!0);

        }
      },
      __keyboardShowTrigger: function __keyboardShowTrigger() {
        this.trigger();
      },
      __focusShowTrigger: function __focusShowTrigger() {
        var t = this;
        clearTimeout(this.timer), this.timer = setTimeout(function () {
          return t.trigger(!0);
        }, 100);
      },
      __keyboardIsSelectableIndex: function __keyboardIsSelectableIndex(t) {
        return t > -1 && t < this.computedResults.length && !this.computedResults[t].disable;
      },
      setValue: function setValue(t, e) {
        var i = "function" == typeof this.computedValueField ? this.computedValueField(t) : t[this.computedValueField],
            s = this.__inputDebounce ? "Debounce" : "";
        this.inputEl && this.__input && !this.__input.hasFocus() && this.inputEl.focus(), this.enterKey = this.__input && i !== this.__input.val, this["__input" + s][e ? "setNav" : "set"](i), this.$emit("selected", t, !!e), e || (this.__clearSearch(), this.hide());
      },
      __keyboardSetSelection: function __keyboardSetSelection(t, e) {
        this.setValue(this.results[t], e);
      },
      __delayTrigger: function __delayTrigger() {
        this.__clearSearch(), this.__input.hasFocus() && (this.staticData ? this.trigger() : this.timer = setTimeout(this.trigger, this.debounce));
      }
    },
    mounted: function mounted() {
      var t = this;
      this.__input.register(), this.__inputDebounce && this.__inputDebounce.setChildDebounce(!0), this.$nextTick(function () {
        t.__input && (t.inputEl = t.__input.getEl()), t.inputEl.addEventListener("keydown", t.__keyboardHandleKey), t.inputEl.addEventListener("blur", t.blurHide), t.inputEl.addEventListener("focus", t.__focusShowTrigger);
      });
    },
    beforeDestroy: function beforeDestroy() {
      this.__clearSearch(), this.__input.unregister(), this.__inputDebounce && this.__inputDebounce.setChildDebounce(!1), this.inputEl && (this.inputEl.removeEventListener("keydown", this.__keyboardHandleKey), this.inputEl.removeEventListener("blur", this.blurHide), this.inputEl.removeEventListener("focus", this.__focusShowTrigger), this.hide());
    },
    render: function render(t) {
      var e = this,
          i = this.__input.isDark();

      return t(ae, {
        ref: "popover",
        "class": i ? "bg-dark" : null,
        props: {
          fit: !0,
          anchorClick: !1,
          maxHeight: this.maxHeight,
          noFocus: !0,
          noRefocus: !0
        },
        on: {
          show: function show() {
            e.__input.selectionOpen = !0, e.$emit("show");
          },
          hide: function hide() {
            e.__input.selectionOpen = !1, e.$emit("hide");
          }
        }
      }, [t(pt, {
        props: {
          dark: i,
          noBorder: !0,
          separator: this.separator
        },
        style: this.computedWidth
      }, this.computedResults.map(function (i, s) {
        return t(ce, {
          key: i.id || s,
          "class": {
            "q-select-highlight": e.keyboardIndex === s,
            "cursor-pointer": !i.disable,
            "text-faded": i.disable
          },
          props: {
            cfg: i
          },
          nativeOn: {
            mouseenter: function mouseenter() {
              !i.disable && (e.keyboardIndex = s);
            },
            click: function click() {
              !i.disable && e.setValue(i);
            }
          }
        });
      }))]);
    }
  },
      de = {
    name: "QBreadcrumbs",
    mixins: [Qt],
    props: {
      color: {
        type: String,
        "default": "faded"
      },
      activeColor: {
        type: String,
        "default": "primary"
      },
      separator: {
        type: String,
        "default": "/"
      },
      align: Object.assign({}, Qt.props.align, {
        "default": "left"
      })
    },
    computed: {
      classes: function classes() {
        return ["text-" + this.color, this.alignClass];
      }
    },
    render: function render(t) {
      var e = this;

      if (this.$slots["default"]) {
        var i = [],
            s = this.$slots["default"].filter(function (t) {
          return void 0 !== t.tag && t.tag.endsWith("-QBreadcrumbsEl");
        }).length,
            n = this.$scopedSlots.separator || function () {
          return e.separator;
        },
            o = "text-" + this.color,
            r = "text-" + this.activeColor,
            a = 1;

        for (var l in e.$slots["default"]) {
          var c = e.$slots["default"][l];

          if (void 0 !== c.tag && c.tag.endsWith("-QBreadcrumbsEl")) {
            var h = a < s;
            a++, i.push(t("div", {
              staticClass: "flex items-center",
              "class": [h ? r : o, h ? "text-weight-bold" : "q-breadcrumbs-last"]
            }, [c])), h && i.push(t("div", {
              staticClass: "q-breadcrumbs-separator",
              "class": o
            }, [n()]));
          } else i.push(c);
        }

        return t("div", {
          staticClass: "q-breadcrumbs flex gutter-xs items-center overflow-hidden",
          "class": this.classes
        }, i);
      }
    }
  },
      pe = {
    name: "QBreadcrumbsEl",
    mixins: [{
      props: bt
    }],
    props: {
      label: String,
      icon: String,
      color: String
    },
    render: function render(t) {
      return t(void 0 !== this.to ? "router-link" : "span", {
        staticClass: "q-link q-breadcrumbs-el flex inline items-center relative-position",
        props: void 0 !== this.to ? this.$props : null
      }, [this.icon ? t(dt, {
        staticClass: "q-breacrumbs-el-icon q-mr-sm",
        props: {
          name: this.icon
        }
      }) : null, this.label].concat(this.$slots["default"]));
    }
  },
      fe = {
    name: "QBtnGroup",
    props: {
      outline: Boolean,
      flat: Boolean,
      rounded: Boolean,
      push: Boolean
    },
    computed: {
      classes: function classes() {
        var t = this;
        return ["outline", "flat", "rounded", "push"].filter(function (e) {
          return t[e];
        }).map(function (t) {
          return "q-btn-group-" + t;
        }).join(" ");
      }
    },
    render: function render(t) {
      return t("div", {
        staticClass: "q-btn-group row no-wrap inline",
        "class": this.classes
      }, this.$slots["default"]);
    }
  },
      me = {
    name: "QBtnDropdown",
    mixins: [Vt],
    props: {
      value: Boolean,
      split: Boolean,
      contentClass: [Array, String, Object],
      contentStyle: [Array, String, Object],
      popoverAnchor: {
        type: String,
        "default": "bottom right"
      },
      popoverSelf: {
        type: String,
        "default": "top right"
      }
    },
    data: function data() {
      return {
        showing: this.value
      };
    },
    watch: {
      value: function value(t) {
        this.$refs.popover && this.$refs.popover[t ? "show" : "hide"]();
      }
    },
    render: function render(t) {
      var e = this,
          i = t(ae, {
        ref: "popover",
        props: {
          disable: this.disable,
          fit: !0,
          anchorClick: !this.split,
          anchor: this.popoverAnchor,
          self: this.popoverSelf
        },
        "class": this.contentClass,
        style: this.contentStyle,
        on: {
          show: function show(t) {
            e.showing = !0, e.$emit("show", t), e.$emit("input", !0);
          },
          hide: function hide(t) {
            e.showing = !1, e.$emit("hide", t), e.$emit("input", !1);
          }
        }
      }, this.$slots["default"]),
          s = t(dt, {
        props: {
          name: this.$q.icon.input.dropdown
        },
        staticClass: "transition-generic",
        "class": {
          "rotate-180": this.showing,
          "on-right": !this.split,
          "q-btn-dropdown-arrow": !this.split
        }
      }),
          n = t(Yt, {
        props: Object.assign({}, this.$props, {
          iconRight: this.split ? this.iconRight : null
        }),
        "class": this.split ? "q-btn-dropdown-current" : "q-btn-dropdown q-btn-dropdown-simple",
        on: {
          click: function click(t) {
            e.split && e.hide(), e.disable || e.$emit("click", t);
          }
        }
      }, this.split ? null : [s, i]);
      return this.split ? t(fe, {
        props: {
          outline: this.outline,
          flat: this.flat,
          rounded: this.rounded,
          push: this.push
        },
        staticClass: "q-btn-dropdown q-btn-dropdown-split no-wrap q-btn-item"
      }, [n, t(Yt, {
        props: {
          disable: this.disable,
          outline: this.outline,
          flat: this.flat,
          rounded: this.rounded,
          push: this.push,
          size: this.size,
          color: this.color,
          textColor: this.textColor,
          dense: this.dense,
          glossy: this.glossy,
          noRipple: this.noRipple,
          waitForRipple: this.waitForRipple
        },
        staticClass: "q-btn-dropdown-arrow",
        on: {
          click: function click() {
            e.toggle();
          }
        }
      }, [s]), [i]]) : n;
    },
    methods: {
      toggle: function toggle() {
        return this.$refs.popover ? this.$refs.popover.toggle() : Promise.resolve();
      },
      show: function show() {
        return this.$refs.popover ? this.$refs.popover.show() : Promise.resolve();
      },
      hide: function hide() {
        return this.$refs.popover ? this.$refs.popover.hide() : Promise.resolve();
      }
    },
    mounted: function mounted() {
      var t = this;
      this.$nextTick(function () {
        t.value && t.$refs.popover && t.$refs.popover.show();
      });
    }
  },
      ge = {
    name: "QBtnToggle",
    props: {
      value: {
        required: !0
      },
      color: String,
      textColor: String,
      toggleColor: {
        type: String,
        "default": "primary"
      },
      toggleTextColor: String,
      options: {
        type: Array,
        required: !0,
        validator: function validator(t) {
          return t.every(function (t) {
            return ("label" in t || "icon" in t) && "value" in t;
          });
        }
      },
      readonly: Boolean,
      disable: Boolean,
      noCaps: Boolean,
      noWrap: Boolean,
      outline: Boolean,
      flat: Boolean,
      dense: Boolean,
      rounded: Boolean,
      push: Boolean,
      size: String,
      glossy: Boolean,
      noRipple: Boolean,
      waitForRipple: Boolean
    },
    computed: {
      val: function val() {
        var t = this;
        return this.options.map(function (e) {
          return e.value === t.value;
        });
      }
    },
    methods: {
      set: function set(t, e) {
        var i = this;
        this.readonly || (this.$emit("input", t, e), this.$nextTick(function () {
          JSON.stringify(t) !== JSON.stringify(i.value) && i.$emit("change", t, e);
        }));
      }
    },
    render: function render(t) {
      var e = this;
      return t(fe, {
        staticClass: "q-btn-toggle",
        props: {
          outline: this.outline,
          flat: this.flat,
          rounded: this.rounded,
          push: this.push
        }
      }, this.options.map(function (i, s) {
        return t(Yt, {
          key: "" + i.label + i.icon + i.iconRight,
          on: {
            click: function click() {
              return e.set(i.value, i);
            }
          },
          props: {
            disable: e.disable,
            label: i.label,
            color: e.val[s] ? i.toggleColor || e.toggleColor : i.color || e.color,
            textColor: e.val[s] ? i.toggleTextColor || e.toggleTextColor : i.textColor || e.textColor,
            icon: i.icon,
            iconRight: i.iconRight,
            noCaps: e.noCaps || i.noCaps,
            noWrap: e.noWrap || i.noWrap,
            outline: e.outline,
            flat: e.flat,
            rounded: e.rounded,
            push: e.push,
            glossy: e.glossy,
            size: e.size,
            dense: e.dense,
            noRipple: e.noRipple || i.noRipple,
            waitForRipple: e.waitForRipple || i.waitForRipple,
            tabindex: i.tabindex
          }
        });
      }));
    }
  },
      ve = {
    name: "QCard",
    props: {
      square: Boolean,
      flat: Boolean,
      inline: Boolean,
      color: String,
      textColor: String
    },
    computed: {
      classes: function classes() {
        var t = [{
          "no-border-radius": this.square,
          "no-shadow": this.flat,
          "inline-block": this.inline
        }];
        return this.color ? (t.push("bg-" + this.color), t.push("q-card-dark"), t.push("text-" + (this.textColor || "white"))) : this.textColor && t.push("text-" + this.textColor), t;
      }
    },
    render: function render(t) {
      return t("div", {
        staticClass: "q-card",
        "class": this.classes
      }, this.$slots["default"]);
    }
  },
      be = {
    name: "QCardActions",
    props: {
      vertical: Boolean,
      align: {
        type: String,
        "default": "start",
        validator: function validator(t) {
          return ["start", "center", "end", "around", "between"].includes(t);
        }
      }
    },
    computed: {
      classes: function classes() {
        return "q-card-actions-" + (this.vertical ? "vert column justify-start" : "horiz row") + " " + (this.vertical ? "items" : "justify") + "-" + this.align;
      }
    },
    render: function render(t) {
      return t("div", {
        staticClass: "q-card-actions",
        "class": this.classes
      }, this.$slots["default"]);
    }
  },
      _e = {
    name: "QCardMedia",
    props: {
      overlayPosition: {
        type: String,
        "default": "bottom",
        validator: function validator(t) {
          return ["top", "bottom", "full"].includes(t);
        }
      }
    },
    render: function render(t) {
      return t("div", {
        staticClass: "q-card-media relative-position"
      }, [this.$slots["default"], this.$slots.overlay ? t("div", {
        staticClass: "q-card-media-overlay",
        "class": "absolute-" + this.overlayPosition
      }, [this.$slots.overlay]) : null]);
    }
  },
      ye = {
    name: "QCardSeparator",
    props: {
      inset: Boolean
    },
    render: function render(t) {
      return t("div", {
        staticClass: "q-card-separator",
        "class": {
          inset: this.inset
        }
      }, this.$slots["default"]);
    }
  };

  function we(t, e, i) {
    var s = N(t),
        n = s.left - e.event.x,
        o = s.top - e.event.y,
        r = Math.abs(n),
        a = Math.abs(o);
    return {
      evt: t,
      position: s,
      direction: e.direction.horizontal && !e.direction.vertical ? n < 0 ? "left" : "right" : !e.direction.horizontal && e.direction.vertical ? o < 0 ? "up" : "down" : r >= a ? n < 0 ? "left" : "right" : o < 0 ? "up" : "down",
      isFirst: e.event.isFirst,
      isFinal: Boolean(i),
      duration: new Date().getTime() - e.event.time,
      distance: {
        x: r,
        y: a
      },
      delta: {
        x: s.left - e.event.lastX,
        y: s.top - e.event.lastY
      }
    };
  }

  var Ce = {
    name: "touch-pan",
    bind: function bind(t, e) {
      var i = !e.modifiers.noMouse,
          s = e.modifiers.stop,
          n = e.modifiers.prevent,
          o = n || e.modifiers.mightPrevent ? null : L.passive,
          r = {
        handler: e.value,
        direction: function (t) {
          if (!t.horizontal && !t.vertical) return {
            horizontal: !0,
            vertical: !0
          };
          var e = {};
          return ["horizontal", "vertical"].forEach(function (i) {
            t[i] && (e[i] = !0);
          }), e;
        }(e.modifiers),
        mouseStart: function mouseStart(t) {
          B(t) && (document.addEventListener("mousemove", r.move, o), document.addEventListener("mouseup", r.mouseEnd, o), r.start(t));
        },
        mouseEnd: function mouseEnd(t) {
          document.removeEventListener("mousemove", r.move, o), document.removeEventListener("mouseup", r.mouseEnd, o), r.end(t);
        },
        start: function start(e) {
          var i = N(e);
          r.event = {
            x: i.left,
            y: i.top,
            time: new Date().getTime(),
            detected: r.direction.horizontal && r.direction.vertical,
            abort: !1,
            isFirst: !0,
            lastX: i.left,
            lastY: i.top
          }, r.event.detected && (t.classList.add("q-touch"), s && e.stopPropagation(), n && e.preventDefault());
        },
        move: function move(t) {
          if (!r.event.abort) if (r.event.detected) {
            s && t.stopPropagation(), n && t.preventDefault();
            var e = we(t, r, !1);
            (function (t, e) {
              return !(!t.direction.horizontal || !t.direction.vertical) || (t.direction.horizontal && !t.direction.vertical ? Math.abs(e.delta.x) > 0 : !t.direction.horizontal && t.direction.vertical ? Math.abs(e.delta.y) > 0 : void 0);
            })(r, e) && (r.handler(e), r.event.lastX = e.position.left, r.event.lastY = e.position.top, r.event.isFirst = !1);
          } else {
            var i = N(t),
                o = Math.abs(i.left - r.event.x),
                a = Math.abs(i.top - r.event.y);
            o !== a && (r.event.detected = !0, r.event.abort = r.direction.vertical ? o > a : o < a, r.move(t));
          }
        },
        end: function end(e) {
          t.classList.remove("q-touch"), r.event.abort || !r.event.detected || r.event.isFirst || (s && e.stopPropagation(), n && e.preventDefault(), r.handler(we(e, r, !0)));
        }
      };
      t.__qtouchpan = r, i && t.addEventListener("mousedown", r.mouseStart, o), t.addEventListener("touchstart", r.start, o), t.addEventListener("touchmove", r.move, o), t.addEventListener("touchend", r.end, o);
    },
    update: function update(t, e) {
      e.oldValue !== e.value && (t.__qtouchpan.handler = e.value);
    },
    unbind: function unbind(t, e) {
      var i = t.__qtouchpan;

      if (i) {
        var s = e.modifiers.prevent ? null : L.passive;
        t.removeEventListener("mousedown", i.mouseStart, s), t.removeEventListener("touchstart", i.start, s), t.removeEventListener("touchmove", i.move, s), t.removeEventListener("touchend", i.end, s), delete t.__qtouchpan;
      }
    }
  };

  function xe(t) {
    return "[object Date]" === Object.prototype.toString.call(t);
  }

  function ke(t) {
    return "number" == typeof t && isFinite(t);
  }

  var Se = function Se(t) {
    return t;
  },
      qe = function qe(t) {
    return t < .5 ? 2 * t * t : (4 - 2 * t) * t - 1;
  },
      $e = function $e(t) {
    return Math.pow(t, 3);
  },
      Te = function Te(t) {
    return 1 + Math.pow(t - 1, 3);
  },
      Pe = function Pe(t) {
    return t < .4031 ? 12 * Math.pow(t, 4) : 1 / 1290 * (11 * Math.sqrt(-4e4 * t * t + 8e4 * t - 23359) - 129);
  },
      Me = Te,
      Le = {
    linear: Se,
    easeInQuad: function easeInQuad(t) {
      return t * t;
    },
    easeOutQuad: function easeOutQuad(t) {
      return t * (2 - t);
    },
    easeInOutQuad: qe,
    easeInCubic: $e,
    easeOutCubic: Te,
    easeInOutCubic: function easeInOutCubic(t) {
      return t < .5 ? 4 * Math.pow(t, 3) : 1 + (t - 1) * Math.pow(2 * t - 2, 2);
    },
    easeInQuart: function easeInQuart(t) {
      return Math.pow(t, 4);
    },
    easeOutQuart: function easeOutQuart(t) {
      return 1 - Math.pow(t - 1, 4);
    },
    easeInOutQuart: function easeInOutQuart(t) {
      return t < .5 ? 8 * Math.pow(t, 4) : 1 - 8 * Math.pow(t - 1, 4);
    },
    easeInQuint: function easeInQuint(t) {
      return Math.pow(t, 5);
    },
    easeOutQuint: function easeOutQuint(t) {
      return 1 + Math.pow(t - 1, 5);
    },
    easeInOutQuint: function easeInOutQuint(t) {
      return t < .5 ? 16 * Math.pow(t, 5) : 1 + 16 * Math.pow(t - 1, 5);
    },
    easeInCirc: function easeInCirc(t) {
      return -1 * Math.sqrt(1 - Math.pow(t, 2)) + 1;
    },
    easeOutCirc: function easeOutCirc(t) {
      return Math.sqrt(-1 * (t - 2) * t);
    },
    easeInOutCirc: function easeInOutCirc(t) {
      return t < .5 ? .5 * (1 - Math.sqrt(1 - 4 * t * t)) : .5 * (1 + Math.sqrt(8 * t - 3 - 4 * t * t));
    },
    overshoot: function overshoot(t) {
      return -1 * Math.pow(Math.E, -6.3 * t) * Math.cos(5 * t) + 1;
    },
    standard: Pe,
    decelerate: Me,
    accelerate: $e,
    sharp: qe
  },
      Be = {};

  function Ee(t) {
    var e = t.name,
        i = t.duration;
    void 0 === i && (i = 300);
    var s = t.to,
        n = t.from,
        o = t.apply,
        r = t.done,
        a = t.cancel,
        l = t.easing,
        c = e,
        h = new Date();
    c ? Ne(c) : c = Zt();

    var u = l || Se,
        d = function d() {
      var t = (new Date() - h) / i;
      t > 1 && (t = 1);
      var e = n + (s - n) * u(t);
      if (o(e, t), 1 === t) return delete Be[c], void (r && r(e));
      p.last = {
        pos: e,
        progress: t
      }, p.timer = requestAnimationFrame(d);
    },
        p = Be[c] = {
      cancel: a,
      timer: requestAnimationFrame(d)
    };

    return c;
  }

  function Ne(t) {
    if (t) {
      var e = Be[t];
      e && e.timer && (cancelAnimationFrame(e.timer), e.cancel && e.cancel(e.last), delete Be[t]);
    }
  }

  var Oe = {
    start: Ee,
    stop: Ne
  },
      De = {
    data: function data() {
      return {
        inFullscreen: !1
      };
    },
    watch: {
      $route: function $route() {
        this.exitFullscreen();
      },
      inFullscreen: function inFullscreen(t) {
        this.$emit("fullscreen", t);
      }
    },
    methods: {
      toggleFullscreen: function toggleFullscreen() {
        this.inFullscreen ? this.exitFullscreen() : this.setFullscreen();
      },
      setFullscreen: function setFullscreen() {
        this.inFullscreen || (this.inFullscreen = !0, this.container = this.$el.parentNode, this.container.replaceChild(this.fullscreenFillerNode, this.$el), document.body.appendChild(this.$el), document.body.classList.add("q-body-fullscreen-mixin"), this.__historyFullscreen = {
          handler: this.exitFullscreen
        }, c.add(this.__historyFullscreen));
      },
      exitFullscreen: function exitFullscreen() {
        this.inFullscreen && (this.__historyFullscreen && (c.remove(this.__historyFullscreen), this.__historyFullscreen = null), this.container.replaceChild(this.$el, this.fullscreenFillerNode), document.body.classList.remove("q-body-fullscreen-mixin"), this.inFullscreen = !1);
      }
    },
    beforeMount: function beforeMount() {
      this.fullscreenFillerNode = document.createElement("span");
    },
    beforeDestroy: function beforeDestroy() {
      this.exitFullscreen();
    }
  },
      ze = {
    name: "QCarousel",
    mixins: [De],
    directives: {
      TouchPan: Ce
    },
    props: {
      value: Number,
      color: {
        type: String,
        "default": "primary"
      },
      height: String,
      arrows: Boolean,
      infinite: Boolean,
      animation: {
        type: [Number, Boolean],
        "default": !0
      },
      easing: Function,
      swipeEasing: Function,
      noSwipe: Boolean,
      autoplay: [Number, Boolean],
      handleArrowKeys: Boolean,
      quickNav: Boolean,
      quickNavPosition: {
        type: String,
        "default": "bottom",
        validator: function validator(t) {
          return ["top", "bottom"].includes(t);
        }
      },
      quickNavIcon: String,
      thumbnails: {
        type: Array,
        "default": function _default() {
          return [];
        }
      },
      thumbnailsIcon: String,
      thumbnailsHorizontal: Boolean
    },
    provide: function provide() {
      return {
        carousel: this
      };
    },
    data: function data() {
      return {
        position: 0,
        slide: 0,
        positionSlide: 0,
        slidesNumber: 0,
        animUid: !1,
        viewThumbnails: !1
      };
    },
    watch: {
      value: function value(t) {
        t !== this.slide && this.goToSlide(t);
      },
      autoplay: function autoplay() {
        this.__planAutoPlay();
      },
      infinite: function infinite() {
        this.__planAutoPlay();
      },
      handleArrowKeys: function handleArrowKeys(t) {
        this.__setArrowKeys(t);
      }
    },
    computed: {
      rtlDir: function rtlDir() {
        return this.$q.i18n.rtl ? -1 : 1;
      },
      arrowIcon: function arrowIcon() {
        var t = [this.$q.icon.carousel.left, this.$q.icon.carousel.right];
        return this.$q.i18n.rtl ? t.reverse() : t;
      },
      trackPosition: function trackPosition() {
        return Y("translateX(" + this.rtlDir * this.position + "%)");
      },
      infiniteLeft: function infiniteLeft() {
        return this.infinite && this.slidesNumber > 1 && this.positionSlide < 0;
      },
      infiniteRight: function infiniteRight() {
        return this.infinite && this.slidesNumber > 1 && this.positionSlide >= this.slidesNumber;
      },
      canGoToPrevious: function canGoToPrevious() {
        return this.infinite ? this.slidesNumber > 1 : this.slide > 0;
      },
      canGoToNext: function canGoToNext() {
        return this.infinite ? this.slidesNumber > 1 : this.slide < this.slidesNumber - 1;
      },
      computedQuickNavIcon: function computedQuickNavIcon() {
        return this.quickNavIcon || this.$q.icon.carousel.quickNav;
      },
      computedStyle: function computedStyle() {
        if (!this.inFullscreen && this.height) return "height: " + this.height;
      },
      slotScope: function slotScope() {
        return {
          slide: this.slide,
          slidesNumber: this.slidesNumber,
          percentage: this.slidesNumber < 2 ? 100 : 100 * this.slide / (this.slidesNumber - 1),
          goToSlide: this.goToSlide,
          previous: this.previous,
          next: this.next,
          color: this.color,
          inFullscreen: this.inFullscreen,
          toggleFullscreen: this.toggleFullscreen,
          canGoToNext: this.canGoToNext,
          canGoToPrevious: this.canGoToPrevious
        };
      },
      computedThumbnailIcon: function computedThumbnailIcon() {
        return this.thumbnailsIcon || this.$q.icon.carousel.thumbnails;
      }
    },
    methods: {
      previous: function previous() {
        return this.canGoToPrevious ? this.goToSlide(this.slide - 1) : Promise.resolve();
      },
      next: function next() {
        return this.canGoToNext ? this.goToSlide(this.slide + 1) : Promise.resolve();
      },
      goToSlide: function goToSlide(t, e) {
        var i = this;
        return void 0 === e && (e = !1), new Promise(function (s) {
          var n,
              o = "",
              r = i.slide;

          i.__cleanup();

          var a = function a() {
            i.$emit("input", i.slide), i.$emit("slide", i.slide, o), i.$emit("slide-direction", o), i.__planAutoPlay(), s();
          };

          if (i.slidesNumber < 2 ? (i.slide = 0, i.positionSlide = 0, n = 0) : (i.hasOwnProperty("initialPosition") || (i.position = 100 * -i.slide), o = t > i.slide ? "next" : "previous", i.infinite ? (i.slide = Mt(t, 0, i.slidesNumber - 1), n = Mt(t, -1, i.slidesNumber), e || (i.positionSlide = n)) : (i.slide = Pt(t, 0, i.slidesNumber - 1), i.positionSlide = i.slide, n = i.slide)), i.$emit("slide-trigger", r, i.slide, o), n *= -100, !i.animation) return i.position = n, void a();
          i.animationInProgress = !0, i.animUid = Ee({
            from: i.position,
            to: n,
            duration: ke(i.animation) ? i.animation : 300,
            easing: e ? i.swipeEasing || Me : i.easing || Pe,
            apply: function apply(t) {
              i.position = t;
            },
            done: function done() {
              i.infinite && (i.position = 100 * -i.slide, i.positionSlide = i.slide), i.animationInProgress = !1, a();
            }
          });
        });
      },
      stopAnimation: function stopAnimation() {
        Ne(this.animUid), this.animationInProgress = !1;
      },
      __pan: function __pan(t) {
        var e = this;

        if (!this.infinite || !this.animationInProgress) {
          t.isFirst && (this.initialPosition = this.position, this.__cleanup());
          var i = this.rtlDir * ("left" === t.direction ? -1 : 1) * t.distance.x;
          (this.infinite && this.slidesNumber < 2 || !this.infinite && (0 === this.slide && i > 0 || this.slide === this.slidesNumber - 1 && i < 0)) && (i = 0);
          var s = this.initialPosition + i / this.$refs.track.offsetWidth * 100,
              n = this.slide + this.rtlDir * ("left" === t.direction ? 1 : -1);
          this.position !== s && (this.position = s), this.positionSlide !== n && (this.positionSlide = n), t.isFinal && this.goToSlide(t.distance.x < 40 ? this.slide : this.positionSlide, !0).then(function () {
            delete e.initialPosition;
          });
        }
      },
      __planAutoPlay: function __planAutoPlay() {
        var t = this;
        this.$nextTick(function () {
          t.autoplay && (clearTimeout(t.timer), t.timer = setTimeout(t.next, ke(t.autoplay) ? t.autoplay : 5e3));
        });
      },
      __cleanup: function __cleanup() {
        this.stopAnimation(), clearTimeout(this.timer);
      },
      __handleArrowKey: function __handleArrowKey(t) {
        var e = E(t);
        37 === e ? this.previous() : 39 === e && this.next();
      },
      __setArrowKeys: function __setArrowKeys(t) {
        document[(!0 === t ? "add" : "remove") + "EventListener"]("keydown", this.__handleArrowKey);
      },
      __registerSlide: function __registerSlide() {
        this.slidesNumber++;
      },
      __unregisterSlide: function __unregisterSlide() {
        this.slidesNumber--;
      },
      __getScopedSlots: function __getScopedSlots(t) {
        var e = this;

        if (0 !== this.slidesNumber) {
          var i = this.$scopedSlots;
          return i ? Object.keys(i).filter(function (t) {
            return t.startsWith("control-");
          }).map(function (t) {
            return i[t](e.slotScope);
          }) : void 0;
        }
      },
      __getQuickNav: function __getQuickNav(t) {
        var e = this;

        if (0 !== this.slidesNumber && this.quickNav) {
          var i = this.$scopedSlots["quick-nav"],
              s = [];
          if (i) for (var n = function n(t) {
            s.push(i({
              slide: t,
              before: t < e.slide,
              current: t === e.slide,
              after: t > e.slide,
              color: e.color,
              goToSlide: function goToSlide(i) {
                e.goToSlide(i || t);
              }
            }));
          }, o = 0; o < this.slidesNumber; o++) {
            n(o);
          } else for (var r = function r(i) {
            s.push(t(Yt, {
              key: i,
              "class": {
                inactive: i !== e.slide
              },
              props: {
                icon: e.computedQuickNavIcon,
                round: !0,
                flat: !0,
                dense: !0,
                color: e.color
              },
              on: {
                click: function click() {
                  e.goToSlide(i);
                }
              }
            }));
          }, a = 0; a < this.slidesNumber; a++) {
            r(a);
          }
          return t("div", {
            staticClass: "q-carousel-quick-nav scroll text-center",
            "class": ["text-" + this.color, "absolute-" + this.quickNavPosition]
          }, s);
        }
      },
      __getThumbnails: function __getThumbnails(t) {
        var e = this,
            i = this.thumbnails.map(function (i, s) {
          if (i) return t("div", {
            on: {
              click: function click() {
                e.goToSlide(s);
              }
            }
          }, [t("img", {
            attrs: {
              src: i
            },
            "class": {
              active: e.slide === s
            }
          })]);
        }),
            s = [t(Yt, {
          staticClass: "q-carousel-thumbnail-btn absolute",
          props: {
            icon: this.computedThumbnailIcon,
            fabMini: !0,
            flat: !0,
            color: this.color
          },
          on: {
            click: function click() {
              e.viewThumbnails = !e.viewThumbnails;
            }
          }
        }), t("div", {
          staticClass: "q-carousel-thumbnails scroll absolute-bottom",
          "class": {
            active: this.viewThumbnails
          }
        }, [t("div", {
          staticClass: "row gutter-xs",
          "class": this.thumbnailsHorizontal ? "no-wrap" : "justify-center"
        }, i)])];
        return this.viewThumbnails && s.unshift(t("div", {
          staticClass: "absolute-full",
          on: {
            click: function click() {
              e.viewThumbnails = !1;
            }
          }
        })), s;
      }
    },
    render: function render(t) {
      return t("div", {
        staticClass: "q-carousel",
        style: this.computedStyle,
        "class": {
          fullscreen: this.inFullscreen
        }
      }, [t("div", {
        staticClass: "q-carousel-inner",
        directives: this.noSwipe ? null : [{
          name: "touch-pan",
          modifiers: {
            horizontal: !0,
            prevent: !0,
            stop: !0
          },
          value: this.__pan
        }]
      }, [t("div", {
        ref: "track",
        staticClass: "q-carousel-track",
        style: this.trackPosition,
        "class": {
          "infinite-left": this.infiniteLeft,
          "infinite-right": this.infiniteRight
        }
      }, [this.infiniteRight ? t("div", {
        staticClass: "q-carousel-slide",
        style: "flex: 0 0 100%"
      }) : null, this.$slots["default"], this.infiniteLeft ? t("div", {
        staticClass: "q-carousel-slide",
        style: "flex: 0 0 100%"
      }) : null])]), this.arrows ? t(Yt, {
        staticClass: "q-carousel-left-arrow absolute",
        props: {
          color: this.color,
          icon: this.arrowIcon[0],
          fabMini: !0,
          flat: !0
        },
        directives: [{
          name: "show",
          value: this.canGoToPrevious
        }],
        on: {
          click: this.previous
        }
      }) : null, this.arrows ? t(Yt, {
        staticClass: "q-carousel-right-arrow absolute",
        props: {
          color: this.color,
          icon: this.arrowIcon[1],
          fabMini: !0,
          flat: !0
        },
        directives: [{
          name: "show",
          value: this.canGoToNext
        }],
        on: {
          click: this.next
        }
      }) : null, this.__getQuickNav(t), this.__getScopedSlots(t), this.thumbnails.length ? this.__getThumbnails(t) : null, this.$slots.control]);
    },
    mounted: function mounted() {
      var t = this;
      this.__planAutoPlay(), this.handleArrowKeys && this.__setArrowKeys(!0), this.__stopSlideNumberNotifier = this.$watch("slidesNumber", function (e) {
        t.value >= e && t.$emit("input", e - 1);
      }, {
        immediate: !0
      });
    },
    beforeDestroy: function beforeDestroy() {
      this.__cleanup(), this.__stopSlideNumberNotifier(), this.handleArrowKeys && this.__setArrowKeys(!1);
    }
  },
      Re = {
    name: "QCarouselSlide",
    inject: {
      carousel: {
        "default": function _default() {
          console.error("QCarouselSlide needs to be child of QCarousel");
        }
      }
    },
    props: {
      imgSrc: String
    },
    computed: {
      computedStyle: function computedStyle() {
        var t = {};
        return this.imgSrc && (t.backgroundImage = "url(" + this.imgSrc + ")", t.backgroundSize = "cover", t.backgroundPosition = "50%"), !this.carousel.inFullscreen && this.carousel.height && (t.maxHeight = this.carousel.height), t;
      }
    },
    render: function render(t) {
      return t("div", {
        staticClass: "q-carousel-slide relative-position scroll",
        style: this.computedStyle
      }, this.$slots["default"]);
    },
    created: function created() {
      this.carousel.__registerSlide();
    },
    beforeDestroy: function beforeDestroy() {
      this.carousel.__unregisterSlide();
    }
  },
      Ie = {
    name: "QCarouselControl",
    props: {
      position: {
        type: String,
        "default": "bottom-right"
      },
      offset: {
        type: Array,
        "default": function _default() {
          return [18, 18];
        }
      }
    },
    computed: {
      computedClass: function computedClass() {
        return "absolute-" + this.position;
      },
      computedStyle: function computedStyle() {
        return {
          margin: this.offset[1] + "px " + this.offset[0] + "px"
        };
      }
    },
    render: function render(t) {
      return t("div", {
        staticClass: "q-carousel-control absolute",
        style: this.computedStyle,
        "class": this.computedClass
      }, this.$slots["default"]);
    }
  },
      He = {
    name: "QChatMessage",
    props: {
      sent: Boolean,
      label: String,
      bgColor: String,
      textColor: String,
      name: String,
      avatar: String,
      text: Array,
      stamp: String,
      size: String
    },
    computed: {
      textClass: function textClass() {
        if (this.textColor) return "text-" + this.textColor;
      },
      messageClass: function messageClass() {
        if (this.bgColor) return "text-" + this.bgColor;
      },
      sizeClass: function sizeClass() {
        if (this.size) return "col-" + this.size;
      },
      classes: function classes() {
        return {
          "q-message-sent": this.sent,
          "q-message-received": !this.sent
        };
      }
    },
    methods: {
      __getText: function __getText(t) {
        var e = this;
        return this.text.map(function (i, s) {
          return t("div", {
            staticClass: "q-message-text",
            "class": e.messageClass
          }, [t("span", {
            staticClass: "q-message-text-content",
            "class": e.textClass
          }, [t("div", {
            domProps: {
              innerHTML: i
            }
          }), e.stamp ? t("div", {
            staticClass: "q-message-stamp",
            domProps: {
              innerHTML: e.stamp
            }
          }) : null])]);
        });
      },
      __getMessage: function __getMessage(t) {
        return t("div", {
          staticClass: "q-message-text",
          "class": this.messageClass
        }, [t("span", {
          staticClass: "q-message-text-content",
          "class": this.textClass
        }, [this.$slots["default"], this.stamp ? t("div", {
          staticClass: "q-message-stamp",
          domProps: {
            innerHTML: this.stamp
          }
        }) : null])]);
      }
    },
    render: function render(t) {
      return t("div", {
        staticClass: "q-message",
        "class": this.classes
      }, [this.label ? t("div", {
        staticClass: "q-message-label text-center",
        domProps: {
          innerHTML: this.label
        }
      }) : null, t("div", {
        staticClass: "q-message-container row items-end no-wrap"
      }, [this.$slots.avatar || (this.avatar ? t("img", {
        staticClass: "q-message-avatar col-auto",
        attrs: {
          src: this.avatar
        }
      }) : null), t("div", {
        "class": this.sizeClass
      }, [this.name ? t("div", {
        staticClass: "q-message-name",
        domProps: {
          innerHTML: this.name
        }
      }) : null, this.text ? this.__getText(t) : null, this.$slots["default"] ? this.__getMessage(t) : null])])]);
    }
  };
  var Fe = {
    name: "touch-swipe",
    bind: function bind(t, e) {
      var i,
          s,
          n = !e.modifiers.noMouse,
          o = {
        handler: e.value,
        threshold: parseInt(e.arg, 10) || 300,
        direction: (i = e.modifiers, s = {}, ["left", "right", "up", "down", "horizontal", "vertical"].forEach(function (t) {
          i[t] && (s[t] = !0);
        }), 0 === Object.keys(s).length ? {
          left: !0,
          right: !0,
          up: !0,
          down: !0,
          horizontal: !0,
          vertical: !0
        } : (s.horizontal && (s.left = s.right = !0), s.vertical && (s.up = s.down = !0), s.left && s.right && (s.horizontal = !0), s.up && s.down && (s.vertical = !0), s)),
        mouseStart: function mouseStart(t) {
          B(t) && (document.addEventListener("mousemove", o.move), document.addEventListener("mouseup", o.mouseEnd), o.start(t));
        },
        mouseEnd: function mouseEnd(t) {
          document.removeEventListener("mousemove", o.move), document.removeEventListener("mouseup", o.mouseEnd), o.end(t);
        },
        start: function start(e) {
          var i = N(e);
          o.event = {
            x: i.left,
            y: i.top,
            time: new Date().getTime(),
            detected: !1,
            abort: !1
          }, t.classList.add("q-touch");
        },
        move: function move(t) {
          if (!o.event.abort) if (new Date().getTime() - o.event.time > o.threshold) o.event.abort = !0;else {
            if (o.event.detected) return t.stopPropagation(), void t.preventDefault();
            var e = N(t),
                i = e.left - o.event.x,
                s = Math.abs(i),
                n = e.top - o.event.y,
                r = Math.abs(n);
            s !== r && (o.event.detected = !0, o.event.abort = !(o.direction.vertical && s < r || o.direction.horizontal && s > r || o.direction.up && s < r && n < 0 || o.direction.down && s < r && n > 0 || o.direction.left && s > r && i < 0 || o.direction.right && s > r && i > 0), o.move(t));
          }
        },
        end: function end(e) {
          if (t.classList.remove("q-touch"), !o.event.abort && o.event.detected) {
            var i = new Date().getTime() - o.event.time;

            if (!(i > o.threshold)) {
              e.stopPropagation(), e.preventDefault();
              var s,
                  n = N(e),
                  r = n.left - o.event.x,
                  a = Math.abs(r),
                  l = n.top - o.event.y,
                  c = Math.abs(l);

              if (a >= c) {
                if (a < 50) return;
                s = r < 0 ? "left" : "right";
              } else {
                if (c < 50) return;
                s = l < 0 ? "up" : "down";
              }

              o.direction[s] && o.handler({
                evt: e,
                direction: s,
                duration: i,
                distance: {
                  x: a,
                  y: c
                }
              });
            }
          }
        }
      };
      t.__qtouchswipe = o, n && t.addEventListener("mousedown", o.mouseStart), t.addEventListener("touchstart", o.start), t.addEventListener("touchmove", o.move), t.addEventListener("touchend", o.end);
    },
    update: function update(t, e) {
      e.oldValue !== e.value && (t.__qtouchswipe.handler = e.value);
    },
    unbind: function unbind(t, e) {
      var i = t.__qtouchswipe;
      i && (t.removeEventListener("mousedown", i.mouseStart), t.removeEventListener("touchstart", i.start), t.removeEventListener("touchmove", i.move), t.removeEventListener("touchend", i.end), delete t.__qtouchswipe);
    }
  },
      Ae = {
    directives: {
      TouchSwipe: Fe
    },
    props: {
      val: {},
      trueValue: {
        "default": !0
      },
      falseValue: {
        "default": !1
      }
    },
    computed: {
      isTrue: function isTrue() {
        return this.modelIsArray ? this.index > -1 : this.value === this.trueValue;
      },
      isFalse: function isFalse() {
        return this.modelIsArray ? -1 === this.index : this.value === this.falseValue;
      },
      index: function index() {
        if (this.modelIsArray) return this.value.indexOf(this.val);
      },
      modelIsArray: function modelIsArray() {
        return Array.isArray(this.value);
      }
    },
    methods: {
      toggle: function toggle(t, e) {
        var i;
        (void 0 === e && (e = !0), this.disable || this.readonly) || (t && F(t), e && this.$el.blur(), this.modelIsArray ? this.isTrue ? (i = this.value.slice()).splice(this.index, 1) : i = this.value.concat(this.val) : i = this.isTrue ? this.toggleIndeterminate ? this.indeterminateValue : this.falseValue : this.isFalse ? this.trueValue : this.falseValue, this.__update(i));
      }
    }
  },
      Qe = {
    props: {
      value: {
        required: !0
      },
      label: String,
      leftLabel: Boolean,
      color: {
        type: String,
        "default": "primary"
      },
      keepColor: Boolean,
      dark: Boolean,
      disable: Boolean,
      readonly: Boolean,
      noFocus: Boolean,
      checkedIcon: String,
      uncheckedIcon: String
    },
    computed: {
      classes: function classes() {
        return [this.__kebabTag, {
          disabled: this.disable,
          reverse: this.leftLabel,
          "q-focusable": this.focusable
        }];
      },
      innerClasses: function innerClasses() {
        return this.isTrue || this.isIndeterminate ? ["active", "text-" + this.color] : "text-" + (this.keepColor ? this.color : this.dark ? "light" : "faded");
      },
      focusable: function focusable() {
        return !this.noFocus && !this.disable && !this.readonly;
      },
      tabindex: function tabindex() {
        return this.focusable ? 0 : -1;
      }
    },
    methods: {
      __update: function __update(t) {
        var e = this,
            i = this.$refs.ripple;
        i && (i.classList.add("active"), setTimeout(function () {
          i.classList.remove("active");
        }, 10)), this.$emit("input", t), this.$nextTick(function () {
          JSON.stringify(t) !== JSON.stringify(e.value) && e.$emit("change", t);
        });
      },
      __handleKeyDown: function __handleKeyDown(t) {
        [13, 32].includes(E(t)) && this.toggle(t, !1);
      }
    },
    render: function render(t) {
      var e = this;
      return t("div", {
        staticClass: "q-option cursor-pointer no-outline row inline no-wrap items-center",
        "class": this.classes,
        attrs: {
          tabindex: this.tabindex
        },
        on: {
          click: this.toggle,
          focus: function focus() {
            e.$emit("focus");
          },
          blur: function blur() {
            e.$emit("blur");
          },
          keydown: this.__handleKeyDown
        },
        directives: "q-toggle" !== this.__kebabTag || this.disable || this.readonly ? null : [{
          name: "touch-swipe",
          modifiers: {
            horizontal: !0
          },
          value: this.__swipe
        }]
      }, [t("div", {
        staticClass: "q-option-inner relative-position",
        "class": this.innerClasses
      }, [t("input", {
        attrs: {
          type: "checkbox"
        },
        on: {
          change: this.toggle
        }
      }), this.$q.platform.is.desktop ? t("div", {
        staticClass: "q-focus-helper",
        "class": "q-radio" === this.__kebabTag ? "q-focus-helper-round" : "q-focus-helper-rounded"
      }) : null, this.__getContent(t)]), this.label ? t("span", {
        staticClass: "q-option-label",
        domProps: {
          innerHTML: this.label
        }
      }) : null, this.$slots["default"]]);
    }
  },
      je = {
    name: "QCheckbox",
    mixins: [Ae, Qe],
    props: {
      toggleIndeterminate: Boolean,
      indeterminateValue: {
        "default": null
      },
      indeterminateIcon: String
    },
    computed: {
      isIndeterminate: function isIndeterminate() {
        return void 0 === this.value || this.value === this.indeterminateValue;
      },
      checkedStyle: function checkedStyle() {
        return this.isTrue ? {
          transition: "opacity 0ms cubic-bezier(0.23, 1, 0.32, 1) 0ms, transform 800ms cubic-bezier(0.23, 1, 0.32, 1) 0ms",
          opacity: 1,
          transform: "scale(1)"
        } : {
          transition: "opacity 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms, transform 0ms cubic-bezier(0.23, 1, 0.32, 1) 450ms",
          opacity: 0,
          transform: "scale(0)"
        };
      },
      indeterminateStyle: function indeterminateStyle() {
        return this.isIndeterminate ? {
          transition: "opacity 0ms cubic-bezier(0.23, 1, 0.32, 1) 0ms, transform 800ms cubic-bezier(0.23, 1, 0.32, 1) 0ms",
          opacity: 1,
          transform: "scale(1)"
        } : {
          transition: "opacity 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms, transform 0ms cubic-bezier(0.23, 1, 0.32, 1) 450ms",
          opacity: 0,
          transform: "scale(0)"
        };
      },
      uncheckedStyle: function uncheckedStyle() {
        return this.isFalse ? {
          opacity: 1
        } : {
          transition: "opacity 650ms cubic-bezier(0.23, 1, 0.32, 1) 150ms",
          opacity: 0
        };
      }
    },
    methods: {
      __getContent: function __getContent(t) {
        return [t(dt, {
          staticClass: "q-checkbox-icon cursor-pointer",
          props: {
            name: this.uncheckedIcon || this.$q.icon.checkbox.unchecked.mat
          },
          style: this.uncheckedStyle
        }), t(dt, {
          staticClass: "q-checkbox-icon cursor-pointer absolute-full",
          props: {
            name: this.indeterminateIcon || this.$q.icon.checkbox.indeterminate.mat
          },
          style: this.indeterminateStyle
        }), t(dt, {
          staticClass: "q-checkbox-icon cursor-pointer absolute-full",
          props: {
            name: this.checkedIcon || this.$q.icon.checkbox.checked.mat
          },
          style: this.checkedStyle
        }), t("div", {
          ref: "ripple",
          staticClass: "q-radial-ripple"
        })];
      }
    },
    beforeCreate: function beforeCreate() {
      this.__kebabTag = "q-checkbox";
    }
  },
      Ve = {
    name: "QChip",
    props: {
      small: Boolean,
      dense: Boolean,
      tag: Boolean,
      square: Boolean,
      floating: Boolean,
      pointing: {
        type: String,
        validator: function validator(t) {
          return ["up", "right", "down", "left"].includes(t);
        }
      },
      color: String,
      textColor: String,
      icon: String,
      iconRight: String,
      avatar: String,
      closable: Boolean,
      detail: Boolean
    },
    computed: {
      classes: function classes() {
        var t = this,
            e = [];
        return this.pointing && e.push("q-chip-pointing-" + this.pointing), ["tag", "square", "floating", "pointing", "small", "dense"].forEach(function (i) {
          t[i] && e.push("q-chip-" + i);
        }), this.floating && (!this.dense && e.push("q-chip-dense"), !this.square && e.push("q-chip-square")), this.color && (e.push("bg-" + this.color), !this.textColor && e.push("text-white")), this.textColor && e.push("text-" + this.textColor), e;
      }
    },
    methods: {
      __onClick: function __onClick(t) {
        this.$emit("click", t);
      },
      __onMouseDown: function __onMouseDown(t) {
        this.$emit("focus", t);
      },
      __handleKeyDown: function __handleKeyDown(t) {
        this.closable && [8, 13, 32].includes(E(t)) && (F(t), this.$emit("hide"));
      }
    },
    render: function render(t) {
      var e = this;
      return t("div", {
        staticClass: "q-chip row no-wrap inline items-center",
        "class": this.classes,
        on: {
          mousedown: this.__onMouseDown,
          touchstart: this.__onMouseDown,
          click: this.__onClick,
          keydown: this.__handleKeyDown
        }
      }, [this.icon || this.avatar ? t("div", {
        staticClass: "q-chip-side q-chip-left row flex-center",
        "class": {
          "q-chip-detail": this.detail
        }
      }, [this.icon ? t(dt, {
        staticClass: "q-chip-icon",
        props: {
          name: this.icon
        }
      }) : this.avatar ? t("img", {
        attrs: {
          src: this.avatar
        }
      }) : null]) : null, t("div", {
        staticClass: "q-chip-main ellipsis"
      }, this.$slots["default"]), this.iconRight ? t(dt, {
        props: {
          name: this.iconRight
        },
        "class": this.closable ? "on-right q-chip-icon" : "q-chip-side q-chip-right"
      }) : null, this.closable ? t("div", {
        staticClass: "q-chip-side q-chip-close q-chip-right row flex-center"
      }, [t(dt, {
        props: {
          name: this.$q.icon.chip.close
        },
        staticClass: "cursor-pointer",
        nativeOn: {
          click: function click(t) {
            t && t.stopPropagation(), e.$emit("hide");
          }
        }
      })]) : null]);
    }
  },
      We = {
    type: Array,
    validator: function validator(t) {
      return t.every(function (t) {
        return "icon" in t;
      });
    }
  },
      Ue = {
    mixins: [Qt],
    props: {
      prefix: String,
      suffix: String,
      stackLabel: String,
      floatLabel: String,
      placeholder: String,
      error: Boolean,
      warning: Boolean,
      disable: Boolean,
      readonly: Boolean,
      clearable: Boolean,
      color: {
        type: String,
        "default": "primary"
      },
      align: {
        "default": "left"
      },
      dark: Boolean,
      before: We,
      after: We,
      inverted: Boolean,
      invertedLight: Boolean,
      hideUnderline: Boolean,
      clearValue: {},
      noParentField: Boolean
    },
    computed: {
      inputPlaceholder: function inputPlaceholder() {
        if (!this.floatLabel && !this.stackLabel || this.labelIsAbove) return this.placeholder;
      },
      isInverted: function isInverted() {
        return this.inverted || this.invertedLight;
      },
      isInvertedLight: function isInvertedLight() {
        return this.isInverted && (this.invertedLight && !this.hasError || this.inverted && this.hasWarning);
      },
      isStandard: function isStandard() {
        return !this.isInverted;
      },
      isHideUnderline: function isHideUnderline() {
        return this.isStandard && this.hideUnderline;
      },
      labelIsAbove: function labelIsAbove() {
        return this.focused || this.length || this.additionalLength || this.stackLabel;
      },
      hasContent: function hasContent() {
        return this.length > 0 || this.additionalLength > 0 || this.placeholder || 0 === this.placeholder;
      },
      editable: function editable() {
        return !this.disable && !this.readonly;
      },
      computedClearValue: function computedClearValue() {
        return void 0 === this.clearValue ? null : this.clearValue;
      },
      isClearable: function isClearable() {
        return this.editable && this.clearable && this.computedClearValue !== this.model;
      },
      hasError: function hasError() {
        return !!(!this.noParentField && this.field && this.field.error || this.error);
      },
      hasWarning: function hasWarning() {
        return !(this.hasError || !(!this.noParentField && this.field && this.field.warning || this.warning));
      },
      fakeInputValue: function fakeInputValue() {
        return this.actualValue || 0 === this.actualValue ? this.actualValue : this.placeholder;
      },
      fakeInputClasses: function fakeInputClasses() {
        var t = this.actualValue || 0 === this.actualValue;
        return [this.alignClass, {
          invisible: (this.stackLabel || this.floatLabel) && !this.labelIsAbove && !t,
          "q-input-target-placeholder": !t && this.inputPlaceholder
        }];
      }
    },
    methods: {
      clear: function clear(t) {
        if (this.editable) {
          t && F(t);
          var e = this.computedClearValue;
          this.__setModel && this.__setModel(e, !0), this.$emit("clear", e);
        }
      }
    }
  },
      Ke = {
    props: {
      autofocus: [Boolean, String],
      maxHeight: Number,
      loading: Boolean
    },
    data: function data() {
      return {
        focused: !1,
        timer: null,
        isNumberError: !1,
        isNegZero: !1
      };
    },
    methods: {
      focus: function focus() {
        this.disable || this.$refs.input.focus();
      },
      blur: function blur() {
        this.$refs.input && this.$refs.input.blur();
      },
      select: function select() {
        this.$refs.input.select();
      },
      __onFocus: function __onFocus(t) {
        clearTimeout(this.timer), this.focused || (this.focused = !0, this.$refs.input && this.$refs.input.focus(), this.$emit("focus", t));
      },
      __onInputBlur: function __onInputBlur(t) {
        var e = this;
        clearTimeout(this.timer), this.timer = setTimeout(function () {
          e.__onBlur(t);
        }, 200);
      },
      __onBlur: function __onBlur(t) {
        this.focused && (this.focused = !1, this.$emit("blur", t)), this.__emit();
      },
      __emit: function __emit() {
        var t = this,
            e = this.isNumber && this.isNumberError,
            i = e ? this.isNegZero ? -0 : null : this.model;
        this.isNumber && (this.model = this.value), e && this.$emit("input", i), this.$nextTick(function () {
          t.isNumber ? String(1 / i) !== String(1 / t.value) && t.$emit("change", i) : JSON.stringify(i) !== JSON.stringify(t.value) && t.$emit("change", i);
        });
      },
      __onKeydown: function __onKeydown(t) {
        "textarea" !== this.type && 13 === t.keyCode && this.__emit(), this.$emit("keydown", t);
      },
      __onKeyup: function __onKeyup(t) {
        this.$emit("keyup", t);
      },
      __onClick: function __onClick(t) {
        this.focus(), this.$emit("click", t);
      }
    },
    mounted: function mounted() {
      var t = this;
      this.$nextTick(function () {
        var e = t.$refs.input;
        t.autofocus && e && (e.focus(), "select" === t.autofocus && e.select());
      });
    },
    beforeDestroy: function beforeDestroy() {
      clearTimeout(this.timer);
    }
  },
      Ye = {
    inject: {
      field: {
        from: "__field",
        "default": null
      }
    },
    props: {
      noParentField: Boolean
    },
    watch: {
      noParentField: function noParentField(t) {
        this.field && this.field[t ? "__registerInput" : "__unregisterInput"](this);
      }
    },
    beforeMount: function beforeMount() {
      !this.noParentField && this.field && this.field.__registerInput(this);
    },
    beforeDestroy: function beforeDestroy() {
      !this.noParentField && this.field && this.field.__unregisterInput(this);
    }
  },
      Je = {
    name: "QInputFrame",
    mixins: [Ue, Ye],
    props: {
      focused: Boolean,
      length: Number,
      focusable: Boolean,
      additionalLength: Boolean
    },
    computed: {
      hasStackLabel: function hasStackLabel() {
        return "string" == typeof this.stackLabel && this.stackLabel.length > 0;
      },
      hasLabel: function hasLabel() {
        return this.hasStackLabel || "string" == typeof this.floatLabel && this.floatLabel.length > 0;
      },
      label: function label() {
        return this.hasStackLabel ? this.stackLabel : this.floatLabel;
      },
      addonClass: function addonClass() {
        return {
          "q-if-addon-visible": !this.hasLabel || this.labelIsAbove
        };
      },
      classes: function classes() {
        var t = [{
          "q-if-has-label": this.label,
          "q-if-focused": this.focused,
          "q-if-error": this.hasError,
          "q-if-warning": this.hasWarning,
          "q-if-disabled": this.disable,
          "q-if-readonly": this.readonly,
          "q-if-focusable": this.focusable && !this.disable,
          "q-if-inverted": this.isInverted,
          "q-if-inverted-light": this.isInvertedLight,
          "q-if-light-color": this.lightColor,
          "q-if-dark": this.dark,
          "q-if-hide-underline": this.isHideUnderline,
          "q-if-standard": this.isStandard,
          "q-if-has-content": this.hasContent
        }],
            e = this.hasError ? "negative" : this.hasWarning ? "warning" : this.color;
        return this.isInverted ? (t.push("bg-" + e), t.push("text-" + (this.isInvertedLight ? "black" : "white"))) : e && t.push("text-" + e), t;
      }
    },
    methods: {
      __onClick: function __onClick(t) {
        this.$emit("click", t);
      },
      __onMouseDown: function __onMouseDown(t) {
        var e = this;
        this.$nextTick(function () {
          return e.$emit("focus", t);
        });
      },
      __additionalHidden: function __additionalHidden(t, e, i, s) {
        return void 0 !== t.condition ? !1 === t.condition : void 0 !== t.content && !t.content == s > 0 || void 0 !== t.error && !t.error === e || void 0 !== t.warning && !t.warning === i;
      },
      __baHandler: function __baHandler(t, e) {
        e.allowPropagation || t.stopPropagation(), e.handler && e.handler(t);
      }
    },
    render: function render(t) {
      var e = this;
      return t("div", {
        staticClass: "q-if row no-wrap relative-position",
        "class": this.classes,
        attrs: {
          tabindex: this.focusable && !this.disable ? 0 : -1
        },
        on: {
          click: this.__onClick
        }
      }, [t("div", {
        staticClass: "q-if-baseline"
      }, "|"), this.before && this.before.map(function (i) {
        return t(dt, {
          key: "b" + i.icon,
          staticClass: "q-if-control q-if-control-before",
          "class": [i["class"], {
            hidden: e.__additionalHidden(i, e.hasError, e.hasWarning, e.length)
          }],
          props: {
            name: i.icon
          },
          nativeOn: {
            mousedown: e.__onMouseDown,
            touchstart: e.__onMouseDown,
            click: function click(t) {
              e.__baHandler(t, i);
            }
          }
        });
      }) || void 0, t("div", {
        staticClass: "q-if-inner col row"
      }, [t("div", {
        staticClass: "col-12 row no-wrap relative-position"
      }, [this.prefix && t("span", {
        staticClass: "q-if-addon q-if-addon-left",
        "class": this.addonClass,
        domProps: {
          innerHTML: this.prefix
        }
      }) || void 0, this.hasLabel && t("div", {
        staticClass: "q-if-label",
        "class": {
          "q-if-label-above": this.labelIsAbove
        }
      }, [t("div", {
        staticClass: "q-if-label-inner ellipsis",
        domProps: {
          innerHTML: this.label
        }
      })]) || void 0].concat(this.$slots["default"]).concat([this.suffix && t("span", {
        staticClass: "q-if-addon q-if-addon-right",
        "class": this.addonClass,
        domProps: {
          innerHTML: this.suffix
        }
      }) || void 0])), this.hasLabel && t("div", {
        staticClass: "q-if-label-spacer col-12",
        domProps: {
          innerHTML: this.label
        }
      }) || void 0]), this.after && this.after.map(function (i) {
        return t(dt, {
          key: "a" + i.icon,
          staticClass: "q-if-control",
          "class": [i["class"], {
            hidden: e.__additionalHidden(i, e.hasError, e.hasWarning, e.length)
          }],
          props: {
            name: i.icon
          },
          nativeOn: {
            mousedown: e.__onMouseDown,
            touchstart: e.__onMouseDown,
            click: function click(t) {
              e.__baHandler(t, i);
            }
          }
        });
      }) || void 0].concat(this.$slots.after));
    }
  },
      Xe = {
    name: "QChipsInput",
    mixins: [Ue, Ke],
    props: {
      value: {
        type: Array,
        required: !0
      },
      chipsColor: String,
      chipsBgColor: String,
      readonly: Boolean,
      addIcon: String,
      upperCase: Boolean,
      lowerCase: Boolean
    },
    data: function data() {
      var t = this;
      return {
        input: "",
        model: this.value.slice(),
        watcher: null,
        shadow: {
          val: this.input,
          set: this.add,
          setNav: function setNav(e) {
            t.input = e;
          },
          loading: !1,
          selectionOpen: !1,
          watched: 0,
          isEditable: function isEditable() {
            return t.editable;
          },
          isDark: function isDark() {
            return t.dark;
          },
          hasFocus: function hasFocus() {
            return document.activeElement === t.$refs.input;
          },
          register: function register() {
            t.shadow.watched += 1, t.__watcherRegister();
          },
          unregister: function unregister() {
            t.shadow.watched = Math.max(0, t.shadow.watched - 1), t.__watcherUnregister();
          },
          getEl: function getEl() {
            return t.$refs.input;
          }
        }
      };
    },
    watch: {
      value: function value(t) {
        this.model = t.slice();
      }
    },
    provide: function provide() {
      return {
        __input: this.shadow
      };
    },
    computed: {
      length: function length() {
        return this.model ? this.model.length : 0;
      },
      isLoading: function isLoading() {
        return this.loading || this.shadow.watched && this.shadow.loading;
      },
      computedAddIcon: function computedAddIcon() {
        return this.addIcon || this.$q.icon.chipsInput.add;
      },
      computedChipTextColor: function computedChipTextColor() {
        return this.chipsColor ? this.chipsColor : this.isInvertedLight ? this.invertedLight ? this.color : "white" : this.isInverted ? this.invertedLight ? "grey-10" : this.color : this.dark ? this.color : "white";
      },
      computedChipBgColor: function computedChipBgColor() {
        return this.chipsBgColor ? this.chipsBgColor : this.isInvertedLight ? this.invertedLight ? "grey-10" : this.color : this.isInverted ? this.invertedLight ? this.color : "white" : this.dark ? "white" : this.color;
      },
      inputClasses: function inputClasses() {
        var t = [this.alignClass];
        return this.upperCase && t.push("uppercase"), this.lowerCase && t.push("lowercase"), t;
      },
      isClearable: function isClearable() {
        return this.editable && this.clearable && 0 !== this.model.length;
      }
    },
    methods: {
      add: function add(t) {
        if (void 0 === t && (t = this.input), clearTimeout(this.timer), this.focus(), !this.isLoading && this.editable && t) {
          var e = this.lowerCase ? t.toLowerCase() : this.upperCase ? t.toUpperCase() : t;
          this.model.includes(e) ? this.$emit("duplicate", e) : (this.$emit("add", {
            index: this.model.length,
            val: e
          }), this.model.push(e), this.$emit("input", this.model), this.input = "");
        }
      },
      remove: function remove(t) {
        clearTimeout(this.timer), this.focus(), this.editable && t >= 0 && t < this.length && (this.$emit("remove", {
          index: t,
          value: this.model.splice(t, 1)
        }), this.$emit("input", this.model));
      },
      clear: function clear(t) {
        clearTimeout(this.timer), t && F(t), this.editable && (this.$emit("input", []), this.$emit("clear"));
      },
      __clearTimer: function __clearTimer() {
        var t = this;
        this.$nextTick(function () {
          return clearTimeout(t.timer);
        });
      },
      __handleKeyDown: function __handleKeyDown(t) {
        switch (E(t)) {
          case 13:
            if (this.shadow.selectionOpen) return;
            return F(t), this.add();

          case 8:
            return void (!this.input.length && this.length && this.remove(this.length - 1));

          default:
            return this.__onKeydown(t);
        }
      },
      __onClick: function __onClick() {
        this.focus();
      },
      __watcher: function __watcher(t) {
        this.shadow.watched && (this.shadow.val = t);
      },
      __watcherRegister: function __watcherRegister() {
        this.watcher || (this.watcher = this.$watch("input", this.__watcher));
      },
      __watcherUnregister: function __watcherUnregister(t) {
        !this.watcher || !t && this.shadow.watched || (this.watcher(), this.watcher = null, this.shadow.selectionOpen = !1);
      }
    },
    beforeDestroy: function beforeDestroy() {
      this.__watcherUnregister(!0);
    },
    render: function render(t) {
      var e = this;
      return t(Je, {
        staticClass: "q-chips-input",
        props: {
          prefix: this.prefix,
          suffix: this.suffix,
          stackLabel: this.stackLabel,
          floatLabel: this.floatLabel,
          error: this.error,
          warning: this.warning,
          disable: this.disable,
          readonly: this.readonly,
          inverted: this.inverted,
          invertedLight: this.invertedLight,
          dark: this.dark,
          hideUnderline: this.hideUnderline,
          before: this.before,
          after: this.after,
          color: this.color,
          noParentField: this.noParentField,
          focused: this.focused,
          length: this.length,
          additionalLength: this.input.length > 0
        },
        on: {
          click: this.__onClick
        }
      }, [t("div", {
        staticClass: "col row items-center group q-input-chips"
      }, this.model.map(function (i, s) {
        return t(Ve, {
          key: i + "#" + s,
          props: {
            small: !0,
            closable: e.editable,
            color: e.computedChipBgColor,
            textColor: e.computedChipTextColor
          },
          attrs: {
            tabindex: e.editable && e.focused ? 0 : -1
          },
          on: {
            blur: e.__onInputBlur,
            focus: e.__clearTimer,
            hide: function hide() {
              e.remove(s);
            }
          },
          nativeOn: {
            blur: e.__onInputBlur,
            focus: e.__clearTimer
          }
        }, i);
      }).concat([t("input", {
        ref: "input",
        staticClass: "col q-input-target",
        "class": this.inputClasses,
        domProps: {
          value: this.input
        },
        attrs: Object.assign({}, this.$attrs, {
          placeholder: this.inputPlaceholder,
          disabled: this.disable,
          readonly: this.readonly
        }),
        on: {
          input: function input(t) {
            e.input = t.target.value;
          },
          focus: this.__onFocus,
          blur: this.__onInputBlur,
          keydown: this.__handleKeyDown,
          keyup: this.__onKeyup
        }
      })])), this.isLoading ? t(Kt, {
        slot: "after",
        staticClass: "q-if-control",
        props: {
          size: "24px"
        }
      }) : this.editable && t(dt, {
        slot: "after",
        staticClass: "q-if-control",
        "class": {
          invisible: 0 === this.input.length
        },
        props: {
          name: this.computedAddIcon
        },
        nativeOn: {
          mousedown: this.__clearTimer,
          touchstart: this.__clearTimer,
          click: function click() {
            e.add();
          }
        }
      }) || void 0, this.isClearable && t(dt, {
        slot: "after",
        staticClass: "q-if-control",
        props: {
          name: this.$q.icon.input["clear" + (this.isInverted ? "Inverted" : "")]
        },
        nativeOn: {
          mousedown: this.__clearTimer,
          touchstart: this.__clearTimer,
          click: this.clear
        }
      }) || void 0].concat(this.$slots["default"] ? t("div", {
        staticClass: "absolute-full no-pointer-events",
        slot: "after"
      }, this.$slots["default"]) : void 0));
    }
  },
      Ge = {
    name: "QItemTile",
    props: {
      icon: String,
      letter: Boolean,
      inverted: Boolean,
      image: Boolean,
      avatar: Boolean,
      stamp: Boolean,
      label: Boolean,
      sublabel: Boolean,
      lines: [Number, String],
      tag: {
        type: String,
        "default": "div"
      },
      color: String,
      textColor: String
    },
    computed: {
      hasLines: function hasLines() {
        return (this.label || this.sublabel) && this.lines;
      },
      type: function type() {
        var t = this;
        return ["icon", "label", "sublabel", "image", "avatar", "letter", "stamp"].find(function (e) {
          return t[e];
        });
      },
      classes: function classes() {
        var t = [];
        return this.color && (this.inverted ? t.push("bg-" + this.color) : this.textColor || t.push("text-" + this.color)), this.textColor && t.push("text-" + this.textColor), this.type && t.push("q-item-" + this.type), this.inverted && (this.icon || this.letter) && (t.push("q-item-inverted"), t.push("flex"), t.push("flex-center")), !this.hasLines || "1" !== this.lines && 1 !== this.lines || t.push("ellipsis"), t;
      },
      style: function style() {
        if (this.hasLines) return ft(this.lines);
      }
    },
    render: function render(t) {
      var e = {
        "class": this.classes,
        style: this.style
      };

      if (this.icon) {
        if (this.inverted) return t(this.tag, e, [t(dt, {
          props: {
            name: this.icon
          }
        }, this.$slots["default"])]);
        e.props = {
          name: this.icon
        };
      }

      return t(this.icon ? dt : this.tag, e, this.$slots["default"]);
    }
  },
      Ze = {
    name: "QSlideTransition",
    props: {
      appear: Boolean
    },
    methods: {
      __begin: function __begin(t, e) {
        t.style.overflowY = "hidden", void 0 !== e && (t.style.height = e + "px"), t.classList.add("q-slide-transition"), this.animating = !0;
      },
      __end: function __end(t, e) {
        t.style.overflowY = null, t.style.height = null, t.classList.remove("q-slide-transition"), this.__cleanup(), e !== this.lastEvent && this.$emit(e), this.animating = !1;
      },
      __cleanup: function __cleanup() {
        clearTimeout(this.timer), this.el.removeEventListener("transitionend", this.animListener);
      }
    },
    beforeDestroy: function beforeDestroy() {
      this.animating && this.__cleanup();
    },
    render: function render(t) {
      var e = this;
      return t("transition", {
        props: {
          css: !1,
          appear: this.appear
        },
        on: {
          enter: function enter(t, i) {
            var s = 0;
            e.el = t, !0 === e.animating ? (e.__cleanup(), s = t.offsetHeight === t.scrollHeight ? 0 : void 0) : e.lastEvent = "hide", e.__begin(t, s), e.timer = setTimeout(function () {
              t.style.height = t.scrollHeight + "px", e.animListener = function () {
                e.__end(t, "show"), i();
              }, t.addEventListener("transitionend", e.animListener);
            }, 100);
          },
          leave: function leave(t, i) {
            var s;
            e.el = t, !0 === e.animating ? e.__cleanup() : (e.lastEvent = "show", s = t.scrollHeight), e.__begin(t, s), e.timer = setTimeout(function () {
              t.style.height = 0, e.animListener = function () {
                e.__end(t, "hide"), i();
              }, t.addEventListener("transitionend", e.animListener);
            }, 100);
          }
        }
      }, this.$slots["default"]);
    }
  },
      ti = "q:collapsible:close",
      ei = {
    name: "QCollapsible",
    mixins: [M, gt, {
      props: mt
    }],
    modelToggle: {
      history: !1
    },
    props: {
      disable: Boolean,
      popup: Boolean,
      indent: Boolean,
      group: String,
      iconToggle: Boolean,
      collapseIcon: String,
      opened: Boolean,
      headerStyle: [Array, String, Object],
      headerClass: [Array, String, Object]
    },
    computed: {
      classes: function classes() {
        return {
          "q-collapsible-opened": this.showing,
          "q-collapsible-closed": !this.showing,
          "q-collapsible-popup-opened": this.popup && this.showing,
          "q-collapsible-popup-closed": this.popup && !this.showing,
          "q-collapsible-cursor-pointer": !this.iconToggle,
          "q-item-dark": this.dark,
          "q-item-separator": this.separator,
          "q-item-inset-separator": this.insetSeparator,
          disabled: this.disable
        };
      }
    },
    watch: {
      showing: function showing(t) {
        t && this.group && this.$root.$emit(ti, this);
      }
    },
    methods: {
      __toggleItem: function __toggleItem() {
        this.iconToggle || this.toggle();
      },
      __toggleIcon: function __toggleIcon(t) {
        this.iconToggle && (t && t.stopPropagation(), this.toggle());
      },
      __eventHandler: function __eventHandler(t) {
        this.group && this !== t && t.group === this.group && this.hide();
      },
      __getToggleSide: function __getToggleSide(t, e) {
        return [t(Ge, {
          slot: e ? "right" : void 0,
          staticClass: "cursor-pointer transition-generic relative-position q-collapsible-toggle-icon",
          "class": {
            "rotate-180": this.showing,
            invisible: this.disable
          },
          nativeOn: {
            click: this.__toggleIcon
          },
          props: {
            icon: this.collapseIcon || this.$q.icon.collapsible.icon
          }
        })];
      },
      __getItemProps: function __getItemProps(t) {
        return {
          props: {
            cfg: this.$props
          },
          style: this.headerStyle,
          "class": this.headerClass,
          nativeOn: {
            click: this.__toggleItem
          }
        };
      }
    },
    created: function created() {
      this.$root.$on(ti, this.__eventHandler), (this.opened || this.value) && this.show();
    },
    beforeDestroy: function beforeDestroy() {
      this.$root.$off(ti, this.__eventHandler);
    },
    render: function render(t) {
      return t(this.tag, {
        staticClass: "q-collapsible q-item-division relative-position",
        "class": this.classes
      }, [t("div", {
        staticClass: "q-collapsible-inner"
      }, [this.$slots.header ? t(yt, this.__getItemProps(), [this.$slots.header, t(wt, {
        props: {
          right: !0
        },
        staticClass: "relative-position"
      }, this.__getToggleSide(t))]) : t(ce, this.__getItemProps(!0), this.__getToggleSide(t, !0)), t(Ze, [t("div", {
        directives: [{
          name: "show",
          value: this.showing
        }]
      }, [t("div", {
        staticClass: "q-collapsible-sub-item relative-position",
        "class": {
          indent: this.indent
        }
      }, this.$slots["default"])])])])]);
    }
  },
      ii = {
    props: {
      popover: Boolean,
      modal: Boolean
    },
    computed: {
      isPopover: function isPopover() {
        return !!this.popover || !this.modal && this.$q.platform.is.desktop && !this.$q.platform.within.iframe;
      }
    }
  };

  function si(t, e, i) {
    var s = Pt((N(t).left - e.left) / e.width, 0, 1);
    return i ? 1 - s : s;
  }

  function ni(t, e) {
    var i = e ? parseFloat(t.toFixed(e)) : t;
    return i !== parseInt(i, 10);
  }

  function oi(t, e, i, s, n) {
    var o = e + t * (i - e),
        r = (o - e) % s;
    return o += (Math.abs(r) >= s / 2 ? (r < 0 ? -1 : 1) * s : 0) - r, n && (o = parseFloat(o.toFixed(n))), Pt(o, e, i);
  }

  var ri = {
    directives: {
      TouchPan: Ce
    },
    props: {
      min: {
        type: Number,
        "default": 1
      },
      max: {
        type: Number,
        "default": 5
      },
      step: {
        type: Number,
        "default": 1
      },
      decimals: Number,
      snap: Boolean,
      markers: Boolean,
      label: Boolean,
      labelAlways: Boolean,
      square: Boolean,
      color: String,
      fillHandleAlways: Boolean,
      error: Boolean,
      warning: Boolean,
      readonly: Boolean,
      disable: Boolean
    },
    computed: {
      editable: function editable() {
        return !this.disable && !this.readonly;
      },
      classes: function classes() {
        var t = {
          disabled: this.disable,
          readonly: this.readonly,
          "label-always": this.labelAlways,
          "has-error": this.error,
          "has-warning": this.warning
        };
        return this.error || this.warning || !this.color || (t["text-" + this.color] = !0), t;
      },
      markersLen: function markersLen() {
        return (this.max - this.min) / this.step + 1;
      },
      labelColor: function labelColor() {
        return this.error ? "negative" : this.warning ? "warning" : this.color || "primary";
      },
      computedDecimals: function computedDecimals() {
        return void 0 !== this.decimals ? this.decimals || 0 : (String(this.step).trim("0").split(".")[1] || "").length;
      },
      computedStep: function computedStep() {
        return void 0 !== this.decimals ? 1 / Math.pow(10, this.decimals || 0) : this.step;
      }
    },
    methods: {
      __pan: function __pan(t) {
        var e = this;
        t.isFinal ? this.dragging && (this.dragTimer = setTimeout(function () {
          e.dragging = !1;
        }, 100), this.__end(t.evt), this.__update(!0)) : t.isFirst ? (clearTimeout(this.dragTimer), this.dragging = this.__getDragging(t.evt)) : this.dragging && (this.__move(t.evt), this.__update());
      },
      __update: function __update(t) {
        var e = this;
        JSON.stringify(this.model) !== JSON.stringify(this.value) && (this.$emit("input", this.model), t && this.$nextTick(function () {
          JSON.stringify(e.model) !== JSON.stringify(e.value) && e.$emit("change", e.model);
        }));
      },
      __click: function __click(t) {
        if (!this.dragging) {
          var e = this.__getDragging(t);

          e && (this.__end(t, e), this.__update(!0));
        }
      },
      __getMarkers: function __getMarkers(t) {
        if (this.markers) {
          for (var e = [], i = 0; i < this.markersLen; i++) {
            e.push(t("div", {
              staticClass: "q-slider-mark",
              key: "marker" + i,
              style: {
                left: 100 * i * this.step / (this.max - this.min) + "%"
              }
            }));
          }

          return e;
        }
      }
    },
    created: function created() {
      this.__validateProps();
    },
    render: function render(t) {
      return t("div", {
        staticClass: "q-slider non-selectable",
        "class": this.classes,
        on: this.editable ? {
          click: this.__click
        } : null,
        directives: this.editable ? [{
          name: "touch-pan",
          modifiers: {
            horizontal: !0,
            prevent: !0,
            stop: !0
          },
          value: this.__pan
        }] : null
      }, [t("div", {
        ref: "handle",
        staticClass: "q-slider-handle-container"
      }, [t("div", {
        staticClass: "q-slider-track"
      }), this.__getMarkers(t)].concat(this.__getContent(t)))]);
    }
  },
      ai = {
    name: "QSlider",
    mixins: [ri],
    props: {
      value: Number,
      labelValue: String
    },
    data: function data() {
      return {
        model: this.value,
        dragging: !1,
        currentPercentage: (this.value - this.min) / (this.max - this.min)
      };
    },
    computed: {
      percentage: function percentage() {
        return this.snap ? (this.model - this.min) / (this.max - this.min) * 100 + "%" : 100 * this.currentPercentage + "%";
      },
      displayValue: function displayValue() {
        return void 0 !== this.labelValue ? this.labelValue : this.model;
      }
    },
    watch: {
      value: function value(t) {
        this.dragging || (t < this.min ? this.model = this.min : t > this.max ? this.model = this.max : this.model = t, this.currentPercentage = (this.model - this.min) / (this.max - this.min));
      },
      min: function min(t) {
        this.model < t ? this.model = t : this.$nextTick(this.__validateProps);
      },
      max: function max(t) {
        this.model > t ? this.model = t : this.$nextTick(this.__validateProps);
      },
      step: function step() {
        this.$nextTick(this.__validateProps);
      }
    },
    methods: {
      __getDragging: function __getDragging(t) {
        var e = this.$refs.handle;
        return {
          left: e.getBoundingClientRect().left,
          width: e.offsetWidth
        };
      },
      __move: function __move(t) {
        var e = si(t, this.dragging, this.$q.i18n.rtl);
        this.currentPercentage = e, this.model = oi(e, this.min, this.max, this.step, this.computedDecimals);
      },
      __end: function __end(t, e) {
        void 0 === e && (e = this.dragging);
        var i = si(t, e, this.$q.i18n.rtl);
        this.model = oi(i, this.min, this.max, this.step, this.computedDecimals), this.currentPercentage = (this.model - this.min) / (this.max - this.min);
      },
      __onKeyDown: function __onKeyDown(t) {
        var e = t.keyCode;

        if (this.editable && [37, 40, 39, 38].includes(e)) {
          F(t);
          var i = this.computedDecimals,
              s = t.ctrlKey ? 10 * this.computedStep : this.computedStep,
              n = [37, 40].includes(e) ? -s : s,
              o = i ? parseFloat((this.model + n).toFixed(i)) : this.model + n;
          this.model = Pt(o, this.min, this.max), this.currentPercentage = (this.model - this.min) / (this.max - this.min), this.__update();
        }
      },
      __onKeyUp: function __onKeyUp(t) {
        var e = t.keyCode;
        this.editable && [37, 40, 39, 38].includes(e) && this.__update(!0);
      },
      __validateProps: function __validateProps() {
        this.min >= this.max ? console.error("Range error: min >= max", this.$el, this.min, this.max) : ni((this.max - this.min) / this.step, this.computedDecimals) && console.error("Range error: step must be a divisor of max - min", this.min, this.max, this.step, this.computedDecimals);
      },
      __getContent: function __getContent(t) {
        var e;
        return [t("div", {
          staticClass: "q-slider-track active-track",
          style: {
            width: this.percentage
          },
          "class": {
            "no-transition": this.dragging,
            "handle-at-minimum": this.model === this.min
          }
        }), t("div", {
          staticClass: "q-slider-handle",
          style: (e = {}, e[this.$q.i18n.rtl ? "right" : "left"] = this.percentage, e.borderRadius = this.square ? "0" : "50%", e),
          "class": {
            dragging: this.dragging,
            "handle-at-minimum": !this.fillHandleAlways && this.model === this.min
          },
          attrs: {
            tabindex: this.editable ? 0 : -1
          },
          on: {
            keydown: this.__onKeyDown,
            keyup: this.__onKeyUp
          }
        }, [this.label || this.labelAlways ? t(Ve, {
          staticClass: "q-slider-label no-pointer-events",
          "class": {
            "label-always": this.labelAlways
          },
          props: {
            pointing: "down",
            square: !0,
            dense: !0,
            color: this.labelColor
          }
        }, [this.displayValue]) : null, t("div", {
          staticClass: "q-slider-ring"
        })])];
      }
    }
  };

  function li(t, e) {
    void 0 === e && (e = 250);
    var i,
        s = !1;
    return function () {
      for (var n = [], o = arguments.length; o--;) {
        n[o] = arguments[o];
      }

      return s ? i : (s = !0, i = t.apply(this, n), setTimeout(function () {
        s = !1;
      }, e), i);
    };
  }

  function ci(t) {
    var e = JSON.stringify(t);
    if (e) return JSON.parse(e);
  }

  var hi = {
    name: "QColorPicker",
    mixins: [Ye],
    directives: {
      TouchPan: Ce
    },
    props: {
      value: [String, Object],
      defaultValue: {
        type: [String, Object],
        "default": null
      },
      formatModel: {
        type: String,
        "default": "auto",
        validator: function validator(t) {
          return ["auto", "hex", "rgb", "hexa", "rgba"].includes(t);
        }
      },
      disable: Boolean,
      readonly: Boolean,
      dark: Boolean
    },
    data: function data() {
      return {
        view: this.value && "string" != typeof this.value ? "rgb" : "hex",
        model: this.__parseModel(this.value || this.defaultValue)
      };
    },
    watch: {
      value: {
        handler: function handler(t) {
          var e = this.__parseModel(t || this.defaultValue);

          e.hex !== this.model.hex && (this.model = e);
        },
        deep: !0
      }
    },
    computed: {
      forceHex: function forceHex() {
        return "auto" === this.formatModel ? null : this.formatModel.indexOf("hex") > -1;
      },
      forceAlpha: function forceAlpha() {
        return "auto" === this.formatModel ? null : this.formatModel.indexOf("a") > -1;
      },
      isHex: function isHex() {
        return "string" == typeof this.value;
      },
      isOutputHex: function isOutputHex() {
        return null !== this.forceHex ? this.forceHex : this.isHex;
      },
      editable: function editable() {
        return !this.disable && !this.readonly;
      },
      hasAlpha: function hasAlpha() {
        return null !== this.forceAlpha ? this.forceAlpha : this.isHex ? this.value.trim().length > 7 : this.value && void 0 !== this.value.a;
      },
      swatchColor: function swatchColor() {
        return {
          backgroundColor: "rgba(" + this.model.r + "," + this.model.g + "," + this.model.b + "," + (void 0 === this.model.a ? 100 : this.model.a) / 100 + ")"
        };
      },
      saturationStyle: function saturationStyle() {
        return {
          background: "hsl(" + this.model.h + ",100%,50%)"
        };
      },
      saturationPointerStyle: function saturationPointerStyle() {
        var t;
        return (t = {
          top: 101 - this.model.v + "%"
        })[this.$q.i18n.rtl ? "right" : "left"] = this.model.s + "%", t;
      },
      inputsArray: function inputsArray() {
        var t = ["r", "g", "b"];
        return this.hasAlpha && t.push("a"), t;
      },
      __needsBorder: function __needsBorder() {
        return !0;
      }
    },
    created: function created() {
      this.__saturationChange = li(this.__saturationChange, 20);
    },
    render: function render(t) {
      return t("div", {
        staticClass: "q-color",
        "class": {
          disabled: this.disable,
          "q-color-dark": this.dark
        }
      }, [this.__getSaturation(t), this.__getSliders(t), this.__getInputs(t)]);
    },
    methods: {
      __getSaturation: function __getSaturation(t) {
        return t("div", {
          ref: "saturation",
          staticClass: "q-color-saturation non-selectable relative-position overflow-hidden cursor-pointer",
          style: this.saturationStyle,
          "class": {
            readonly: !this.editable
          },
          on: this.editable ? {
            click: this.__saturationClick
          } : null,
          directives: this.editable ? [{
            name: "touch-pan",
            modifiers: {
              mightPrevent: !0
            },
            value: this.__saturationPan
          }] : null
        }, [t("div", {
          staticClass: "q-color-saturation-white absolute-full"
        }), t("div", {
          staticClass: "q-color-saturation-black absolute-full"
        }), t("div", {
          staticClass: "absolute",
          style: this.saturationPointerStyle
        }, [void 0 !== this.model.hex ? t("div", {
          staticClass: "q-color-saturation-circle"
        }) : null])]);
      },
      __getSliders: function __getSliders(t) {
        var e = this;
        return t("div", {
          staticClass: "q-color-sliders row items-center"
        }, [t("div", {
          staticClass: "q-color-swatch q-mt-sm q-ml-md q-mb-sm non-selectable overflow-hidden"
        }, [t("div", {
          style: this.swatchColor,
          staticClass: "fit"
        })]), t("div", {
          staticClass: "col q-pa-sm"
        }, [t("div", {
          staticClass: "q-color-hue non-selectable"
        }, [t(ai, {
          props: {
            value: this.model.h,
            color: "white",
            min: 0,
            max: 360,
            fillHandleAlways: !0,
            readonly: !this.editable
          },
          on: {
            input: this.__onHueChange,
            dragend: function dragend(t) {
              return e.__onHueChange(t, !0);
            }
          }
        })]), this.hasAlpha ? t("div", {
          staticClass: "q-color-alpha non-selectable"
        }, [t(ai, {
          props: {
            value: this.model.a,
            color: "white",
            min: 0,
            max: 100,
            fillHandleAlways: !0,
            readonly: !this.editable
          },
          on: {
            input: function input(t) {
              return e.__onNumericChange({
                target: {
                  value: t
                }
              }, "a", 100);
            },
            dragend: function dragend(t) {
              return e.__onNumericChange({
                target: {
                  value: t
                }
              }, "a", 100, !0);
            }
          }
        })]) : null])]);
      },
      __getNumericInputs: function __getNumericInputs(t) {
        var e = this;
        return this.inputsArray.map(function (i) {
          var s = "a" === i ? 100 : 255;
          return t("div", {
            staticClass: "col q-color-padding"
          }, [t("input", {
            attrs: {
              type: "number",
              min: 0,
              max: s,
              readonly: !e.editable,
              tabindex: e.editable ? 0 : -1
            },
            staticClass: "full-width text-center q-no-input-spinner",
            domProps: {
              value: void 0 === e.model.hex ? "" : Math.round(e.model[i])
            },
            on: {
              input: function input(t) {
                return e.__onNumericChange(t, i, s);
              },
              blur: function blur(t) {
                return e.editable && e.__onNumericChange(t, i, s, !0);
              }
            }
          }), t("div", {
            staticClass: "q-color-label text-center uppercase"
          }, [i])]);
        });
      },
      __getInputs: function __getInputs(t) {
        var e = this;
        return t("div", {
          staticClass: "q-color-inputs row items-center q-px-sm q-pb-sm"
        }, [t("div", {
          staticClass: "col q-mr-sm row no-wrap"
        }, "hex" === this.view ? [t("div", {
          staticClass: "col"
        }, [t("input", {
          domProps: {
            value: this.model.hex
          },
          attrs: {
            readonly: !this.editable,
            tabindex: this.editable ? 0 : -1
          },
          on: {
            change: this.__onHexChange,
            blur: function blur(t) {
              return e.editable && e.__onHexChange(t, !0);
            }
          },
          staticClass: "full-width text-center uppercase"
        }), t("div", {
          staticClass: "q-color-label text-center"
        }, ["HEX" + (this.hasAlpha ? " / A" : "")])])] : this.__getNumericInputs(t)), t("div", [t(Yt, {
          props: {
            flat: !0,
            disable: this.disable
          },
          on: {
            click: this.__nextInputView
          },
          staticClass: "q-pa-none"
        }, [t("svg", {
          attrs: {
            viewBox: "0 0 24 24"
          },
          style: {
            width: "24px",
            height: "24px"
          }
        }, [t("path", {
          attrs: {
            fill: "currentColor",
            d: "M12,18.17L8.83,15L7.42,16.41L12,21L16.59,16.41L15.17,15M12,5.83L15.17,9L16.58,7.59L12,3L7.41,7.59L8.83,9L12,5.83Z"
          }
        })])])])]);
      },
      __onSaturationChange: function __onSaturationChange(t, e, i) {
        var s = this.$refs.saturation;

        if (s) {
          var n = s.clientWidth,
              o = s.clientHeight,
              r = s.getBoundingClientRect(),
              a = Math.min(n, Math.max(0, t - r.left));
          this.$q.i18n.rtl && (a = n - a);
          var l = Math.min(o, Math.max(0, e - r.top)),
              c = Math.round(100 * a / n),
              h = Math.round(100 * Math.max(0, Math.min(1, -l / o + 1))),
              u = f({
            h: this.model.h,
            s: c,
            v: h,
            a: this.hasAlpha ? this.model.a : void 0
          });
          this.model.s = c, this.model.v = h, this.__update(u, d(u), i);
        }
      },
      __onHueChange: function __onHueChange(t, e) {
        var i = f({
          h: t = Math.round(t),
          s: this.model.s,
          v: this.model.v,
          a: this.hasAlpha ? this.model.a : void 0
        });
        this.model.h = t, this.__update(i, d(i), e);
      },
      __onNumericChange: function __onNumericChange(t, e, i, s) {
        var n = Number(t.target.value);
        if (!isNaN(n)) if ((n = Math.floor(n)) < 0 || n > i) s && this.$forceUpdate();else {
          var o = {
            r: "r" === e ? n : this.model.r,
            g: "g" === e ? n : this.model.g,
            b: "b" === e ? n : this.model.b,
            a: this.hasAlpha ? "a" === e ? n : this.model.a : void 0
          };

          if ("a" !== e) {
            var r = m(o);
            this.model.h = r.h, this.model.s = r.s, this.model.v = r.v;
          }

          this.__update(o, d(o), s);
        }
      },
      __onHexChange: function __onHexChange(t, e) {
        var i = t.target.value,
            s = i.length,
            n = this.hasAlpha ? [5, 9] : [4, 7];

        if (s === n[0] || s === n[1]) {
          var o = p(i),
              r = m(o);
          this.model.h = r.h, this.model.s = r.s, this.model.v = r.v, this.__update(o, i, e);
        } else e && this.$forceUpdate();
      },
      __update: function __update(t, e, i) {
        var s = this,
            n = this.isOutputHex ? e : t;
        this.model.hex = e, this.model.r = t.r, this.model.g = t.g, this.model.b = t.b, this.model.a = this.hasAlpha ? t.a : void 0, this.$emit("input", n), this.$nextTick(function () {
          i && JSON.stringify(n) !== JSON.stringify(s.value) && s.$emit("change", n);
        });
      },
      __nextInputView: function __nextInputView() {
        this.view = "hex" === this.view ? "rgba" : "hex";
      },
      __parseModel: function __parseModel(t) {
        if (null === t || void 0 === t) return {
          h: 0,
          s: 0,
          v: 0,
          r: 0,
          g: 0,
          b: 0,
          hex: void 0,
          a: 100
        };
        var e = "string" == typeof t ? p(t.trim()) : ci(t);
        return this.forceAlpha === (void 0 === e.a) && (e.a = this.forceAlpha ? 100 : void 0), e.hex = d(e), Object.assign({
          a: 100
        }, e, m(e));
      },
      __saturationPan: function __saturationPan(t) {
        t.isFinal ? this.__dragStop(t) : t.isFirst ? this.__dragStart(t) : this.__dragMove(t);
      },
      __dragStart: function __dragStart(t) {
        F(t.evt), this.saturationDragging = !0, this.__saturationChange(t);
      },
      __dragMove: function __dragMove(t) {
        this.saturationDragging && (F(t.evt), this.__saturationChange(t));
      },
      __dragStop: function __dragStop(t) {
        var e = this;
        F(t.evt), setTimeout(function () {
          e.saturationDragging = !1;
        }, 100), this.__onSaturationChange(t.position.left, t.position.top, !0);
      },
      __saturationChange: function __saturationChange(t) {
        this.__onSaturationChange(t.position.left, t.position.top);
      },
      __saturationClick: function __saturationClick(t) {
        this.saturationDragging || this.__onSaturationChange(t.pageX - window.pageXOffset, t.pageY - window.pageYOffset, !0);
      }
    }
  },
      ui = {
    maxWidth: "95vw",
    maxHeight: "98vh"
  },
      di = {
    name: "QColor",
    mixins: [Ue, ii],
    props: {
      value: {
        required: !0
      },
      color: {
        type: String,
        "default": "primary"
      },
      defaultValue: {
        type: [String, Object],
        "default": null
      },
      formatModel: {
        type: String,
        "default": "auto",
        validator: function validator(t) {
          return ["auto", "hex", "rgb", "hexa", "rgba"].includes(t);
        }
      },
      displayValue: String,
      okLabel: String,
      cancelLabel: String
    },
    watch: {
      value: function value(t) {
        !this.disable && this.isPopover && (this.model = ci(t));
      }
    },
    data: function data() {
      var t = this.isPopover ? {} : {
        transition: "q-modal"
      };
      return t.focused = !1, t.model = ci(this.value || this.defaultValue), t;
    },
    computed: {
      actualValue: function actualValue() {
        return this.displayValue ? this.displayValue : this.value ? "string" == typeof this.value ? this.value : "rgb" + (void 0 !== this.value.a ? "a" : "") + "(" + this.value.r + "," + this.value.g + "," + this.value.b + (void 0 !== this.value.a ? "," + this.value.a / 100 : "") + ")" : "";
      },
      computedClearValue: function computedClearValue() {
        return void 0 === this.clearValue ? this.defaultValue : this.clearValue;
      },
      isClearable: function isClearable() {
        return this.editable && this.clearable && JSON.stringify(this.computedClearValue) !== JSON.stringify(this.value);
      },
      modalBtnColor: function modalBtnColor() {
        return this.color;
      }
    },
    methods: {
      toggle: function toggle() {
        this.$refs.popup && this[this.$refs.popup.showing ? "hide" : "show"]();
      },
      show: function show() {
        if (!this.disable) return this.__setModel(this.value || this.defaultValue), this.$refs.popup.show();
      },
      hide: function hide() {
        return this.$refs.popup ? this.$refs.popup.hide() : Promise.resolve();
      },
      __handleKeyDown: function __handleKeyDown(t) {
        switch (E(t)) {
          case 13:
          case 32:
            return F(t), this.show();

          case 8:
            this.isClearable && this.clear();
        }
      },
      __onFocus: function __onFocus() {
        this.disable || this.focused || (this.model = ci(this.value || this.defaultValue), this.focused = !0, this.$emit("focus"));
      },
      __onBlur: function __onBlur(t) {
        var e = this;
        this.focused && setTimeout(function () {
          var t = document.activeElement;
          e.$refs.popup && e.$refs.popup.showing && (t === document.body || e.$refs.popup.$el.contains(t)) || (e.__onHide(), e.hide());
        }, 1);
      },
      __onHide: function __onHide(t, e) {
        (t || this.isPopover) && this.__update(t), this.focused && (e ? this.$el.focus() : (this.$emit("blur"), this.focused = !1));
      },
      __setModel: function __setModel(t, e) {
        this.model = ci(t), (e || this.isPopover) && this.__update(e);
      },
      __hasModelChanged: function __hasModelChanged() {
        return JSON.stringify(this.model) !== JSON.stringify(this.value);
      },
      __update: function __update(t) {
        var e = this;
        this.$nextTick(function () {
          e.__hasModelChanged() && (e.$emit("input", e.model), t && e.$emit("change", e.model));
        });
      },
      __getPicker: function __getPicker(t, e) {
        var i = this,
            s = [t(hi, {
          staticClass: "no-border" + (e ? " full-width" : ""),
          props: Object.assign({
            value: this.model,
            disable: this.disable,
            readonly: this.readonly,
            formatModel: this.formatModel,
            dark: this.dark,
            noParentField: !0
          }, this.$attrs),
          on: {
            input: function input(t) {
              return i.$nextTick(function () {
                return i.__setModel(t);
              });
            }
          }
        })];
        return e && s.push(t("div", {
          staticClass: "modal-buttons modal-buttons-top row full-width",
          "class": this.dark ? "bg-black" : null
        }, [t("div", {
          staticClass: "col"
        }), t(Yt, {
          props: {
            color: this.modalBtnColor,
            flat: !0,
            label: this.cancelLabel || this.$q.i18n.label.cancel,
            noRipple: !0
          },
          on: {
            click: function click() {
              i.__onHide(!1, !0), i.hide();
            }
          }
        }), this.editable ? t(Yt, {
          props: {
            color: this.modalBtnColor,
            flat: !0,
            label: this.okLabel || this.$q.i18n.label.set,
            noRipple: !0,
            disable: !this.model
          },
          on: {
            click: function click() {
              i.__onHide(!0, !0), i.hide();
            }
          }
        }) : null])), s;
      }
    },
    render: function render(t) {
      var e = this;
      return t(Je, {
        staticClass: "q-color-input",
        props: {
          prefix: this.prefix,
          suffix: this.suffix,
          stackLabel: this.stackLabel,
          floatLabel: this.floatLabel,
          error: this.error,
          warning: this.warning,
          disable: this.disable,
          readonly: this.readonly,
          inverted: this.inverted,
          invertedLight: this.invertedLight,
          dark: this.dark,
          hideUnderline: this.hideUnderline,
          before: this.before,
          after: this.after,
          color: this.color,
          noParentField: this.noParentField,
          focused: this.focused || this.$refs.popup && this.$refs.popup.showing,
          focusable: !0,
          length: this.actualValue.length
        },
        nativeOn: {
          click: this.toggle,
          focus: this.__onFocus,
          blur: this.__onBlur,
          keydown: this.__handleKeyDown
        }
      }, [t("div", {
        staticClass: "col q-input-target ellipsis",
        "class": this.fakeInputClasses
      }, [this.fakeInputValue]), this.isPopover ? t(ae, {
        ref: "popup",
        props: {
          disable: this.disable,
          anchorClick: !1,
          maxHeight: "100vh"
        },
        slot: "after",
        on: {
          show: this.__onFocus,
          hide: function hide() {
            return e.__onHide(!0, !0);
          }
        }
      }, this.__getPicker(t)) : t(ut, {
        ref: "popup",
        staticClass: "with-backdrop",
        props: {
          contentCss: ui,
          minimized: !0,
          position: null,
          transition: this.transition
        },
        on: {
          dismiss: function dismiss() {
            return e.__onHide(!1, !0);
          }
        }
      }, this.__getPicker(t, !0)), this.isClearable ? t(dt, {
        slot: "after",
        props: {
          name: this.$q.icon.input["clear" + (this.isInverted ? "Inverted" : "")]
        },
        nativeOn: {
          click: this.clear
        },
        staticClass: "q-if-control"
      }) : null, t(dt, {
        slot: "after",
        props: {
          name: this.$q.icon.input.dropdown
        },
        staticClass: "q-if-control"
      })]);
    }
  },
      pi = {
    name: "QContextMenu",
    props: {
      disable: Boolean
    },
    data: function data() {
      return {
        mobile: this.$q.platform.is.mobile
      };
    },
    methods: {
      hide: function hide(t) {
        if (this.$refs.popup) return this.mobile && this.target.classList.remove("non-selectable"), this.$refs.popup.hide(t);
      },
      show: function show(t) {
        var e = this;
        this.disable || (this.mobile ? this.$refs.popup && (this.event = t, this.$refs.popup.show(t)) : t && (F(t), setTimeout(function () {
          e.$refs.popup && (e.event = t, e.$refs.popup.show(t));
        }, 100)));
      },
      __desktopBodyHide: function __desktopBodyHide(t) {
        this.$el.contains(t.target) || this.hide(t);
      },
      __desktopOnShow: function __desktopOnShow() {
        document.body.addEventListener("contextmenu", this.__desktopBodyHide, !0), document.body.addEventListener("click", this.__desktopBodyHide, !0), this.$emit("show", this.event);
      },
      __desktopOnHide: function __desktopOnHide(t) {
        document.body.removeEventListener("contextmenu", this.__desktopBodyHide, !0), document.body.removeEventListener("click", this.__desktopBodyHide, !0), this.$emit("hide", this.event, t);
      },
      __mobileTouchStartHandler: function __mobileTouchStartHandler(t) {
        var e = this;
        this.__mobileCleanup(), t && t.touches && t.touches.length > 1 || (this.target.classList.add("non-selectable"), this.touchTimer = setTimeout(function () {
          t && F(t), e.__mobileCleanup(), setTimeout(function () {
            e.show(t);
          }, 10);
        }, 600));
      },
      __mobileCleanup: function __mobileCleanup() {
        this.target.classList.remove("non-selectable"), clearTimeout(this.touchTimer);
      }
    },
    render: function render(t) {
      var e = this;
      return this.mobile ? t(ut, {
        ref: "popup",
        props: {
          minimized: !0
        },
        on: {
          show: function show() {
            e.$emit("show", e.event);
          },
          hide: function hide(t) {
            e.$emit("hide", e.event, t);
          }
        }
      }, this.$slots["default"]) : t(ae, {
        ref: "popup",
        props: {
          anchorClick: !1
        },
        on: {
          show: this.__desktopOnShow,
          hide: this.__desktopOnHide
        }
      }, this.$slots["default"]);
    },
    mounted: function mounted() {
      var t = this;
      this.mobile ? this.$nextTick(function () {
        t.target = t.$el.parentNode, t.target.addEventListener("touchstart", t.__mobileTouchStartHandler), ["touchcancel", "touchmove", "touchend"].forEach(function (e) {
          t.target.addEventListener(e, t.__mobileCleanup);
        });
      }) : (this.target = this.$el.parentNode, this.target.addEventListener("contextmenu", this.show));
    },
    beforeDestroy: function beforeDestroy() {
      var t = this;
      this.mobile ? (this.target.removeEventListener("touchstart", this.__mobileTouchStartHandler), ["touchcancel", "touchmove", "touchend"].forEach(function (e) {
        t.target.removeEventListener(e, t.__mobileCleanup);
      })) : this.target.removeEventListener("contextmenu", this.show);
    }
  },
      fi = function fi(t) {
    var e = _typeof(t);

    return null === t || void 0 === t || "number" === e || "string" === e || xe(t);
  },
      mi = {
    value: {
      validator: fi,
      required: !0
    },
    defaultValue: {
      type: [String, Number, Date],
      "default": null
    },
    type: {
      type: String,
      "default": "date",
      validator: function validator(t) {
        return ["date", "time", "datetime"].includes(t);
      }
    },
    color: {
      type: String,
      "default": "primary"
    },
    dark: Boolean,
    min: {
      validator: fi,
      "default": null
    },
    max: {
      validator: fi,
      "default": null
    },
    firstDayOfWeek: Number,
    formatModel: {
      type: String,
      "default": "auto",
      validator: function validator(t) {
        return ["auto", "date", "number", "string"].includes(t);
      }
    },
    format24h: {
      type: [Boolean, Number],
      "default": 0,
      validator: function validator(t) {
        return [!0, !1, 0].includes(t);
      }
    },
    defaultView: {
      type: String,
      validator: function validator(t) {
        return ["year", "month", "day", "hour", "minute"].includes(t);
      }
    },
    minimal: Boolean
  },
      gi = {
    format: String,
    okLabel: String,
    cancelLabel: String,
    displayValue: String
  },
      vi = 864e5,
      bi = 36e5,
      _i = 6e4,
      yi = /\[((?:[^\]\\]|\\]|\\)*)\]|d{1,4}|M{1,4}|m{1,2}|w{1,2}|Qo|Do|D{1,4}|YY(?:YY)?|H{1,2}|h{1,2}|s{1,2}|S{1,3}|Z{1,2}|a{1,2}|[AQExX]/g;

  function wi(t, e) {
    void 0 === e && (e = "");
    var i = t > 0 ? "-" : "+",
        s = Math.abs(t),
        n = s % 60;
    return i + Lt(Math.floor(s / 60)) + e + Lt(n);
  }

  function Ci(t, e) {
    var i = new Date(t.getFullYear(), e, 0, 0, 0, 0, 0).getDate();
    t.setMonth(e - 1, Math.min(i, t.getDate()));
  }

  function xi(t, e, i) {
    var s = new Date(t),
        n = i ? 1 : -1;
    return Object.keys(e).forEach(function (t) {
      if ("month" !== t) {
        var i = "year" === t ? "FullYear" : Tt("days" === t ? "date" : t);
        s["set" + i](s["get" + i]() + n * e[t]);
      } else Ci(s, s.getMonth() + 1 + n * e.month);
    }), s;
  }

  function ki(t) {
    if ("number" == typeof t) return !0;
    var e = Date.parse(t);
    return !1 === isNaN(e);
  }

  function Si(t) {
    var e = new Date(t.getFullYear(), t.getMonth(), t.getDate());
    e.setDate(e.getDate() - (e.getDay() + 6) % 7 + 3);
    var i = new Date(e.getFullYear(), 0, 4);
    i.setDate(i.getDate() - (i.getDay() + 6) % 7 + 3);
    var s = e.getTimezoneOffset() - i.getTimezoneOffset();
    e.setHours(e.getHours() - s);
    var n = (e - i) / (7 * vi);
    return 1 + Math.floor(n);
  }

  function qi(t, e, i) {
    var s = new Date(t),
        n = "set" + (i ? "UTC" : "");
    return Object.keys(e).forEach(function (t) {
      if ("month" !== t) {
        var i = "year" === t ? "FullYear" : t.charAt(0).toUpperCase() + t.slice(1);
        s["" + n + i](e[t]);
      } else Ci(s, e.month);
    }), s;
  }

  function $i(t, e) {
    var i = new Date(t);

    switch (e) {
      case "year":
        i.setMonth(0);

      case "month":
        i.setDate(1);

      case "day":
        i.setHours(0);

      case "hour":
        i.setMinutes(0);

      case "minute":
        i.setSeconds(0);

      case "second":
        i.setMilliseconds(0);
    }

    return i;
  }

  function Ti(t, e, i) {
    return (t.getTime() - t.getTimezoneOffset() * _i - (e.getTime() - e.getTimezoneOffset() * _i)) / i;
  }

  function Pi(t, e, i) {
    void 0 === i && (i = "days");
    var s = new Date(t),
        n = new Date(e);

    switch (i) {
      case "years":
        return s.getFullYear() - n.getFullYear();

      case "months":
        return 12 * (s.getFullYear() - n.getFullYear()) + s.getMonth() - n.getMonth();

      case "days":
        return Ti($i(s, "day"), $i(n, "day"), vi);

      case "hours":
        return Ti($i(s, "hour"), $i(n, "hour"), bi);

      case "minutes":
        return Ti($i(s, "minute"), $i(n, "minute"), _i);

      case "seconds":
        return Ti($i(s, "second"), $i(n, "second"), 1e3);
    }
  }

  function Mi(t) {
    return Pi(t, $i(t, "year"), "days") + 1;
  }

  function Li(t) {
    return xe(t) ? "date" : "number" == typeof t ? "number" : "string";
  }

  function Bi(t, e, i) {
    if (t || 0 === t) switch (e) {
      case "date":
        return t;

      case "number":
        return t.getTime();

      default:
        return Ri(t, i);
    }
  }

  function Ei(t, e, i) {
    var s = new Date(t);

    if (e) {
      var n = new Date(e);
      if (s < n) return n;
    }

    if (i) {
      var o = new Date(i);
      if (s > o) return o;
    }

    return s;
  }

  function Ni(t, e, i) {
    var s = new Date(t),
        n = new Date(e);
    if (void 0 === i) return s.getTime() === n.getTime();

    switch (i) {
      case "second":
        if (s.getSeconds() !== n.getSeconds()) return !1;

      case "minute":
        if (s.getMinutes() !== n.getMinutes()) return !1;

      case "hour":
        if (s.getHours() !== n.getHours()) return !1;

      case "day":
        if (s.getDate() !== n.getDate()) return !1;

      case "month":
        if (s.getMonth() !== n.getMonth()) return !1;

      case "year":
        if (s.getFullYear() !== n.getFullYear()) return !1;
        break;

      default:
        throw new Error("date isSameDate unknown unit " + i);
    }

    return !0;
  }

  function Oi(t) {
    return new Date(t.getFullYear(), t.getMonth() + 1, 0).getDate();
  }

  function Di(t) {
    if (t >= 11 && t <= 13) return t + "th";

    switch (t % 10) {
      case 1:
        return t + "st";

      case 2:
        return t + "nd";

      case 3:
        return t + "rd";
    }

    return t + "th";
  }

  var zi = {
    YY: function YY(t) {
      return Lt(t.getFullYear(), 4).substr(2);
    },
    YYYY: function YYYY(t) {
      return Lt(t.getFullYear(), 4);
    },
    M: function M(t) {
      return t.getMonth() + 1;
    },
    MM: function MM(t) {
      return Lt(t.getMonth() + 1);
    },
    MMM: function MMM(t) {
      return u.lang.date.monthsShort[t.getMonth()];
    },
    MMMM: function MMMM(t) {
      return u.lang.date.months[t.getMonth()];
    },
    Q: function Q(t) {
      return Math.ceil((t.getMonth() + 1) / 3);
    },
    Qo: function Qo(t) {
      return Di(this.Q(t));
    },
    D: function D(t) {
      return t.getDate();
    },
    Do: function Do(t) {
      return Di(t.getDate());
    },
    DD: function DD(t) {
      return Lt(t.getDate());
    },
    DDD: function DDD(t) {
      return Mi(t);
    },
    DDDD: function DDDD(t) {
      return Lt(Mi(t), 3);
    },
    d: function d(t) {
      return t.getDay();
    },
    dd: function dd(t) {
      return this.dddd(t).slice(0, 2);
    },
    ddd: function ddd(t) {
      return u.lang.date.daysShort[t.getDay()];
    },
    dddd: function dddd(t) {
      return u.lang.date.days[t.getDay()];
    },
    E: function E(t) {
      return t.getDay() || 7;
    },
    w: function w(t) {
      return Si(t);
    },
    ww: function ww(t) {
      return Lt(Si(t));
    },
    H: function H(t) {
      return t.getHours();
    },
    HH: function HH(t) {
      return Lt(t.getHours());
    },
    h: function h(t) {
      var e = t.getHours();
      return 0 === e ? 12 : e > 12 ? e % 12 : e;
    },
    hh: function hh(t) {
      return Lt(this.h(t));
    },
    m: function m(t) {
      return t.getMinutes();
    },
    mm: function mm(t) {
      return Lt(t.getMinutes());
    },
    s: function s(t) {
      return t.getSeconds();
    },
    ss: function ss(t) {
      return Lt(t.getSeconds());
    },
    S: function S(t) {
      return Math.floor(t.getMilliseconds() / 100);
    },
    SS: function SS(t) {
      return Lt(Math.floor(t.getMilliseconds() / 10));
    },
    SSS: function SSS(t) {
      return Lt(t.getMilliseconds(), 3);
    },
    A: function A(t) {
      return this.H(t) < 12 ? "AM" : "PM";
    },
    a: function a(t) {
      return this.H(t) < 12 ? "am" : "pm";
    },
    aa: function aa(t) {
      return this.H(t) < 12 ? "a.m." : "p.m.";
    },
    Z: function Z(t) {
      return wi(t.getTimezoneOffset(), ":");
    },
    ZZ: function ZZ(t) {
      return wi(t.getTimezoneOffset());
    },
    X: function X(t) {
      return Math.floor(t.getTime() / 1e3);
    },
    x: function x(t) {
      return t.getTime();
    }
  };

  function Ri(t, e) {
    if (void 0 === e && (e = "YYYY-MM-DDTHH:mm:ss.SSSZ"), 0 === t || t) {
      var i = new Date(t);
      return e.replace(yi, function (t, e) {
        return t in zi ? zi[t](i) : void 0 === e ? t : e.split("\\]").join("]");
      });
    }
  }

  function Ii(t) {
    return xe(t) ? new Date(t.getTime()) : t;
  }

  var Hi = {
    isValid: ki,
    buildDate: function buildDate(t, e) {
      return qi(new Date(), t, e);
    },
    getDayOfWeek: function getDayOfWeek(t) {
      var e = new Date(t).getDay();
      return 0 === e ? 7 : e;
    },
    getWeekOfYear: Si,
    isBetweenDates: function isBetweenDates(t, e, i, s) {
      void 0 === s && (s = {});
      var n = new Date(e).getTime(),
          o = new Date(i).getTime(),
          r = new Date(t).getTime();
      return s.inclusiveFrom && n--, s.inclusiveTo && o++, r > n && r < o;
    },
    addToDate: function addToDate(t, e) {
      return xi(t, e, !0);
    },
    subtractFromDate: function subtractFromDate(t, e) {
      return xi(t, e, !1);
    },
    adjustDate: qi,
    startOfDate: $i,
    endOfDate: function endOfDate(t, e) {
      var i = new Date(t);

      switch (e) {
        case "year":
          i.setMonth(11);

        case "month":
          i.setDate(Oi(t));

        case "day":
          i.setHours(23);

        case "hour":
          i.setMinutes(59);

        case "minute":
          i.setSeconds(59);

        case "second":
          i.setMilliseconds(59);
      }

      return i;
    },
    getMaxDate: function getMaxDate(t) {
      for (var e = [], i = arguments.length - 1; i-- > 0;) {
        e[i] = arguments[i + 1];
      }

      var s = new Date(t);
      return e.forEach(function (t) {
        s = Math.max(s, new Date(t));
      }), s;
    },
    getMinDate: function getMinDate(t) {
      for (var e = [], i = arguments.length - 1; i-- > 0;) {
        e[i] = arguments[i + 1];
      }

      var s = new Date(t);
      return e.forEach(function (t) {
        s = Math.min(s, new Date(t));
      }), s;
    },
    getDateDiff: Pi,
    getDayOfYear: Mi,
    inferDateFormat: Li,
    convertDateToFormat: Bi,
    getDateBetween: Ei,
    isSameDate: Ni,
    daysInMonth: Oi,
    formatter: zi,
    formatDate: Ri,
    matchFormat: function matchFormat(t) {
      return void 0 === t && (t = ""), t.match(yi);
    },
    clone: Ii
  },
      Fi = /^\d{4}[^\d]\d{2}[^\d]\d{2}/;
  var Ai = {
    name: "QDatetimePicker",
    mixins: [{
      props: mi,
      computed: {
        computedValue: function computedValue() {
          return "date" === this.type && "string" === this.formatModel && Fi.test(this.value) ? this.value.slice(0, 10).split(/[^\d]/).join("/") : this.value;
        },
        computedDefaultValue: function computedDefaultValue() {
          return "date" === this.type && "string" === this.formatModel && Fi.test(this.defaultValue) ? this.defaultValue.slice(0, 10).split(/[^\d]+/).join("/") : this.defaultValue;
        },
        computedDateFormat: function computedDateFormat() {
          if ("date" === this.type && "string" === this.formatModel) return "YYYY/MM/DD HH:mm:ss";
        },
        model: {
          get: function get() {
            return Ei(ki(this.computedValue) ? new Date(this.computedValue) : this.computedDefaultValue ? new Date(this.computedDefaultValue) : $i(new Date(), "day"), this.pmin, this.pmax);
          },
          set: function set(t) {
            var e = this,
                i = Bi(Ei(t, this.pmin, this.pmax), "auto" === this.formatModel ? Li(this.value) : this.formatModel, this.computedDateFormat);
            this.$emit("input", i), this.$nextTick(function () {
              Ni(i, e.value) || e.$emit("change", i);
            });
          }
        },
        pmin: function pmin() {
          return this.min ? new Date(this.min) : null;
        },
        pmax: function pmax() {
          return this.max ? new Date(this.max) : null;
        },
        typeHasDate: function typeHasDate() {
          return "date" === this.type || "datetime" === this.type;
        },
        typeHasTime: function typeHasTime() {
          return "time" === this.type || "datetime" === this.type;
        },
        year: function year() {
          return this.model.getFullYear();
        },
        month: function month() {
          return this.model.getMonth() + 1;
        },
        day: function day() {
          return this.model.getDate();
        },
        minute: function minute() {
          return this.model.getMinutes();
        },
        currentYear: function currentYear() {
          return new Date().getFullYear();
        },
        yearInterval: function yearInterval() {
          var t = this.yearMin,
              e = null !== this.pmax ? this.pmax.getFullYear() : (this.year || this.currentYear) + 50;
          return Math.max(1, e - t);
        },
        yearMin: function yearMin() {
          return null !== this.pmin ? this.pmin.getFullYear() - 1 : (this.year || this.currentYear) - 51;
        },
        monthInterval: function monthInterval() {
          var t = this.monthMin,
              e = null !== this.pmax && this.pmax.getFullYear() === this.year ? this.pmax.getMonth() : 11;
          return Math.max(1, e - t + 1);
        },
        monthMin: function monthMin() {
          return null !== this.pmin && this.pmin.getFullYear() === this.year ? this.pmin.getMonth() : 0;
        },
        daysInMonth: function daysInMonth() {
          return new Date(this.year, this.model.getMonth() + 1, 0).getDate();
        },
        editable: function editable() {
          return !this.disable && !this.readonly;
        },
        __needsBorder: function __needsBorder() {
          return !0;
        }
      },
      methods: {
        toggleAmPm: function toggleAmPm() {
          if (this.editable) {
            var t = this.model.getHours(),
                e = this.am ? 12 : -12;
            this.model = new Date(this.model.setHours(t + e));
          }
        },
        __parseTypeValue: function __parseTypeValue(t, e) {
          if ("month" === t) return Pt(e, 1, 12);
          if ("date" === t) return Pt(e, 1, this.daysInMonth);

          if ("year" === t) {
            var i = this.yearMin;
            return Pt(e, i + 1, i + this.yearInterval);
          }

          return "hour" === t ? Pt(e, 0, 23) : "minute" === t ? Pt(e, 0, 59) : void 0;
        }
      }
    }, Ye, re],
    props: {
      defaultValue: [String, Number, Date],
      disable: Boolean,
      readonly: Boolean
    },
    directives: {
      Ripple: Ht
    },
    data: function data() {
      var t = this;
      return {
        view: this.__calcView(this.defaultView),
        dragging: !1,
        centerClockPos: 0,
        __amPmEvents: {
          keyup: function keyup(e) {
            var i = E(e);
            13 !== i && 32 !== i || (F(e), t.toggleAmPm());
          }
        }
      };
    },
    watch: {
      value: function value(t) {
        t || (this.view = ["date", "datetime"].includes(this.type) ? "day" : "hour");
      },
      view: function view() {
        this.__scrollView();
      }
    },
    computed: {
      classes: function classes() {
        var t = [];
        return this.disable && t.push("disabled"), this.readonly && t.push("readonly"), this.dark && t.push("q-datetime-dark"), this.minimal && t.push("q-datetime-minimal"), this.color && t.push("text-" + this.color), t;
      },
      contentClasses: function contentClasses() {
        if (!this.minimal) return "col-md-8";
      },
      dateArrow: function dateArrow() {
        var t = [this.$q.icon.datetime.arrowLeft, this.$q.icon.datetime.arrowRight];
        return this.$q.i18n.rtl ? t.reverse() : t;
      },
      computedFormat24h: function computedFormat24h() {
        return 0 !== this.format24h ? this.format24h : this.$q.i18n.date.format24h;
      },
      computedFirstDayOfWeek: function computedFirstDayOfWeek() {
        return void 0 !== this.firstDayOfWeek ? this.firstDayOfWeek : this.$q.i18n.date.firstDayOfWeek;
      },
      headerDayNames: function headerDayNames() {
        var t = this.$q.i18n.date.daysShort,
            e = this.computedFirstDayOfWeek;
        return e > 0 ? t.slice(e, 7).concat(t.slice(0, e)) : t;
      },
      monthString: function monthString() {
        return "" + this.$q.i18n.date.monthsShort[this.month - 1];
      },
      monthStamp: function monthStamp() {
        return this.$q.i18n.date.months[this.month - 1] + " " + this.year;
      },
      weekDayString: function weekDayString() {
        return this.$q.i18n.date.days[this.model.getDay()];
      },
      fillerDays: function fillerDays() {
        var t = new Date(this.model.getFullYear(), this.model.getMonth(), 1).getDay() - this.computedFirstDayOfWeek;
        return t < 0 && (t += 7), t;
      },
      beforeMinDays: function beforeMinDays() {
        return !(null === this.pmin || !Ni(this.pmin, this.model, "month")) && this.pmin.getDate() - 1;
      },
      afterMaxDays: function afterMaxDays() {
        return !(null === this.pmax || !Ni(this.pmax, this.model, "month")) && this.daysInMonth - this.maxDay;
      },
      maxDay: function maxDay() {
        return null !== this.pmax ? this.pmax.getDate() : this.daysInMonth;
      },
      daysInterval: function daysInterval() {
        var t = null === this.pmax || !1 === this.afterMaxDays ? 0 : this.afterMaxDays;
        return this.beforeMinDays > 0 || t ? {
          min: this.beforeMinDays > 0 ? this.beforeMinDays + 1 : 1,
          max: this.daysInMonth - t + 1
        } : {
          min: 1,
          max: this.daysInMonth
        };
      },
      hour: function hour() {
        var t = this.model.getHours();
        return this.computedFormat24h ? t : function (t) {
          return 0 === t ? 12 : t >= 13 ? t - 12 : t;
        }(t);
      },
      minute: function minute() {
        return this.model.getMinutes();
      },
      am: function am() {
        return this.model.getHours() <= 11;
      },
      clockPointerStyle: function clockPointerStyle() {
        var t = "minute" === this.view ? 60 : this.computedFormat24h ? 24 : 12;
        return Y("rotate(" + (Math.round(("minute" === this.view ? this.minute : this.hour) * (360 / t)) - 180) + "deg)");
      },
      isValid: function isValid() {
        return ki(this.value);
      },
      today: function today() {
        var t = new Date();
        return Ni(t, this.model, "month") ? t.getDate() : -1;
      }
    },
    methods: {
      setYear: function setYear(t, e) {
        this.editable && (e || (this.view = "day"), this.model = new Date(this.model.setFullYear(this.__parseTypeValue("year", t))));
      },
      setMonth: function setMonth(t, e) {
        this.editable && (e || (this.view = "day"), this.model = qi(this.model, {
          month: t
        }));
      },
      setDay: function setDay(t, e) {
        this.editable && (this.model = new Date(this.model.setDate(this.__parseTypeValue("date", t))), e || "date" !== this.type ? e || (this.view = "hour") : this.$emit("canClose"));
      },
      setHour: function setHour(t) {
        this.editable && (t = this.__parseTypeValue("hour", t), !this.computedFormat24h && t < 12 && !this.am && (t += 12), this.model = new Date(this.model.setHours(t)));
      },
      setMinute: function setMinute(t) {
        this.editable && (this.model = new Date(this.model.setMinutes(this.__parseTypeValue("minute", t))));
      },
      setView: function setView(t) {
        var e = this.__calcView(t);

        this.view !== e && (this.view = e);
      },
      __calcView: function __calcView(t) {
        switch (this.type) {
          case "time":
            return t && ["hour", "minute"].includes(t) ? t : "hour";

          case "date":
            return t && ["year", "month", "day"].includes(t) ? t : "day";

          default:
            return t && ["year", "month", "day", "hour", "minute"].includes(t) ? t : "day";
        }
      },
      __pad: function __pad(t, e) {
        return (t < 10 ? e || "0" : "") + t;
      },
      __scrollView: function __scrollView() {
        if ("year" === this.view || "month" === this.view) {
          var t = this.$refs.selector,
              e = "year" === this.view ? this.year - this.yearMin : this.month - this.monthMin;
          this.$nextTick(function () {
            t && (t.scrollTop = e * V(t.children[0].children[0]) - V(t) / 2.5);
          });
        }
      },
      __dragStart: function __dragStart(t) {
        F(t);
        var e = this.$refs.clock,
            i = Q(e);
        this.centerClockPos = {
          top: i.top + V(e) / 2,
          left: i.left + W(e) / 2
        }, this.dragging = !0, this.__updateClock(t);
      },
      __dragMove: function __dragMove(t) {
        this.dragging && (F(t), this.__updateClock(t));
      },
      __dragStop: function __dragStop(t) {
        F(t), this.dragging = !1, "minute" === this.view ? this.$emit("canClose") : this.view = "minute";
      },
      __updateClock: function __updateClock(t) {
        var e = N(t),
            i = Math.abs(e.top - this.centerClockPos.top),
            s = Math.sqrt(Math.pow(Math.abs(e.top - this.centerClockPos.top), 2) + Math.pow(Math.abs(e.left - this.centerClockPos.left), 2)),
            n = Math.asin(i / s) * (180 / Math.PI);
        n = e.top < this.centerClockPos.top ? this.centerClockPos.left < e.left ? 90 - n : 270 + n : this.centerClockPos.left < e.left ? n + 90 : 270 - n, "hour" === this.view ? this.setHour(Math.round(n / (this.computedFormat24h ? 15 : 30))) : this.setMinute(Math.round(n / 6));
      },
      __repeatTimeout: function __repeatTimeout(t) {
        return Math.max(100, 300 - t * t * 10);
      },
      __getTopSection: function __getTopSection(t) {
        var e = this,
            i = [];

        if (this.typeHasDate) {
          var s = [t("div", {
            staticClass: "q-datetime-weekdaystring col-12"
          }, [this.weekDayString]), t("div", {
            staticClass: "q-datetime-datestring row flex-center"
          }, [t("span", {
            staticClass: "q-datetime-link small col-auto col-md-12",
            "class": {
              active: "month" === this.view
            },
            attrs: {
              tabindex: 0
            },
            on: {
              keydown: function keydown(t) {
                var i = E(t);
                40 === i || 37 === i ? (F(t), e.setMonth(e.month - 1, !0)) : 38 !== i && 39 !== i || (F(t), e.setMonth(e.month + 1, !0));
              }
            }
          }, [t("span", {
            attrs: {
              tabindex: -1
            },
            on: this.disable ? {} : {
              click: function click() {
                e.view = "month";
              }
            }
          }, [this.monthString])]), t("span", {
            staticClass: "q-datetime-link col-auto col-md-12",
            "class": {
              active: "day" === this.view
            },
            attrs: {
              tabindex: 0
            },
            on: {
              keydown: function keydown(t) {
                var i = E(t);
                37 === i || 38 === i ? (F(t), e.setDay(e.day - (37 === i ? 1 : 7), !0)) : 39 !== i && 40 !== i || (F(t), e.setDay(e.day + (39 === i ? 1 : 7), !0));
              }
            }
          }, [t("span", {
            attrs: {
              tabindex: -1
            },
            on: this.disable ? {} : {
              click: function click() {
                e.view = "day";
              }
            }
          }, [this.day])]), t("span", {
            staticClass: "q-datetime-link small col-auto col-md-12",
            "class": {
              active: "year" === this.view
            },
            attrs: {
              tabindex: 0
            },
            on: {
              keydown: function keydown(t) {
                var i = E(t);
                40 === i || 37 === i ? (F(t), e.setYear(e.year - 1, !0)) : 38 !== i && 39 !== i || (F(t), e.setYear(e.year + 1, !0));
              }
            }
          }, [t("span", {
            attrs: {
              tabindex: -1
            },
            on: this.disable ? {} : {
              click: function click() {
                e.view = "year";
              }
            }
          }, [this.year])])])];
          i.push(t("div", s));
        }

        if (this.typeHasTime) {
          var n = [t("span", {
            staticClass: "q-datetime-link col-md text-right q-pr-sm",
            "class": {
              active: "hour" === this.view
            },
            attrs: {
              tabindex: 0
            },
            on: {
              keydown: function keydown(t) {
                var i = E(t);
                40 === i || 37 === i ? (F(t), e.setHour(e.hour - 1, !0)) : 38 !== i && 39 !== i || (F(t), e.setHour(e.hour + 1, !0));
              }
            }
          }, [t("span", {
            attrs: {
              tabindex: -1
            },
            on: this.disable ? {} : {
              click: function click() {
                e.view = "hour";
              }
            }
          }, [this.hour])]), t("span", {
            style: "opacity:0.6;"
          }, [":"]), t("span", {
            staticClass: "q-datetime-link col-md text-left q-pl-sm",
            "class": {
              active: "minute" === this.view
            },
            attrs: {
              tabindex: 0
            },
            on: {
              keydown: function keydown(t) {
                var i = E(t);
                40 === i || 37 === i ? (F(t), e.setMinute(e.minute - 1, !0)) : 38 !== i && 39 !== i || (F(t), e.setHour(e.minute + 1, !0));
              }
            }
          }, [t("span", {
            attrs: {
              tabindex: -1
            },
            on: this.disable ? {} : {
              click: function click() {
                e.view = "minute";
              }
            }
          }, [this.__pad(this.minute)])])];
          i.push(t("div", {
            staticClass: "q-datetime-time row flex-center"
          }, [t("div", {
            staticClass: "q-datetime-clockstring col-auto col-md-12 row no-wrap flex-center"
          }, n), !this.computedFormat24h && t("div", {
            staticClass: "q-datetime-ampm column col-auto col-md-12 justify-around"
          }, [t("div", {
            staticClass: "q-datetime-link",
            "class": {
              active: this.am
            },
            attrs: {
              tabindex: 0
            },
            on: this.__amPmEvents
          }, [t("span", {
            attrs: {
              tabindex: -1
            },
            on: {
              click: this.toggleAmPm
            }
          }, ["AM"])]), t("div", {
            staticClass: "q-datetime-link",
            "class": {
              active: !this.am
            },
            attrs: {
              tabindex: 0
            },
            on: this.__amPmEvents
          }, [t("span", {
            attrs: {
              tabindex: -1
            },
            on: {
              click: this.toggleAmPm
            }
          }, ["PM"])])])]));
        }

        return t("div", {
          staticClass: "q-datetime-header column col-xs-12 col-md-4 justify-center"
        }, i);
      },
      __getYearView: function __getYearView(t) {
        for (var e = this, i = [], s = this.yearInterval + this.yearMin, n = function n(s) {
          i.push(t(Yt, {
            key: "yi" + s,
            staticClass: "q-datetime-btn full-width",
            "class": {
              active: s === e.year
            },
            attrs: {
              tabindex: -1
            },
            props: {
              flat: !0,
              disable: !e.editable
            },
            on: {
              click: function click() {
                e.setYear(s);
              }
            }
          }, [s]));
        }, o = this.yearMin; o <= s; o++) {
          n(o);
        }

        return t("div", {
          staticClass: "q-datetime-view-year full-width full-height"
        }, i);
      },
      __getMonthView: function __getMonthView(t) {
        for (var e = this, i = [], s = function s(_s2) {
          i.push(t(Yt, {
            key: "mi" + _s2,
            staticClass: "q-datetime-btn full-width",
            "class": {
              active: _s2 + 1 === e.month
            },
            attrs: {
              tabindex: -1
            },
            props: {
              flat: !0,
              disable: !e.editable
            },
            on: {
              click: function click() {
                e.setMonth(_s2 + 1, !0);
              }
            }
          }, [e.$q.i18n.date.months[_s2]]));
        }, n = this.monthMin; n <= this.monthInterval; n++) {
          s(n);
        }

        return t("div", {
          staticClass: "q-datetime-view-month full-width full-height"
        }, i);
      },
      __getDayView: function __getDayView(t) {
        for (var e = this, i = [], s = 1; s <= this.fillerDays; s++) {
          i.push(t("div", {
            key: "fd" + s,
            staticClass: "q-datetime-fillerday"
          }));
        }

        if (this.min) for (var n = 1; n <= this.beforeMinDays; n++) {
          i.push(t("div", {
            key: "fb" + n,
            staticClass: "row items-center content-center justify-center disabled"
          }, [n]));
        }

        for (var o = this.daysInterval, r = o.min, a = o.max, l = function l(s) {
          i.push(t("div", {
            key: "md" + s,
            staticClass: "row items-center content-center justify-center cursor-pointer",
            "class": [e.color && s === e.day ? "text-" + e.color : null, {
              "q-datetime-day-active": e.isValid && s === e.day,
              "q-datetime-day-today": s === e.today,
              disabled: !e.editable
            }],
            on: {
              click: function click() {
                e.setDay(s);
              }
            }
          }, [t("span", [s])]));
        }, c = r; c <= a; c++) {
          l(c);
        }

        if (this.max) for (var h = 1; h <= this.afterMaxDays; h++) {
          i.push(t("div", {
            key: "fa" + h,
            staticClass: "row items-center content-center justify-center disabled"
          }, [h + e.maxDay]));
        }
        return t("div", {
          staticClass: "q-datetime-view-day"
        }, [t("div", {
          staticClass: "row items-center content-center"
        }, [t(Yt, {
          staticClass: "q-datetime-arrow",
          attrs: {
            tabindex: -1
          },
          props: {
            round: !0,
            dense: !0,
            flat: !0,
            icon: this.dateArrow[0],
            repeatTimeout: this.__repeatTimeout,
            disable: this.beforeMinDays > 0 || this.disable || this.readonly
          },
          on: {
            click: function click() {
              e.setMonth(e.month - 1);
            }
          }
        }), t("div", {
          staticClass: "col q-datetime-month-stamp"
        }, [this.monthStamp]), t(Yt, {
          staticClass: "q-datetime-arrow",
          attrs: {
            tabindex: -1
          },
          props: {
            round: !0,
            dense: !0,
            flat: !0,
            icon: this.dateArrow[1],
            repeatTimeout: this.__repeatTimeout,
            disable: this.afterMaxDays > 0 || this.disable || this.readonly
          },
          on: {
            click: function click() {
              e.setMonth(e.month + 1);
            }
          }
        })]), t("div", {
          staticClass: "q-datetime-weekdays row items-center justify-start"
        }, this.headerDayNames.map(function (e) {
          return t("div", {
            key: "dh" + e
          }, [e]);
        })), t("div", {
          staticClass: "q-datetime-days row wrap items-center justify-start content-center"
        }, i)]);
      },
      __getClockView: function __getClockView(t) {
        var e = [];

        if ("hour" === this.view) {
          var i,
              s,
              n = "";
          this.computedFormat24h ? (i = 0, s = 24, n = " fmt24") : (i = 1, s = 13);

          for (var o = i; o < s; o++) {
            e.push(t("div", {
              key: "hi" + o,
              staticClass: "q-datetime-clock-position" + n,
              "class": ["q-datetime-clock-pos-" + o, o === this.hour ? "active" : ""]
            }, [t("span", [o])]));
          }
        } else for (var r = 0; r < 12; r++) {
          var a = 5 * r;
          e.push(t("div", {
            key: "mi" + r,
            staticClass: "q-datetime-clock-position",
            "class": ["q-datetime-clock-pos-" + r, a === this.minute ? "active" : ""]
          }, [t("span", [a])]));
        }

        return t("div", {
          ref: "clock",
          staticClass: "column items-center content-center justify-center"
        }, [t("div", {
          staticClass: "q-datetime-clock cursor-pointer",
          on: {
            mousedown: this.__dragStart,
            mousemove: this.__dragMove,
            mouseup: this.__dragStop,
            touchstart: this.__dragStart,
            touchmove: this.__dragMove,
            touchend: this.__dragStop
          }
        }, [t("div", {
          staticClass: "q-datetime-clock-circle full-width full-height"
        }, [t("div", {
          staticClass: "q-datetime-clock-center"
        }), t("div", {
          staticClass: "q-datetime-clock-pointer",
          style: this.clockPointerStyle
        }, [t("span")]), e])])]);
      },
      __getViewSection: function __getViewSection(t) {
        switch (this.view) {
          case "year":
            return this.__getYearView(t);

          case "month":
            return this.__getMonthView(t);

          case "day":
            return this.__getDayView(t);

          case "hour":
          case "minute":
            return this.__getClockView(t);
        }
      }
    },
    mounted: function mounted() {
      var t = this;
      this.$nextTick(function () {
        t.__scrollView();
      });
    },
    render: function render(t) {
      if (this.canRender) return t("div", {
        staticClass: "q-datetime row",
        "class": this.classes
      }, [!this.minimal && this.__getTopSection(t) || void 0, t("div", {
        staticClass: "q-datetime-content col-xs-12 column",
        "class": this.contentClasses
      }, [t("div", {
        ref: "selector",
        staticClass: "q-datetime-selector auto row flex-center"
      }, [this.__getViewSection(t)])].concat(this.$slots["default"]))]);
    }
  },
      Qi = {
    maxWidth: "95vw",
    maxHeight: "98vh"
  },
      ji = {
    name: "QDatetime",
    mixins: [Ue, ii, re],
    props: Object.assign({}, gi, mi),
    watch: {
      value: function value(t) {
        !this.disable && this.isPopover && (this.model = Ii(t));
      }
    },
    data: function data() {
      return {
        transition: null,
        model: null,
        focused: !1
      };
    },
    created: function created() {
      this.model = Ii(this.computedValue), this.isPopover || (this.transition = "q-modal");
    },
    computed: {
      computedFormat: function computedFormat() {
        return this.format ? this.format : "date" === this.type ? "YYYY/MM/DD" : "time" === this.type ? "HH:mm" : "YYYY/MM/DD HH:mm:ss";
      },
      actualValue: function actualValue() {
        return this.displayValue ? this.displayValue : ki(this.value) && this.canRender ? Ri(this.value, this.computedFormat, this.$q.i18n.date) : "";
      },
      computedValue: function computedValue() {
        return ki(this.value) ? this.value : this.defaultValue;
      },
      computedClearValue: function computedClearValue() {
        return void 0 === this.clearValue ? this.defaultValue : this.clearValue;
      },
      isClearable: function isClearable() {
        return this.editable && this.clearable && !Ni(this.computedClearValue, this.value);
      },
      modalBtnColor: function modalBtnColor() {
        return this.color;
      }
    },
    methods: {
      toggle: function toggle() {
        this.$refs.popup && this[this.$refs.popup.showing ? "hide" : "show"]();
      },
      show: function show() {
        if (!this.disable) return this.__setModel(this.computedValue), this.$refs.popup.show();
      },
      hide: function hide() {
        return this.$refs.popup ? this.$refs.popup.hide() : Promise.resolve();
      },
      __handleKeyDown: function __handleKeyDown(t) {
        switch (E(t)) {
          case 13:
          case 32:
            return F(t), this.show();

          case 8:
            this.isClearable && this.clear();
        }
      },
      __onFocus: function __onFocus() {
        if (!this.disable && !this.focused) {
          var t = this.$refs.target;
          t && (this.defaultView ? t.setView(this.defaultView) : t.setView()), this.model = Ii(this.computedValue), this.focused = !0, this.$emit("focus");
        }
      },
      __onBlur: function __onBlur(t) {
        var e = this;
        this.focused && setTimeout(function () {
          var t = document.activeElement;
          e.$refs.popup && e.$refs.popup.showing && (t === document.body || e.$refs.popup.$el.contains(t)) || (e.__onHide(), e.hide());
        }, 1);
      },
      __onHide: function __onHide(t, e) {
        (t || this.isPopover) && this.__update(t), this.focused && (e ? this.$el.focus() : (this.$emit("blur"), this.focused = !1));
      },
      __setModel: function __setModel(t, e) {
        this.model = Ii(t), (e || this.isPopover) && this.__update(e);
      },
      __update: function __update(t) {
        var e = this;
        this.$nextTick(function () {
          Ni(e.model, e.value) || (e.$emit("input", e.model), t && e.$emit("change", e.model));
        });
      },
      __resetView: function __resetView() {
        !this.defaultView && this.$refs.target && this.$refs.target.setView();
      },
      __getPicker: function __getPicker(t, e) {
        var i = this;
        return [t(Ai, {
          ref: "target",
          staticClass: "no-border",
          "class": {
            "datetime-ios-modal": !1
          },
          props: {
            type: this.type,
            min: this.min,
            max: this.max,
            minimal: this.minimal,
            formatModel: this.formatModel,
            format24h: this.format24h,
            firstDayOfWeek: this.firstDayOfWeek,
            defaultView: this.defaultView,
            color: this.invertedLight ? "grey-7" : this.color,
            dark: this.dark,
            value: this.model,
            disable: this.disable,
            readonly: this.readonly,
            noParentField: !0
          },
          on: {
            input: function input(t) {
              return i.$nextTick(function () {
                return i.__setModel(t);
              });
            },
            canClose: function canClose() {
              i.isPopover && (i.hide(), i.__resetView());
            }
          }
        }, [e ? t("div", {
          staticClass: "modal-buttons modal-buttons-top row full-width"
        }, [t("div", {
          staticClass: "col"
        }), t(Yt, {
          props: {
            color: this.modalBtnColor,
            flat: !0,
            label: this.cancelLabel || this.$q.i18n.label.cancel,
            noRipple: !0
          },
          on: {
            click: function click() {
              i.__onHide(!1, !0), i.hide(), i.__resetView();
            }
          }
        }), this.editable ? t(Yt, {
          props: {
            color: this.modalBtnColor,
            flat: !0,
            label: this.okLabel || this.$q.i18n.label.set,
            noRipple: !0,
            disable: !this.model
          },
          on: {
            click: function click() {
              i.__onHide(!0, !0), i.hide(), i.__resetView();
            }
          }
        }) : null]) : null])];
      }
    },
    render: function render(t) {
      var e = this;
      return t(Je, {
        staticClass: "q-datetime-input",
        props: {
          prefix: this.prefix,
          suffix: this.suffix,
          stackLabel: this.stackLabel,
          floatLabel: this.floatLabel,
          error: this.error,
          warning: this.warning,
          disable: this.disable,
          readonly: this.readonly,
          inverted: this.inverted,
          invertedLight: this.invertedLight,
          dark: this.dark,
          hideUnderline: this.hideUnderline,
          before: this.before,
          after: this.after,
          color: this.color,
          noParentField: this.noParentField,
          focused: this.focused || this.$refs.popup && this.$refs.popup.showing,
          focusable: !0,
          length: this.actualValue.length
        },
        nativeOn: {
          click: this.toggle,
          focus: this.__onFocus,
          blur: this.__onBlur,
          keydown: this.__handleKeyDown
        }
      }, [t("div", {
        staticClass: "col q-input-target ellipsis",
        "class": this.fakeInputClasses
      }, [this.fakeInputValue]), this.isPopover ? t(ae, {
        ref: "popup",
        props: {
          disable: this.disable,
          anchorClick: !1,
          maxHeight: "100vh"
        },
        slot: "after",
        on: {
          show: this.__onFocus,
          hide: function hide() {
            return e.__onHide(!0, !0);
          }
        }
      }, this.__getPicker(t)) : t(ut, {
        ref: "popup",
        staticClass: "with-backdrop",
        props: {
          contentCss: Qi,
          minimized: !0,
          position: null,
          transition: this.transition
        },
        on: {
          dismiss: function dismiss() {
            return e.__onHide(!1, !0);
          }
        }
      }, this.__getPicker(t, !0)), this.isClearable ? t(dt, {
        slot: "after",
        props: {
          name: this.$q.icon.input["clear" + (this.isInverted ? "Inverted" : "")]
        },
        nativeOn: {
          click: this.clear
        },
        staticClass: "q-if-control"
      }) : null, t(dt, {
        slot: "after",
        props: {
          name: this.$q.icon.input.dropdown
        },
        staticClass: "q-if-control"
      })]);
    }
  },
      Vi = ["text", "textarea", "email", "tel", "file", "number", "password", "url", "time", "date"],
      Wi = {
    name: "QResizeObservable",
    mixins: [re],
    props: {
      debounce: {
        type: Number,
        "default": 100
      }
    },
    data: function data() {
      return this.hasObserver ? {} : {
        url: this.$q.platform.is.ie ? null : "about:blank"
      };
    },
    methods: {
      onResize: function onResize() {
        if (this.timer = null, this.$el && this.$el.parentNode) {
          var t = this.$el.parentNode,
              e = {
            width: t.offsetWidth,
            height: t.offsetHeight
          };
          e.width === this.size.width && e.height === this.size.height || (this.size = e, this.$emit("resize", this.size));
        }
      },
      trigger: function trigger(t) {
        !0 === t || 0 === this.debounce ? this.onResize() : this.timer || (this.timer = setTimeout(this.onResize, this.debounce));
      }
    },
    render: function render(t) {
      var e = this;
      if (this.canRender && !this.hasObserver) return t("object", {
        style: this.style,
        attrs: {
          type: "text/html",
          data: this.url,
          "aria-hidden": !0
        },
        on: {
          load: function load() {
            e.$el.contentDocument.defaultView.addEventListener("resize", e.trigger, L.passive), e.trigger(!0);
          }
        }
      });
    },
    beforeCreate: function beforeCreate() {
      this.size = {
        width: -1,
        height: -1
      }, i || (this.hasObserver = "undefined" != typeof ResizeObserver, this.hasObserver || (this.style = (this.$q.platform.is.ie ? "visibility:hidden;" : "") + "display:block;position:absolute;top:0;left:0;right:0;bottom:0;height:100%;width:100%;overflow:hidden;pointer-events:none;z-index:-1;"));
    },
    mounted: function mounted() {
      if (this.hasObserver) return this.observer = new ResizeObserver(this.trigger), void this.observer.observe(this.$el.parentNode);
      this.trigger(!0), this.$q.platform.is.ie && (this.url = "about:blank");
    },
    beforeDestroy: function beforeDestroy() {
      clearTimeout(this.timer), this.hasObserver ? this.$el.parentNode && this.observer.unobserve(this.$el.parentNode) : this.$el.contentDocument && this.$el.contentDocument.defaultView.removeEventListener("resize", this.trigger, L.passive);
    }
  },
      Ui = {
    name: "QInput",
    mixins: [Ue, Ke],
    props: {
      value: {
        required: !0
      },
      type: {
        type: String,
        "default": "text",
        validator: function validator(t) {
          return Vi.includes(t);
        }
      },
      align: {
        type: String,
        validator: function validator(t) {
          return ["left", "center", "right"].includes(t);
        }
      },
      noPassToggle: Boolean,
      numericKeyboardToggle: Boolean,
      readonly: Boolean,
      decimals: Number,
      step: Number,
      upperCase: Boolean,
      lowerCase: Boolean
    },
    data: function data() {
      var t = this;
      return {
        showPass: !1,
        showNumber: !0,
        model: this.value,
        watcher: null,
        autofilled: !1,
        shadow: {
          val: this.model,
          set: this.__set,
          setNav: this.__set,
          loading: !1,
          watched: 0,
          isEditable: function isEditable() {
            return t.editable;
          },
          isDark: function isDark() {
            return t.dark;
          },
          hasFocus: function hasFocus() {
            return document.activeElement === t.$refs.input;
          },
          register: function register() {
            t.shadow.watched += 1, t.__watcherRegister();
          },
          unregister: function unregister() {
            t.shadow.watched = Math.max(0, t.shadow.watched - 1), t.__watcherUnregister();
          },
          getEl: function getEl() {
            return t.$refs.input;
          }
        }
      };
    },
    watch: {
      value: function value(t) {
        var e = parseFloat(this.model),
            i = parseFloat(t);
        (!this.isNumber || this.isNumberError || isNaN(e) || isNaN(i) || e !== i) && (this.model = t), this.isNumberError = !1, this.isNegZero = !1;
      },
      isTextarea: function isTextarea(t) {
        this[t ? "__watcherRegister" : "__watcherUnregister"]();
      }
    },
    provide: function provide() {
      return {
        __input: this.shadow
      };
    },
    computed: {
      isNumber: function isNumber() {
        return "number" === this.type;
      },
      isPassword: function isPassword() {
        return "password" === this.type;
      },
      isTextarea: function isTextarea() {
        return "textarea" === this.type;
      },
      isLoading: function isLoading() {
        return this.loading || this.shadow.watched && this.shadow.loading;
      },
      keyboardToggle: function keyboardToggle() {
        return this.$q.platform.is.mobile && this.isNumber && this.numericKeyboardToggle;
      },
      inputType: function inputType() {
        return this.isPassword ? this.showPass && this.editable ? "text" : "password" : this.isNumber ? this.showNumber || !this.editable ? "number" : "text" : this.type;
      },
      inputClasses: function inputClasses() {
        var t = [];
        return this.align && t.push("text-" + this.align), this.autofilled && t.push("q-input-autofill"), t;
      },
      length: function length() {
        return null !== this.model && void 0 !== this.model ? ("" + this.model).length : 0;
      },
      computedClearValue: function computedClearValue() {
        return this.isNumber && 0 === this.clearValue ? this.clearValue : this.clearValue || (this.isNumber ? null : "");
      },
      computedStep: function computedStep() {
        return this.step || (this.decimals ? Math.pow(10, -this.decimals) : "any");
      },
      frameProps: function frameProps() {
        return {
          prefix: this.prefix,
          suffix: this.suffix,
          stackLabel: this.stackLabel,
          floatLabel: this.floatLabel,
          placeholder: this.placeholder,
          error: this.error,
          warning: this.warning,
          disable: this.disable,
          readonly: this.readonly,
          inverted: this.inverted,
          invertedLight: this.invertedLight,
          dark: this.dark,
          hideUnderline: this.hideUnderline,
          before: this.before,
          after: this.after,
          color: this.color,
          noParentField: this.noParentField,
          focused: this.focused,
          length: this.autofilled + this.length
        };
      }
    },
    methods: {
      togglePass: function togglePass() {
        this.showPass = !this.showPass, clearTimeout(this.timer), this.focus();
      },
      toggleNumber: function toggleNumber() {
        this.showNumber = !this.showNumber, clearTimeout(this.timer), this.focus();
      },
      __clearTimer: function __clearTimer() {
        var t = this;
        this.$nextTick(function () {
          return clearTimeout(t.timer);
        });
      },
      __onAnimationStart: function __onAnimationStart(t) {
        if (0 === t.animationName.indexOf("webkit-autofill-")) {
          var e = "webkit-autofill-on" === t.animationName;
          if (e !== this.autofilled) return t.value = this.autofilled = e, t.el = this, this.$emit("autofill", t);
        }
      },
      __setModel: function __setModel(t) {
        clearTimeout(this.timer), this.focus(), this.__set(this.isNumber && 0 === t ? t : t || (this.isNumber ? null : ""), !0);
      },
      __set: function __set(t, e) {
        var i = this,
            s = t && t.target ? t.target.value : t;

        if (this.isNumber) {
          this.isNegZero = 1 / s == -1 / 0;
          var n = this.isNegZero ? -0 : s;
          if (this.model = s, s = parseFloat(s), isNaN(s) || this.isNegZero) return this.isNumberError = !0, void (e && (this.$emit("input", n), this.$nextTick(function () {
            String(1 / n) !== String(1 / i.value) && i.$emit("change", n);
          })));
          this.isNumberError = !1, Number.isInteger(this.decimals) && (s = parseFloat(s.toFixed(this.decimals)));
        } else this.lowerCase ? s = s.toLowerCase() : this.upperCase && (s = s.toUpperCase()), this.model = s;

        this.$emit("input", s), e && this.$nextTick(function () {
          JSON.stringify(s) !== JSON.stringify(i.value) && i.$emit("change", s);
        });
      },
      __updateArea: function __updateArea() {
        var t = this.$refs.shadow,
            e = this.$refs.input;

        if (t && e) {
          var i = t.scrollHeight;
          e.style.height = Pt(i, t.offsetHeight, this.maxHeight || i) + "px", e.style.overflowY = this.maxHeight && this.maxHeight < i ? "scroll" : "hidden";
        }
      },
      __watcher: function __watcher(t) {
        this.isTextarea && this.__updateArea(), this.shadow.watched && (this.shadow.val = t);
      },
      __watcherRegister: function __watcherRegister() {
        this.watcher || (this.watcher = this.$watch("model", this.__watcher));
      },
      __watcherUnregister: function __watcherUnregister(t) {
        this.watcher && (t || !this.isTextarea && !this.shadow.watched) && (this.watcher(), this.watcher = null);
      },
      __getTextarea: function __getTextarea(t) {
        var e = Object.assign({
          rows: 1
        }, this.$attrs);
        return t("div", {
          staticClass: "col row relative-position"
        }, [t(Wi, {
          on: {
            resize: this.__updateArea
          }
        }), t("textarea", {
          ref: "shadow",
          staticClass: "col q-input-target q-input-shadow absolute-top",
          domProps: {
            value: this.model
          },
          attrs: e
        }), t("textarea", {
          ref: "input",
          staticClass: "col q-input-target q-input-area",
          attrs: Object.assign({}, e, {
            placeholder: this.inputPlaceholder,
            disabled: this.disable,
            readonly: this.readonly
          }),
          domProps: {
            value: this.model
          },
          on: {
            input: this.__set,
            focus: this.__onFocus,
            blur: this.__onInputBlur,
            keydown: this.__onKeydown,
            keyup: this.__onKeyup
          }
        })]);
      },
      __getInput: function __getInput(t) {
        return t("input", {
          ref: "input",
          staticClass: "col q-input-target q-no-input-spinner",
          "class": this.inputClasses,
          attrs: Object.assign({}, this.$attrs, {
            type: this.inputType,
            placeholder: this.inputPlaceholder,
            disabled: this.disable,
            readonly: this.readonly,
            step: this.computedStep
          }),
          domProps: {
            value: this.model
          },
          on: {
            input: this.__set,
            focus: this.__onFocus,
            blur: this.__onInputBlur,
            keydown: this.__onKeydown,
            keyup: this.__onKeyup,
            animationstart: this.__onAnimationStart
          }
        });
      }
    },
    mounted: function mounted() {
      this.__updateArea = oe(this.__updateArea), this.isTextarea && (this.__updateArea(), this.__watcherRegister());
    },
    beforeDestroy: function beforeDestroy() {
      this.__watcherUnregister(!0);
    },
    render: function render(t) {
      return t(Je, {
        staticClass: "q-input",
        props: this.frameProps,
        on: {
          click: this.__onClick,
          focus: this.__onFocus
        }
      }, [].concat(this.$slots.before).concat([this.isTextarea ? this.__getTextarea(t) : this.__getInput(t), !this.disable && this.isPassword && !this.noPassToggle && this.length && t(dt, {
        slot: "after",
        staticClass: "q-if-control",
        props: {
          name: this.$q.icon.input[this.showPass ? "showPass" : "hidePass"]
        },
        nativeOn: {
          mousedown: this.__clearTimer,
          touchstart: this.__clearTimer,
          click: this.togglePass
        }
      }) || void 0, this.editable && this.keyboardToggle && t(dt, {
        slot: "after",
        staticClass: "q-if-control",
        props: {
          name: this.$q.icon.input[this.showNumber ? "showNumber" : "hideNumber"]
        },
        nativeOn: {
          mousedown: this.__clearTimer,
          touchstart: this.__clearTimer,
          click: this.toggleNumber
        }
      }) || void 0, this.isClearable && t(dt, {
        slot: "after",
        staticClass: "q-if-control",
        props: {
          name: this.$q.icon.input["clear" + (this.isInverted ? "Inverted" : "")]
        },
        nativeOn: {
          mousedown: this.__clearTimer,
          touchstart: this.__clearTimer,
          click: this.clear
        }
      }) || void 0, this.isLoading && t(Kt, {
        slot: "after",
        staticClass: "q-if-control",
        props: {
          size: "24px"
        }
      }) || void 0]).concat(this.$slots.after).concat(this.$slots["default"] ? t("div", {
        staticClass: "absolute-full no-pointer-events",
        slot: "after"
      }, this.$slots["default"]) : void 0));
    }
  },
      Ki = {
    name: "QRadio",
    mixins: [Qe],
    props: {
      val: {
        required: !0
      }
    },
    computed: {
      isTrue: function isTrue() {
        return this.value === this.val;
      }
    },
    methods: {
      toggle: function toggle(t, e) {
        void 0 === e && (e = !0), this.disable || this.readonly || (t && F(t), e && this.$el.blur(), this.isTrue || this.__update(this.val));
      },
      __getContent: function __getContent(t) {
        return [t(dt, {
          staticClass: "q-radio-unchecked cursor-pointer absolute-full",
          props: {
            name: this.uncheckedIcon || this.$q.icon.radio.unchecked.mat
          }
        }), t(dt, {
          staticClass: "q-radio-checked cursor-pointer absolute-full",
          props: {
            name: this.checkedIcon || this.$q.icon.radio.checked.mat
          }
        }), t("div", {
          ref: "ripple",
          staticClass: "q-radial-ripple"
        })];
      }
    },
    beforeCreate: function beforeCreate() {
      this.__kebabTag = "q-radio";
    }
  },
      Yi = {
    name: "QToggle",
    mixins: [Ae, Qe],
    props: {
      icon: String
    },
    computed: {
      currentIcon: function currentIcon() {
        return (this.isTrue ? this.checkedIcon : this.uncheckedIcon) || this.icon;
      },
      iconColor: function iconColor() {
        return this.isTrue ? "white" : "dark";
      },
      baseClass: function baseClass() {}
    },
    methods: {
      __swipe: function __swipe(t) {
        "left" === t.direction ? this.isTrue && this.toggle() : "right" === t.direction && this.isFalse && this.toggle();
      },
      __getContent: function __getContent(t) {
        return [t("div", {
          staticClass: "q-toggle-base",
          "class": this.baseClass
        }), t("div", {
          staticClass: "q-toggle-handle row flex-center"
        }, [this.currentIcon ? t(dt, {
          staticClass: "q-toggle-icon",
          props: {
            name: this.currentIcon,
            color: this.iconColor
          }
        }) : null, t("div", {
          ref: "ripple",
          staticClass: "q-radial-ripple"
        })])];
      }
    },
    beforeCreate: function beforeCreate() {
      this.__kebabTag = "q-toggle";
    }
  },
      Ji = {
    radio: Ki,
    checkbox: je,
    toggle: Yi
  },
      Xi = {
    name: "QOptionGroup",
    mixins: [Ye],
    props: {
      value: {
        required: !0
      },
      type: {
        "default": "radio",
        validator: function validator(t) {
          return ["radio", "checkbox", "toggle"].includes(t);
        }
      },
      color: String,
      keepColor: Boolean,
      dark: Boolean,
      options: {
        type: Array,
        validator: function validator(t) {
          return t.every(function (t) {
            return "value" in t && "label" in t;
          });
        }
      },
      leftLabel: Boolean,
      inline: Boolean,
      disable: Boolean,
      readonly: Boolean
    },
    computed: {
      component: function component() {
        return Ji[this.type];
      },
      model: function model() {
        return Array.isArray(this.value) ? this.value.slice() : this.value;
      },
      length: function length() {
        return this.value ? "radio" === this.type ? 1 : this.value.length : 0;
      },
      __needsBorder: function __needsBorder() {
        return !0;
      }
    },
    methods: {
      __onFocus: function __onFocus() {
        this.$emit("focus");
      },
      __onBlur: function __onBlur() {
        this.$emit("blur");
      },
      __update: function __update(t) {
        var e = this;
        this.$emit("input", t), this.$nextTick(function () {
          JSON.stringify(t) !== JSON.stringify(e.value) && e.$emit("change", t);
        });
      }
    },
    created: function created() {
      var t = Array.isArray(this.value);
      "radio" === this.type ? t && console.error("q-option-group: model should not be array") : t || console.error("q-option-group: model should be array in your case");
    },
    render: function render(t) {
      var e = this;
      return t("div", {
        staticClass: "q-option-group group",
        "class": {
          "q-option-group-inline-opts": this.inline
        }
      }, this.options.map(function (i) {
        return t("div", [t(e.component, {
          props: {
            value: e.value,
            val: i.value,
            readonly: e.readonly || i.readonly,
            disable: e.disable || i.disable,
            label: i.label,
            leftLabel: e.leftLabel || i.leftLabel,
            color: i.color || e.color,
            checkedIcon: i.checkedIcon,
            uncheckedIcon: i.uncheckedIcon,
            dark: i.dark || e.dark,
            keepColor: i.keepColor || e.keepColor
          },
          on: {
            input: e.__update,
            focus: e.__onFocus,
            blur: e.__onBlur
          }
        })]);
      }));
    }
  },
      Gi = {
    name: "QDialog",
    props: {
      value: Boolean,
      title: String,
      message: String,
      prompt: Object,
      options: Object,
      ok: {
        type: [String, Object, Boolean],
        "default": !0
      },
      cancel: [String, Object, Boolean],
      stackButtons: Boolean,
      preventClose: Boolean,
      noBackdropDismiss: Boolean,
      noEscDismiss: Boolean,
      noRefocus: Boolean,
      position: String,
      color: {
        type: String,
        "default": "primary"
      }
    },
    render: function render(t) {
      var e = this,
          i = [],
          s = this.$slots.title || this.title,
          n = this.$slots.message || this.message;
      return s && i.push(t("div", {
        staticClass: "modal-header"
      }, [s])), n && i.push(t("div", {
        staticClass: "modal-body modal-message modal-scroll"
      }, [n])), (this.hasForm || this.$slots.body) && i.push(t("div", {
        staticClass: "modal-body modal-scroll"
      }, this.hasForm ? this.prompt ? this.__getPrompt(t) : this.__getOptions(t) : [this.$slots.body])), this.$scopedSlots.buttons ? i.push(t("div", {
        staticClass: "modal-buttons",
        "class": this.buttonClass
      }, [this.$scopedSlots.buttons({
        ok: this.__onOk,
        cancel: this.__onCancel
      })])) : (this.ok || this.cancel) && i.push(this.__getButtons(t)), t(ut, {
        ref: "modal",
        props: {
          value: this.value,
          minimized: !0,
          noBackdropDismiss: this.noBackdropDismiss || this.preventClose,
          noEscDismiss: this.noEscDismiss || this.preventClose,
          noRefocus: this.noRefocus,
          position: this.position
        },
        on: {
          input: function input(t) {
            e.$emit("input", t);
          },
          show: function show() {
            var t;
            (e.$emit("show"), e.$q.platform.is.desktop) && ((e.prompt || e.options) && (t = e.prompt ? e.$refs.modal.$el.getElementsByTagName("INPUT") : e.$refs.modal.$el.getElementsByClassName("q-option")).length ? t[0].focus() : (t = e.$refs.modal.$el.getElementsByClassName("q-btn")).length && t[t.length - 1].focus());
          },
          hide: function hide() {
            e.$emit("hide");
          },
          dismiss: function dismiss() {
            e.$emit("cancel");
          },
          "escape-key": function escapeKey() {
            e.$emit("escape-key");
          }
        }
      }, i);
    },
    computed: {
      hasForm: function hasForm() {
        return this.prompt || this.options;
      },
      okLabel: function okLabel() {
        return !0 === this.ok ? this.$q.i18n.label.ok : this.ok;
      },
      cancelLabel: function cancelLabel() {
        return !0 === this.cancel ? this.$q.i18n.label.cancel : this.cancel;
      },
      buttonClass: function buttonClass() {
        return this.stackButtons ? "column" : "row";
      },
      okProps: function okProps() {
        return Object(this.ok) === this.ok ? Object.assign({
          color: this.color,
          label: this.$q.i18n.label.ok,
          noRipple: !0
        }, this.ok) : {
          color: this.color,
          flat: !0,
          label: this.okLabel,
          noRipple: !0
        };
      },
      cancelProps: function cancelProps() {
        return Object(this.cancel) === this.cancel ? Object.assign({
          color: this.color,
          label: this.$q.i18n.label.cancel,
          noRipple: !0
        }, this.cancel) : {
          color: this.color,
          flat: !0,
          label: this.cancelLabel,
          noRipple: !0
        };
      }
    },
    methods: {
      show: function show() {
        return this.$refs.modal.show();
      },
      hide: function hide() {
        var t = this;
        return this.$refs.modal ? this.$refs.modal.hide().then(function () {
          return t.hasForm ? ci(t.__getData()) : void 0;
        }) : Promise.resolve();
      },
      __getPrompt: function __getPrompt(t) {
        var e = this;
        return [t(Ui, {
          style: "margin-bottom: 10px",
          props: {
            value: this.prompt.model,
            type: this.prompt.type || "text",
            color: this.color,
            noPassToggle: !0
          },
          on: {
            input: function input(t) {
              e.prompt.model = t;
            },
            keyup: function keyup(t) {
              13 === E(t) && e.__onOk();
            }
          }
        })];
      },
      __getOptions: function __getOptions(t) {
        var e = this;
        return [t(Xi, {
          props: {
            value: this.options.model,
            type: this.options.type,
            color: this.color,
            inline: this.options.inline,
            options: this.options.items
          },
          on: {
            change: function change(t) {
              e.options.model = t;
            }
          }
        })];
      },
      __getButtons: function __getButtons(t) {
        var e = [];
        return this.cancel && e.push(t(Yt, {
          props: this.cancelProps,
          on: {
            click: this.__onCancel
          }
        })), this.ok && e.push(t(Yt, {
          props: this.okProps,
          on: {
            click: this.__onOk
          }
        })), t("div", {
          staticClass: "modal-buttons",
          "class": this.buttonClass
        }, e);
      },
      __onOk: function __onOk() {
        var t = this;
        return this.hide().then(function (e) {
          t.$emit("ok", e);
        });
      },
      __onCancel: function __onCancel() {
        var t = this;
        return this.hide().then(function () {
          t.$emit("cancel");
        });
      },
      __getData: function __getData() {
        return this.prompt ? this.prompt.model : this.options ? this.options.model : void 0;
      }
    }
  };

  function Zi(t, e, i) {
    var s;

    function n() {
      for (var n = this, o = [], r = arguments.length; r--;) {
        o[r] = arguments[r];
      }

      clearTimeout(s), i && !s && t.apply(this, o), s = setTimeout(function () {
        s = null, i || t.apply(n, o);
      }, e);
    }

    return void 0 === e && (e = 250), n.cancel = function () {
      clearTimeout(s);
    }, n;
  }

  var ts = {
    name: "QTooltip",
    mixins: [M, re],
    props: {
      anchor: {
        type: String,
        "default": "top middle",
        validator: ie
      },
      self: {
        type: String,
        "default": "bottom middle",
        validator: ie
      },
      offset: {
        type: Array,
        validator: se
      },
      delay: {
        type: Number,
        "default": 0
      },
      maxHeight: String,
      disable: Boolean
    },
    watch: {
      $route: function $route() {
        this.hide();
      }
    },
    computed: {
      anchorOrigin: function anchorOrigin() {
        return ne(this.anchor);
      },
      selfOrigin: function selfOrigin() {
        return ne(this.self);
      }
    },
    methods: {
      __show: function __show() {
        clearTimeout(this.timer), document.body.appendChild(this.$el), this.scrollTarget = G(this.anchorEl), this.scrollTarget.addEventListener("scroll", this.hide, L.passive), window.addEventListener("resize", this.__debouncedUpdatePosition, L.passive), this.$q.platform.is.mobile && document.body.addEventListener("click", this.hide, !0), this.__updatePosition(), this.showPromise && this.showPromiseResolve();
      },
      __hide: function __hide() {
        clearTimeout(this.timer), this.scrollTarget.removeEventListener("scroll", this.hide, L.passive), window.removeEventListener("resize", this.__debouncedUpdatePosition, L.passive), this.$el.remove(), this.$q.platform.is.mobile && document.body.removeEventListener("click", this.hide, !0), this.hidePromise && this.hidePromiseResolve();
      },
      __updatePosition: function __updatePosition() {
        ee({
          el: this.$el,
          animate: !0,
          offset: this.offset,
          anchorEl: this.anchorEl,
          anchorOrigin: this.anchorOrigin,
          selfOrigin: this.selfOrigin,
          maxHeight: this.maxHeight
        });
      },
      __delayShow: function __delayShow() {
        clearTimeout(this.timer), this.timer = setTimeout(this.show, this.delay);
      },
      __delayHide: function __delayHide() {
        clearTimeout(this.timer), this.hide();
      }
    },
    render: function render(t) {
      if (this.canRender) return t("div", {
        staticClass: "q-tooltip animate-popup"
      }, [t("div", this.$slots["default"])]);
    },
    beforeMount: function beforeMount() {
      var t = this;
      this.__debouncedUpdatePosition = Zi(function () {
        t.__updatePosition();
      }, 70);
    },
    mounted: function mounted() {
      var t = this;
      this.$nextTick(function () {
        t.$el.offsetHeight, t.anchorEl = t.$el.parentNode, t.anchorEl.removeChild(t.$el), t.anchorEl.classList.contains("q-btn-inner") && (t.anchorEl = t.anchorEl.parentNode), t.$q.platform.is.mobile ? t.anchorEl.addEventListener("click", t.show) : (t.anchorEl.addEventListener("mouseenter", t.__delayShow), t.anchorEl.addEventListener("focus", t.__delayShow), t.anchorEl.addEventListener("mouseleave", t.__delayHide), t.anchorEl.addEventListener("blur", t.__delayHide)), t.value && t.show();
      });
    },
    beforeDestroy: function beforeDestroy() {
      clearTimeout(this.timer), this.anchorEl && (this.$q.platform.is.mobile ? this.anchorEl.removeEventListener("click", this.show) : (this.anchorEl.removeEventListener("mouseenter", this.__delayShow), this.anchorEl.removeEventListener("focus", this.__delayShow), this.anchorEl.removeEventListener("mouseleave", this.__delayHide), this.anchorEl.removeEventListener("blur", this.__delayHide)));
    }
  };

  function es(t, e, i) {
    e.handler ? e.handler(t, i, i.caret) : i.runCmd(e.cmd, e.param);
  }

  function is(t, e, i, s, n) {
    void 0 === n && (n = !1);
    var o = n || "toggle" === i.type && (i.toggled ? i.toggled(e) : i.cmd && e.caret.is(i.cmd, i.param)),
        r = [],
        a = {
      click: function click(t) {
        s && s(), es(t, i, e);
      }
    };

    if (i.tip && e.$q.platform.is.desktop) {
      var l = i.key ? t("div", [t("small", "(CTRL + " + String.fromCharCode(i.key) + ")")]) : null;
      r.push(t(ts, {
        props: {
          delay: 1e3
        }
      }, [t("div", {
        domProps: {
          innerHTML: i.tip
        }
      }), l]));
    }

    return t(Yt, {
      props: Object.assign({
        icon: i.icon,
        color: o ? i.toggleColor || e.toolbarToggleColor : i.color || e.toolbarColor,
        textColor: o && (e.toolbarFlat || e.toolbarOutline) ? null : i.textColor || e.toolbarTextColor,
        label: i.label,
        disable: !!i.disable && ("function" != typeof i.disable || i.disable(e))
      }, e.buttonProps),
      on: a
    }, r);
  }

  function ss(t, e) {
    if (e.caret) return e.buttons.map(function (i) {
      return t(fe, {
        props: e.buttonProps,
        staticClass: "items-center relative-position"
      }, i.map(function (i) {
        return "slot" === i.type ? e.$slots[i.slot] : "dropdown" === i.type ? function (t, e, i) {
          var s,
              n,
              o = i.label,
              r = i.icon,
              a = "no-icons" === i.list;

          function l() {
            h.componentInstance.hide();
          }

          "only-icons" === i.list ? (n = i.options.map(function (i) {
            var s = void 0 === i.type && e.caret.is(i.cmd, i.param);
            return s && (o = i.tip, r = i.icon), is(t, e, i, l, s);
          }), s = e.toolbarBackgroundClass, n = [t(fe, {
            props: e.buttonProps,
            staticClass: "relative-position q-editor-toolbar-padding",
            style: {
              borderRadius: "0"
            }
          }, n)]) : (n = i.options.map(function (i) {
            var s = !!i.disable && i.disable(e),
                n = void 0 === i.type && e.caret.is(i.cmd, i.param);
            n && (o = i.tip, r = i.icon);
            var c = i.htmlTip;
            return t(yt, {
              props: {
                active: n,
                link: !s
              },
              "class": {
                disabled: s
              },
              nativeOn: {
                click: function click(t) {
                  s || (l(), e.$refs.content && e.$refs.content.focus(), e.caret.restore(), es(t, i, e));
                }
              }
            }, [a ? "" : t(wt, {
              props: {
                icon: i.icon
              }
            }), t(xt, {
              props: !c && i.tip ? {
                label: i.tip
              } : null,
              domProps: c ? {
                innerHTML: i.htmlTip
              } : null
            })]);
          }), s = [e.toolbarBackgroundClass, e.toolbarTextColor ? "text-" + e.toolbarTextColor : ""], n = [t(pt, {
            props: {
              separator: !0
            }
          }, [n])]);
          var c = i.highlight && o !== i.label,
              h = t(me, {
            props: Object.assign({
              noCaps: !0,
              noWrap: !0,
              color: c ? e.toolbarToggleColor : e.toolbarColor,
              textColor: c && (e.toolbarFlat || e.toolbarOutline) ? null : e.toolbarTextColor,
              label: i.fixedLabel ? i.label : o,
              icon: i.fixedIcon ? i.icon : r,
              contentClass: s
            }, e.buttonProps)
          }, n);
          return h;
        }(t, e, i) : is(t, e, i);
      }));
    });
  }

  function ns(t, e) {
    if (!t) return !1;

    for (; t = t.parentNode;) {
      if (t === document.body) return !1;
      if (t === e) return !0;
    }

    return !1;
  }

  var os = /^https?:\/\//,
      rs = function rs(t, e) {
    this.el = t, this.vm = e;
  },
      as = {
    selection: {
      configurable: !0
    },
    hasSelection: {
      configurable: !0
    },
    range: {
      configurable: !0
    },
    parent: {
      configurable: !0
    },
    blockParent: {
      configurable: !0
    }
  };

  as.selection.get = function () {
    if (this.el) {
      var t = document.getSelection();
      return ns(t.anchorNode, this.el) && ns(t.focusNode, this.el) ? t : void 0;
    }
  }, as.hasSelection.get = function () {
    return this.selection ? this.selection.toString().length > 0 : null;
  }, as.range.get = function () {
    var t = this.selection;
    if (t) return t.rangeCount ? t.getRangeAt(0) : null;
  }, as.parent.get = function () {
    var t = this.range;

    if (t) {
      var e = t.startContainer;
      return e.nodeType === document.ELEMENT_NODE ? e : e.parentNode;
    }
  }, as.blockParent.get = function () {
    var t = this.parent;
    if (t) return function t(e, i) {
      if (i && e === i) return null;
      var s = (window.getComputedStyle ? window.getComputedStyle(e) : e.currentStyle).display;
      return "block" === s || "table" === s ? e : t(e.parentNode);
    }(t, this.el);
  }, rs.prototype.save = function (t) {
    void 0 === t && (t = this.range), this._range = t;
  }, rs.prototype.restore = function (t) {
    void 0 === t && (t = this._range);
    var e = document.createRange(),
        i = document.getSelection();
    t ? (e.setStart(t.startContainer, t.startOffset), e.setEnd(t.endContainer, t.endOffset), i.removeAllRanges(), i.addRange(e)) : (i.selectAllChildren(this.el), i.collapseToEnd());
  }, rs.prototype.hasParent = function (t, e) {
    var i = e ? this.parent : this.blockParent;
    return !!i && i.nodeName.toLowerCase() === t.toLowerCase();
  }, rs.prototype.hasParents = function (t) {
    var e = this.parent;
    return !!e && t.includes(e.nodeName.toLowerCase());
  }, rs.prototype.is = function (t, e) {
    switch (t) {
      case "formatBlock":
        return "DIV" === e && this.parent === this.el || this.hasParent(e, "PRE" === e);

      case "link":
        return this.hasParent("A", !0);

      case "fontSize":
        return document.queryCommandValue(t) === e;

      case "fontName":
        var i = document.queryCommandValue(t);
        return i === '"' + e + '"' || i === e;

      case "fullscreen":
        return this.vm.inFullscreen;

      case void 0:
        return !1;

      default:
        var s = document.queryCommandState(t);
        return e ? s === e : s;
    }
  }, rs.prototype.getParentAttribute = function (t) {
    if (this.parent) return this.parent.getAttribute(t);
  }, rs.prototype.can = function (t) {
    if ("outdent" === t) return this.hasParents(["blockquote", "li"]);

    if ("indent" === t) {
      var e = !!this.parent && this.parent.nodeName.toLowerCase();
      if ("blockquote" === e) return !1;

      if ("li" === e) {
        var i = this.parent.previousSibling;
        return i && "li" === i.nodeName.toLowerCase();
      }

      return !1;
    }
  }, rs.prototype.apply = function (t, e, i) {
    if (void 0 === i && (i = function i() {}), "formatBlock" === t) ["BLOCKQUOTE", "H1", "H2", "H3", "H4", "H5", "H6", "PRE"].includes(e) && this.is(t, e) && (t = "outdent", e = null);else {
      if ("print" === t) {
        i();
        var s = window.open();
        return s.document.write("\n        <!doctype html>\n        <html>\n          <head>\n            <title>Print - " + document.title + "</title>\n          </head>\n          <body>\n            <div>" + this.el.innerHTML + "</div>\n          </body>\n        </html>\n      "), s.print(), void s.close();
      }

      if ("link" === t) {
        var n = this.getParentAttribute("href");
        if (n) this.vm.editLinkUrl = n;else {
          var o = this.selectWord(this.selection),
              r = o ? o.toString() : "";
          if (!r.length) return;
          this.vm.editLinkUrl = os.test(r) ? r : "https://" + r, document.execCommand("createLink", !1, this.vm.editLinkUrl);
        }
        return this.range.selectNodeContents(this.parent), void this.save();
      }

      if ("fullscreen" === t) return this.vm.toggleFullscreen(), void i();
    }
    document.execCommand(t, !1, e), i();
  }, rs.prototype.selectWord = function (t) {
    if (!t.isCollapsed) return t;
    var e = document.createRange();
    e.setStart(t.anchorNode, t.anchorOffset), e.setEnd(t.focusNode, t.focusOffset);
    var i = e.collapsed ? ["backward", "forward"] : ["forward", "backward"];
    e.detach();
    var s = t.focusNode,
        n = t.focusOffset;
    return t.collapse(t.anchorNode, t.anchorOffset), t.modify("move", i[0], "character"), t.modify("move", i[1], "word"), t.extend(s, n), t.modify("extend", i[1], "character"), t.modify("extend", i[0], "word"), t;
  }, Object.defineProperties(rs.prototype, as);
  var ls = Object.prototype.toString,
      cs = Object.prototype.hasOwnProperty,
      hs = {};

  function us(t) {
    return null === t ? String(t) : hs[ls.call(t)] || "object";
  }

  function ds(t) {
    if (!t || "object" !== us(t)) return !1;
    if (t.constructor && !cs.call(t, "constructor") && !cs.call(t.constructor.prototype, "isPrototypeOf")) return !1;
    var e;

    for (e in t) {
      ;
    }

    return void 0 === e || cs.call(t, e);
  }

  function ps() {
    var t,
        e,
        i,
        s,
        n,
        o,
        r = arguments,
        a = arguments[0] || {},
        l = 1,
        c = arguments.length,
        h = !1;

    for ("boolean" == typeof a && (h = a, a = arguments[1] || {}, l = 2), Object(a) !== a && "function" !== us(a) && (a = {}), c === l && (a = this, l--); l < c; l++) {
      if (null !== (t = r[l])) for (e in t) {
        i = a[e], a !== (s = t[e]) && (h && s && (ds(s) || (n = "array" === us(s))) ? (n ? (n = !1, o = i && "array" === us(i) ? i : []) : o = i && ds(i) ? i : {}, a[e] = ps(h, o, s)) : void 0 !== s && (a[e] = s));
      }
    }

    return a;
  }

  "Boolean Number String Function Array Date RegExp Object".split(" ").forEach(function (t) {
    hs["[object " + t + "]"] = t.toLowerCase();
  });
  var fs = {
    name: "QEditor",
    mixins: [De],
    props: {
      value: {
        type: String,
        required: !0
      },
      readonly: Boolean,
      disable: Boolean,
      minHeight: {
        type: String,
        "default": "10rem"
      },
      maxHeight: String,
      height: String,
      definitions: Object,
      fonts: Object,
      toolbar: {
        type: Array,
        validator: function validator(t) {
          return 0 === t.length || t.every(function (t) {
            return t.length;
          });
        },
        "default": function _default() {
          return [["left", "center", "right", "justify"], ["bold", "italic", "underline", "strike"], ["undo", "redo"]];
        }
      },
      toolbarColor: String,
      toolbarTextColor: String,
      toolbarToggleColor: {
        type: String,
        "default": "primary"
      },
      toolbarBg: {
        type: String,
        "default": "grey-3"
      },
      toolbarFlat: Boolean,
      toolbarOutline: Boolean,
      toolbarPush: Boolean,
      toolbarRounded: Boolean,
      contentStyle: Object,
      contentClass: [Object, Array, String]
    },
    computed: {
      editable: function editable() {
        return !this.readonly && !this.disable;
      },
      hasToolbar: function hasToolbar() {
        return this.toolbar && this.toolbar.length > 0;
      },
      toolbarBackgroundClass: function toolbarBackgroundClass() {
        if (this.toolbarBg) return "bg-" + this.toolbarBg;
      },
      buttonProps: function buttonProps() {
        return {
          outline: this.toolbarOutline,
          flat: this.toolbarFlat,
          push: this.toolbarPush,
          rounded: this.toolbarRounded,
          dense: !0,
          color: this.toolbarColor,
          disable: !this.editable
        };
      },
      buttonDef: function buttonDef() {
        var t = this.$q.i18n.editor,
            e = this.$q.icon.editor;
        return {
          bold: {
            cmd: "bold",
            icon: e.bold,
            tip: t.bold,
            key: 66
          },
          italic: {
            cmd: "italic",
            icon: e.italic,
            tip: t.italic,
            key: 73
          },
          strike: {
            cmd: "strikeThrough",
            icon: e.strikethrough,
            tip: t.strikethrough,
            key: 83
          },
          underline: {
            cmd: "underline",
            icon: e.underline,
            tip: t.underline,
            key: 85
          },
          unordered: {
            cmd: "insertUnorderedList",
            icon: e.unorderedList,
            tip: t.unorderedList
          },
          ordered: {
            cmd: "insertOrderedList",
            icon: e.orderedList,
            tip: t.orderedList
          },
          subscript: {
            cmd: "subscript",
            icon: e.subscript,
            tip: t.subscript,
            htmlTip: "x<subscript>2</subscript>"
          },
          superscript: {
            cmd: "superscript",
            icon: e.superscript,
            tip: t.superscript,
            htmlTip: "x<superscript>2</superscript>"
          },
          link: {
            cmd: "link",
            icon: e.hyperlink,
            tip: t.hyperlink,
            key: 76
          },
          fullscreen: {
            cmd: "fullscreen",
            icon: e.toggleFullscreen,
            tip: t.toggleFullscreen,
            key: 70
          },
          quote: {
            cmd: "formatBlock",
            param: "BLOCKQUOTE",
            icon: e.quote,
            tip: t.quote,
            key: 81
          },
          left: {
            cmd: "justifyLeft",
            icon: e.left,
            tip: t.left
          },
          center: {
            cmd: "justifyCenter",
            icon: e.center,
            tip: t.center
          },
          right: {
            cmd: "justifyRight",
            icon: e.right,
            tip: t.right
          },
          justify: {
            cmd: "justifyFull",
            icon: e.justify,
            tip: t.justify
          },
          print: {
            type: "no-state",
            cmd: "print",
            icon: e.print,
            tip: t.print,
            key: 80
          },
          outdent: {
            type: "no-state",
            disable: function disable(t) {
              return t.caret && !t.caret.can("outdent");
            },
            cmd: "outdent",
            icon: e.outdent,
            tip: t.outdent
          },
          indent: {
            type: "no-state",
            disable: function disable(t) {
              return t.caret && !t.caret.can("indent");
            },
            cmd: "indent",
            icon: e.indent,
            tip: t.indent
          },
          removeFormat: {
            type: "no-state",
            cmd: "removeFormat",
            icon: e.removeFormat,
            tip: t.removeFormat
          },
          hr: {
            type: "no-state",
            cmd: "insertHorizontalRule",
            icon: e.hr,
            tip: t.hr
          },
          undo: {
            type: "no-state",
            cmd: "undo",
            icon: e.undo,
            tip: t.undo,
            key: 90
          },
          redo: {
            type: "no-state",
            cmd: "redo",
            icon: e.redo,
            tip: t.redo,
            key: 89
          },
          h1: {
            cmd: "formatBlock",
            param: "H1",
            icon: e.header,
            tip: t.header1,
            htmlTip: '<h1 class="q-ma-none">' + t.header1 + "</h1>"
          },
          h2: {
            cmd: "formatBlock",
            param: "H2",
            icon: e.header,
            tip: t.header2,
            htmlTip: '<h2 class="q-ma-none">' + t.header2 + "</h2>"
          },
          h3: {
            cmd: "formatBlock",
            param: "H3",
            icon: e.header,
            tip: t.header3,
            htmlTip: '<h3 class="q-ma-none">' + t.header3 + "</h3>"
          },
          h4: {
            cmd: "formatBlock",
            param: "H4",
            icon: e.header,
            tip: t.header4,
            htmlTip: '<h4 class="q-ma-none">' + t.header4 + "</h4>"
          },
          h5: {
            cmd: "formatBlock",
            param: "H5",
            icon: e.header,
            tip: t.header5,
            htmlTip: '<h5 class="q-ma-none">' + t.header5 + "</h5>"
          },
          h6: {
            cmd: "formatBlock",
            param: "H6",
            icon: e.header,
            tip: t.header6,
            htmlTip: '<h6 class="q-ma-none">' + t.header6 + "</h6>"
          },
          p: {
            cmd: "formatBlock",
            param: "DIV",
            icon: e.header,
            tip: t.paragraph
          },
          code: {
            cmd: "formatBlock",
            param: "PRE",
            icon: e.code,
            tip: "<code>" + t.code + "</code>"
          },
          "size-1": {
            cmd: "fontSize",
            param: "1",
            icon: e.size,
            tip: t.size1,
            htmlTip: '<font size="1">' + t.size1 + "</font>"
          },
          "size-2": {
            cmd: "fontSize",
            param: "2",
            icon: e.size,
            tip: t.size2,
            htmlTip: '<font size="2">' + t.size2 + "</font>"
          },
          "size-3": {
            cmd: "fontSize",
            param: "3",
            icon: e.size,
            tip: t.size3,
            htmlTip: '<font size="3">' + t.size3 + "</font>"
          },
          "size-4": {
            cmd: "fontSize",
            param: "4",
            icon: e.size,
            tip: t.size4,
            htmlTip: '<font size="4">' + t.size4 + "</font>"
          },
          "size-5": {
            cmd: "fontSize",
            param: "5",
            icon: e.size,
            tip: t.size5,
            htmlTip: '<font size="5">' + t.size5 + "</font>"
          },
          "size-6": {
            cmd: "fontSize",
            param: "6",
            icon: e.size,
            tip: t.size6,
            htmlTip: '<font size="6">' + t.size6 + "</font>"
          },
          "size-7": {
            cmd: "fontSize",
            param: "7",
            icon: e.size,
            tip: t.size7,
            htmlTip: '<font size="7">' + t.size7 + "</font>"
          }
        };
      },
      buttons: function buttons() {
        var t = this,
            e = this.definitions || {},
            i = this.definitions || this.fonts ? ps(!0, {}, this.buttonDef, e, function (t, e, i, s) {
          void 0 === s && (s = {});
          var n = Object.keys(s);
          if (0 === n.length) return {};
          var o = {
            default_font: {
              cmd: "fontName",
              param: t,
              icon: i,
              tip: e
            }
          };
          return n.forEach(function (t) {
            var e = s[t];
            o[t] = {
              cmd: "fontName",
              param: e,
              icon: i,
              tip: e,
              htmlTip: '<font face="' + e + '">' + e + "</font>"
            };
          }), o;
        }(this.defaultFont, this.$q.i18n.editor.defaultFont, this.$q.icon.editor.font, this.fonts)) : this.buttonDef;
        return this.toolbar.map(function (s) {
          return s.map(function (s) {
            if (s.options) return {
              type: "dropdown",
              icon: s.icon,
              label: s.label,
              fixedLabel: s.fixedLabel,
              fixedIcon: s.fixedIcon,
              highlight: s.highlight,
              list: s.list,
              options: s.options.map(function (t) {
                return i[t];
              })
            };
            var n = i[s];
            return n ? "no-state" === n.type || e[s] && (void 0 === n.cmd || t.buttonDef[n.cmd] && "no-state" === t.buttonDef[n.cmd].type) ? n : ps(!0, {
              type: "toggle"
            }, n) : {
              type: "slot",
              slot: s
            };
          });
        });
      },
      keys: function keys() {
        var t = {},
            e = function e(_e2) {
          _e2.key && (t[_e2.key] = {
            cmd: _e2.cmd,
            param: _e2.param
          });
        };

        return this.buttons.forEach(function (t) {
          t.forEach(function (t) {
            t.options ? t.options.forEach(e) : e(t);
          });
        }), t;
      },
      innerStyle: function innerStyle() {
        return this.inFullscreen ? this.contentStyle : [{
          minHeight: this.minHeight,
          height: this.height,
          maxHeight: this.maxHeight
        }, this.contentStyle];
      },
      innerClass: function innerClass() {
        return [this.contentClass, {
          col: this.inFullscreen,
          "overflow-auto": this.inFullscreen || this.maxHeight
        }];
      }
    },
    data: function data() {
      return {
        editWatcher: !0,
        editLinkUrl: null
      };
    },
    watch: {
      value: function value(t) {
        this.editWatcher ? this.$refs.content.innerHTML = t : this.editWatcher = !0;
      }
    },
    methods: {
      onInput: function onInput(t) {
        if (this.editWatcher) {
          var e = this.$refs.content.innerHTML;
          e !== this.value && (this.editWatcher = !1, this.$emit("input", e));
        }
      },
      onKeydown: function onKeydown(t) {
        var e = E(t);
        if (!t.ctrlKey) return this.refreshToolbar(), void (this.$q.platform.is.ie && this.$nextTick(this.onInput));
        var i = this.keys[e];

        if (void 0 !== i) {
          var s = i.cmd,
              n = i.param;
          F(t), this.runCmd(s, n, !1), this.$q.platform.is.ie && this.$nextTick(this.onInput);
        }
      },
      runCmd: function runCmd(t, e, i) {
        var s = this;
        void 0 === i && (i = !0), this.focus(), this.caret.apply(t, e, function () {
          s.focus(), i && s.refreshToolbar();
        });
      },
      refreshToolbar: function refreshToolbar() {
        var t = this;
        setTimeout(function () {
          t.editLinkUrl = null, t.$forceUpdate();
        }, 1);
      },
      focus: function focus() {
        this.$refs.content.focus();
      },
      getContentEl: function getContentEl() {
        return this.$refs.content;
      }
    },
    created: function created() {
      i || (document.execCommand("defaultParagraphSeparator", !1, "div"), this.defaultFont = window.getComputedStyle(document.body).fontFamily);
    },
    mounted: function mounted() {
      var t = this;
      this.$nextTick(function () {
        t.$refs.content && (t.caret = new rs(t.$refs.content, t), t.$refs.content.innerHTML = t.value), t.$nextTick(t.refreshToolbar);
      });
    },
    render: function render(t) {
      var e,
          s = this;

      if (this.hasToolbar) {
        var n = {
          staticClass: "q-editor-toolbar row no-wrap scroll-x",
          "class": [{
            "q-editor-toolbar-separator": !this.toolbarOutline && !this.toolbarPush
          }, this.toolbarBackgroundClass]
        };
        (e = []).push(t("div", ps({
          key: "qedt_top"
        }, n), [t("div", {
          staticClass: "row no-wrap q-editor-toolbar-padding fit items-center"
        }, ss(t, this))])), null !== this.editLinkUrl && e.push(t("div", ps({
          key: "qedt_btm"
        }, n), [t("div", {
          staticClass: "row no-wrap q-editor-toolbar-padding fit items-center"
        }, function (t, e) {
          if (e.caret) {
            var i = e.toolbarColor || e.toolbarTextColor,
                s = e.editLinkUrl,
                n = function n() {
              e.caret.restore(), s !== e.editLinkUrl && document.execCommand("createLink", !1, "" === s ? " " : s), e.editLinkUrl = null;
            };

            return [t("div", {
              staticClass: "q-mx-xs",
              "class": "text-" + i
            }, [e.$q.i18n.editor.url + ": "]), t(Ui, {
              key: "qedt_btm_input",
              staticClass: "q-ma-none q-pa-none col q-editor-input",
              props: {
                value: s,
                color: i,
                autofocus: !0,
                hideUnderline: !0
              },
              on: {
                input: function input(t) {
                  s = t;
                },
                keydown: function keydown(t) {
                  switch (E(t)) {
                    case 13:
                      return n();

                    case 27:
                      e.caret.restore(), e.editLinkUrl = null;
                  }
                }
              }
            }), t(fe, {
              key: "qedt_btm_grp",
              props: e.buttonProps
            }, [t(Yt, {
              key: "qedt_btm_rem",
              attrs: {
                tabindex: -1
              },
              props: Object.assign({
                label: e.$q.i18n.label.remove,
                noCaps: !0
              }, e.buttonProps),
              on: {
                click: function click() {
                  e.caret.restore(), document.execCommand("unlink"), e.editLinkUrl = null;
                }
              }
            }), t(Yt, {
              key: "qedt_btm_upd",
              props: Object.assign({
                label: e.$q.i18n.label.update,
                noCaps: !0
              }, e.buttonProps),
              on: {
                click: n
              }
            })])];
          }
        }(t, this))])), e = t("div", e);
      }

      return t("div", {
        staticClass: "q-editor",
        style: {
          height: this.inFullscreen ? "100vh" : null
        },
        "class": {
          disabled: this.disable,
          fullscreen: this.inFullscreen,
          column: this.inFullscreen
        }
      }, [e, t("div", {
        ref: "content",
        staticClass: "q-editor-content",
        style: this.innerStyle,
        "class": this.innerClass,
        attrs: {
          contenteditable: this.editable
        },
        domProps: i ? {
          innerHTML: this.value
        } : void 0,
        on: {
          input: this.onInput,
          keydown: this.onKeydown,
          click: this.refreshToolbar,
          blur: function blur() {
            s.caret.save();
          }
        }
      })]);
    }
  },
      ms = {
    props: {
      outline: Boolean,
      push: Boolean,
      flat: Boolean,
      color: String,
      textColor: String,
      glossy: Boolean
    }
  },
      gs = {
    name: "QFab",
    mixins: [ms, M],
    provide: function provide() {
      var t = this;
      return {
        __qFabClose: function __qFabClose(e) {
          return t.hide(e).then(function () {
            return t.$refs.trigger && t.$refs.trigger.$el && t.$refs.trigger.$el.focus(), e;
          });
        }
      };
    },
    props: {
      icon: String,
      activeIcon: String,
      direction: {
        type: String,
        "default": "right"
      }
    },
    watch: {
      $route: function $route() {
        this.hide();
      }
    },
    created: function created() {
      this.value && this.show();
    },
    render: function render(t) {
      return t("div", {
        staticClass: "q-fab z-fab row inline justify-center",
        "class": {
          "q-fab-opened": this.showing
        }
      }, [t(Yt, {
        ref: "trigger",
        props: {
          fab: !0,
          outline: this.outline,
          push: this.push,
          flat: this.flat,
          color: this.color,
          textColor: this.textColor,
          glossy: this.glossy
        },
        on: {
          click: this.toggle
        }
      }, [this.$slots.tooltip, t(dt, {
        staticClass: "q-fab-icon absolute-full",
        props: {
          name: this.icon || this.$q.icon.fab.icon
        }
      }), t(dt, {
        staticClass: "q-fab-active-icon absolute-full",
        props: {
          name: this.activeIcon || this.$q.icon.fab.activeIcon
        }
      })]), t("div", {
        staticClass: "q-fab-actions flex no-wrap inline items-center",
        "class": "q-fab-" + this.direction
      }, this.showing ? this.$slots["default"] : null)]);
    }
  },
      vs = {
    name: "QFabAction",
    mixins: [ms],
    props: {
      icon: {
        type: String,
        required: !0
      }
    },
    inject: {
      __qFabClose: {
        "default": function _default() {
          console.error("QFabAction needs to be child of QFab");
        }
      }
    },
    methods: {
      click: function click(t) {
        var e = this;

        this.__qFabClose().then(function () {
          e.$emit("click", t);
        });
      }
    },
    render: function render(t) {
      return t(Yt, {
        props: {
          fabMini: !0,
          outline: this.outline,
          push: this.push,
          flat: this.flat,
          color: this.color,
          textColor: this.textColor,
          glossy: this.glossy,
          icon: this.icon
        },
        on: {
          click: this.click
        }
      }, this.$slots["default"]);
    }
  },
      bs = {
    name: "QField",
    mixins: [re],
    props: {
      inset: {
        type: String,
        validator: function validator(t) {
          return ["icon", "label", "full"].includes(t);
        }
      },
      label: String,
      count: {
        type: [Number, Boolean],
        "default": !1
      },
      error: Boolean,
      errorLabel: String,
      warning: Boolean,
      warningLabel: String,
      helper: String,
      icon: String,
      iconColor: String,
      dark: Boolean,
      orientation: {
        type: String,
        validator: function validator(t) {
          return ["vertical", "horizontal"].includes(t);
        }
      },
      labelWidth: {
        type: [Number, String],
        "default": 5,
        validator: function validator(t) {
          var e = parseInt(t, 10);
          return e > 0 && e < 13;
        }
      }
    },
    data: function data() {
      return {
        input: {}
      };
    },
    computed: {
      hasError: function hasError() {
        return this.input.error || this.error;
      },
      hasWarning: function hasWarning() {
        return !this.hasError && (this.input.warning || this.warning);
      },
      childHasLabel: function childHasLabel() {
        return this.input.floatLabel || this.input.stackLabel;
      },
      isDark: function isDark() {
        return this.input.dark || this.dark;
      },
      insetIcon: function insetIcon() {
        return ["icon", "full"].includes(this.inset);
      },
      hasNoInput: function hasNoInput() {
        return this.canRender && (!this.input.$options || this.input.__needsBorder);
      },
      counter: function counter() {
        if (this.count) {
          var t = this.input.length || "0";
          return Number.isInteger(this.count) ? t + " / " + this.count : t;
        }
      },
      classes: function classes() {
        return {
          "q-field-responsive": !this.isVertical && !this.isHorizontal,
          "q-field-vertical": this.isVertical,
          "q-field-horizontal": this.isHorizontal,
          "q-field-floating": this.childHasLabel,
          "q-field-no-label": !this.label && !this.$slots.label,
          "q-field-with-error": this.hasError,
          "q-field-with-warning": this.hasWarning,
          "q-field-dark": this.isDark,
          "q-field-no-input": this.hasNoInput
        };
      },
      computedLabelWidth: function computedLabelWidth() {
        return parseInt(this.labelWidth, 10);
      },
      isVertical: function isVertical() {
        return "vertical" === this.orientation || 12 === this.computedLabelWidth;
      },
      isHorizontal: function isHorizontal() {
        return "horizontal" === this.orientation;
      },
      labelClasses: function labelClasses() {
        return this.isVertical ? "col-12" : this.isHorizontal ? "col-" + this.labelWidth : "col-xs-12 col-sm-" + this.labelWidth;
      },
      inputClasses: function inputClasses() {
        return this.isVertical ? "col-xs-12" : this.isHorizontal ? "col" : "col-xs-12 col-sm";
      },
      iconProps: function iconProps() {
        var t = {
          name: this.icon
        };
        return !this.iconColor || this.hasError || this.hasWarning || (t.color = this.iconColor), t;
      },
      insetHasLabel: function insetHasLabel() {
        return ["label", "full"].includes(this.inset);
      }
    },
    provide: function provide() {
      return {
        __field: this
      };
    },
    methods: {
      __registerInput: function __registerInput(t) {
        this.input = t;
      },
      __unregisterInput: function __unregisterInput(t) {
        t && t !== this.input || (this.input = {});
      },
      __getBottomContent: function __getBottomContent(t) {
        var e;
        return this.hasError && (e = this.$slots["error-label"] || this.errorLabel) ? t("div", {
          staticClass: "q-field-error col"
        }, e) : this.hasWarning && (e = this.$slots["warning-label"] || this.warningLabel) ? t("div", {
          staticClass: "q-field-warning col"
        }, e) : (e = this.$slots.helper || this.helper) ? t("div", {
          staticClass: "q-field-helper col"
        }, e) : t("div", {
          staticClass: "col"
        });
      },
      __hasBottom: function __hasBottom() {
        return this.hasError && (this.$slots["error-label"] || this.errorLabel) || this.hasWarning && (this.$slots["warning-label"] || this.warningLabel) || this.$slots.helper || this.helper || this.count;
      }
    },
    render: function render(t) {
      var e = this.$slots.label || this.label;
      return t("div", {
        staticClass: "q-field row no-wrap items-start",
        "class": this.classes
      }, [this.icon ? t(dt, {
        props: this.iconProps,
        staticClass: "q-field-icon q-field-margin"
      }) : this.insetIcon ? t("div", {
        staticClass: "q-field-icon"
      }) : null, t("div", {
        staticClass: "row col"
      }, [e || this.insetHasLabel ? t("div", {
        staticClass: "q-field-label q-field-margin",
        "class": this.labelClasses
      }, [t("div", {
        staticClass: "q-field-label-inner row items-center"
      }, [this.$slots.label || this.label])]) : null, t("div", {
        staticClass: "q-field-content ellipsis",
        "class": this.inputClasses
      }, [this.$slots["default"], this.__hasBottom() ? t("div", {
        staticClass: "q-field-bottom row no-wrap"
      }, [this.__getBottomContent(t), this.counter ? t("div", {
        staticClass: "q-field-counter col-auto"
      }, [this.counter]) : null]) : null])])]);
    }
  },
      _s = {
    name: "QInfiniteScroll",
    props: {
      handler: {
        type: Function,
        required: !0
      },
      inline: Boolean,
      offset: {
        type: Number,
        "default": 0
      }
    },
    data: function data() {
      return {
        index: 0,
        fetching: !1,
        working: !0
      };
    },
    methods: {
      poll: function poll() {
        if (!this.fetching && this.working) {
          var t = V(this.scrollContainer),
              e = Q(this.scrollContainer).top + t;
          Q(this.element).top + V(this.element) - (this.offset || t) < e && this.loadMore();
        }
      },
      loadMore: function loadMore() {
        var t = this;
        !this.fetching && this.working && (this.index++, this.fetching = !0, this.handler(this.index, function (e) {
          t.fetching = !1, e ? t.stop() : t.element.closest("body") && t.poll();
        }));
      },
      reset: function reset() {
        this.index = 0;
      },
      resume: function resume() {
        this.working = !0, this.scrollContainer.addEventListener("scroll", this.poll, L.passive), this.immediatePoll();
      },
      stop: function stop() {
        this.working = !1, this.fetching = !1, this.scrollContainer.removeEventListener("scroll", this.poll, L.passive);
      }
    },
    mounted: function mounted() {
      var t = this;
      this.$nextTick(function () {
        t.element = t.$refs.content, t.scrollContainer = t.inline ? t.$el : G(t.$el), t.working && t.scrollContainer.addEventListener("scroll", t.poll, L.passive), t.poll(), t.immediatePoll = t.poll, t.poll = Zi(t.poll, 50);
      });
    },
    beforeDestroy: function beforeDestroy() {
      this.scrollContainer.removeEventListener("scroll", this.poll, L.passive);
    },
    render: function render(t) {
      return t("div", {
        staticClass: "q-infinite-scroll"
      }, [t("div", {
        ref: "content",
        staticClass: "q-infinite-scroll-content"
      }, this.$slots["default"]), this.fetching ? t("div", {
        staticClass: "q-infinite-scroll-message"
      }, this.$slots.message) : null]);
    }
  },
      ys = {
    name: "QInnerLoading",
    props: {
      dark: Boolean,
      visible: Boolean,
      size: {
        type: [String, Number],
        "default": 42
      },
      color: String
    },
    render: function render(t) {
      if (this.visible) return t("div", {
        staticClass: "q-inner-loading animate-fade absolute-full column flex-center",
        "class": {
          dark: this.dark
        }
      }, this.$slots["default"] || [t(Kt, {
        props: {
          size: this.size,
          color: this.color
        }
      })]);
    }
  },
      ws = {
    name: "QJumbotron",
    props: {
      dark: Boolean,
      tag: {
        type: String,
        "default": "div"
      },
      imgSrc: String,
      gradient: String
    },
    computed: {
      gradientType: function gradientType() {
        if (this.gradient) return this.gradient.indexOf("circle") > -1 ? "radial" : "linear";
      },
      computedStyle: function computedStyle() {
        return this.imgSrc ? {
          "background-image": "url(" + this.imgSrc + ")"
        } : this.gradientType ? {
          background: this.gradientType + "-gradient(" + this.gradient + ")"
        } : void 0;
      }
    },
    render: function render(t) {
      return t(this.tag, {
        staticClass: "q-jumbotron",
        style: this.computedStyle,
        "class": {
          "q-jumbotron-dark": this.dark
        }
      }, this.$slots["default"]);
    }
  },
      Cs = {
    name: "QKnob",
    directives: {
      TouchPan: Ce
    },
    props: {
      value: Number,
      min: {
        type: Number,
        "default": 0
      },
      max: {
        type: Number,
        "default": 100
      },
      color: String,
      trackColor: {
        type: String,
        "default": "grey-3"
      },
      lineWidth: {
        type: String,
        "default": "6px"
      },
      size: {
        type: String,
        "default": "100px"
      },
      step: {
        type: Number,
        "default": 1
      },
      decimals: Number,
      disable: Boolean,
      readonly: Boolean
    },
    computed: {
      classes: function classes() {
        var t = [];
        return this.disable && t.push("disabled"), this.readonly || t.push("cursor-pointer"), this.color && t.push("text-" + this.color), t;
      },
      svgStyle: function svgStyle() {
        return {
          "stroke-dasharray": "295.31px, 295.31px",
          "stroke-dashoffset": 295.31 * (this.$q.i18n.rtl ? -1 : 1) * (1 - (this.model - this.min) / (this.max - this.min)) + "px",
          transition: this.dragging ? "" : "stroke-dashoffset 0.6s ease 0s, stroke 0.6s ease"
        };
      },
      editable: function editable() {
        return !this.disable && !this.readonly;
      },
      computedDecimals: function computedDecimals() {
        return void 0 !== this.decimals ? this.decimals || 0 : (String(this.step).trim("0").split(".")[1] || "").length;
      },
      computedStep: function computedStep() {
        return void 0 !== this.decimals ? 1 / Math.pow(10, this.decimals || 0) : this.step;
      }
    },
    data: function data() {
      return {
        model: this.value,
        dragging: !1
      };
    },
    watch: {
      value: function value(t) {
        var e = this;
        if (t < this.min) this.model = this.min;else {
          if (!(t > this.max)) {
            var i = this.computedDecimals && "number" == typeof t ? parseFloat(t.toFixed(this.computedDecimals)) : t;
            return void (i !== this.model && (this.model = i));
          }

          this.model = this.max;
        }
        this.$emit("input", this.model), this.$nextTick(function () {
          e.model !== e.value && e.$emit("change", e.model);
        });
      }
    },
    methods: {
      __pan: function __pan(t) {
        this.editable && (t.isFinal ? this.__dragStop(t.evt) : t.isFirst ? this.__dragStart(t.evt) : this.__dragMove(t.evt));
      },
      __dragStart: function __dragStart(t) {
        this.editable && (F(t), this.centerPosition = this.__getCenter(), clearTimeout(this.timer), this.dragging = !0, this.__onInput(t));
      },
      __dragMove: function __dragMove(t) {
        this.dragging && this.editable && (F(t), this.__onInput(t, this.centerPosition));
      },
      __dragStop: function __dragStop(t) {
        var e = this;
        this.editable && (F(t), this.timer = setTimeout(function () {
          e.dragging = !1;
        }, 100), this.__onInput(t, this.centerPosition, !0));
      },
      __onKeyDown: function __onKeyDown(t) {
        var e = t.keyCode;

        if (this.editable && [37, 40, 39, 38].includes(e)) {
          F(t);
          var i = t.ctrlKey ? 10 * this.computedStep : this.computedStep,
              s = [37, 40].includes(e) ? -i : i;

          this.__onInputValue(Pt(this.model + s, this.min, this.max));
        }
      },
      __onKeyUp: function __onKeyUp(t) {
        var e = t.keyCode;
        this.editable && [37, 40, 39, 38].includes(e) && this.__emitChange();
      },
      __onInput: function __onInput(t, e, i) {
        if (void 0 === e && (e = this.__getCenter()), this.editable) {
          var s = N(t),
              n = Math.abs(s.top - e.top),
              o = Math.sqrt(Math.pow(Math.abs(s.top - e.top), 2) + Math.pow(Math.abs(s.left - e.left), 2)),
              r = Math.asin(n / o) * (180 / Math.PI);
          r = s.top < e.top ? e.left < s.left ? 90 - r : 270 + r : e.left < s.left ? r + 90 : 270 - r, this.$q.i18n.rtl && (r = 360 - r);
          var a = this.min + r / 360 * (this.max - this.min),
              l = a % this.step,
              c = Pt(a - l + (Math.abs(l) >= this.step / 2 ? (l < 0 ? -1 : 1) * this.step : 0), this.min, this.max);

          this.__onInputValue(c, i);
        }
      },
      __onInputValue: function __onInputValue(t, e) {
        this.computedDecimals && (t = parseFloat(t.toFixed(this.computedDecimals))), this.model !== t && (this.model = t), this.$emit("drag-value", t), this.value !== t && (this.$emit("input", t), e && this.__emitChange(t));
      },
      __emitChange: function __emitChange(t) {
        var e = this;
        void 0 === t && (t = this.model), this.$nextTick(function () {
          JSON.stringify(t) !== JSON.stringify(e.value) && e.$emit("change", t);
        });
      },
      __getCenter: function __getCenter() {
        var t = Q(this.$el);
        return {
          top: t.top + V(this.$el) / 2,
          left: t.left + W(this.$el) / 2
        };
      }
    },
    render: function render(t) {
      var e = this;
      return t("div", {
        staticClass: "q-knob non-selectable",
        "class": this.classes,
        style: {
          width: this.size,
          height: this.size
        }
      }, [t("div", {
        on: {
          click: function click(t) {
            return !e.dragging && e.__onInput(t, void 0, !0);
          }
        },
        directives: this.editable ? [{
          name: "touch-pan",
          modifiers: {
            prevent: !0,
            stop: !0
          },
          value: this.__pan
        }] : null
      }, [t("svg", {
        attrs: {
          viewBox: "0 0 100 100"
        }
      }, [t("path", {
        attrs: {
          d: "M 50,50 m 0,-47 a 47,47 0 1 1 0,94 a 47,47 0 1 1 0,-94",
          "fill-opacity": "0",
          stroke: "currentColor",
          "stroke-width": this.lineWidth
        },
        "class": "text-" + this.trackColor
      }), t("path", {
        attrs: {
          d: "M 50,50 m 0,-47 a 47,47 0 1 1 0,94 a 47,47 0 1 1 0,-94",
          "fill-opacity": "0",
          stroke: "currentColor",
          "stroke-linecap": "round",
          "stroke-width": this.lineWidth
        },
        style: this.svgStyle
      })]), t("div", {
        staticClass: "q-knob-label row flex-center content-center",
        attrs: {
          tabindex: this.editable ? 0 : -1
        },
        on: {
          keydown: this.__onKeyDown,
          keyup: this.__onKeyUp
        }
      }, this.$slots["default"] || [t("span", [this.model])])])]);
    }
  },
      xs = {
    name: "QScrollObservable",
    props: {
      debounce: Number
    },
    render: function render() {},
    data: function data() {
      return {
        pos: 0,
        dir: "down",
        dirChanged: !1,
        dirChangePos: 0
      };
    },
    methods: {
      getPosition: function getPosition() {
        return {
          position: this.pos,
          direction: this.dir,
          directionChanged: this.dirChanged,
          inflexionPosition: this.dirChangePos
        };
      },
      trigger: function trigger(t) {
        !0 === t || 0 === this.debounce ? this.emit() : this.timer || (this.timer = this.debounce ? setTimeout(this.emit, this.debounce) : requestAnimationFrame(this.emit));
      },
      emit: function emit() {
        var t = Math.max(0, Z(this.target)),
            e = t - this.pos < 0 ? "up" : "down";
        this.dirChanged = this.dir !== e, this.dirChanged && (this.dir = e, this.dirChangePos = this.pos), this.timer = null, this.pos = t, this.$emit("scroll", this.getPosition());
      }
    },
    mounted: function mounted() {
      this.target = G(this.$el.parentNode), this.target.addEventListener("scroll", this.trigger, L.passive), this.trigger(!0);
    },
    beforeDestroy: function beforeDestroy() {
      clearTimeout(this.timer), cancelAnimationFrame(this.timer), this.target.removeEventListener("scroll", this.trigger, L.passive);
    }
  },
      ks = {
    name: "QWindowResizeObservable",
    props: {
      debounce: {
        type: Number,
        "default": 80
      }
    },
    render: function render() {},
    methods: {
      trigger: function trigger() {
        0 === this.debounce ? this.emit() : this.timer || (this.timer = setTimeout(this.emit, this.debounce));
      },
      emit: function emit(t) {
        this.timer = null, this.$emit("resize", {
          height: t ? 0 : window.innerHeight,
          width: t ? 0 : window.innerWidth
        });
      }
    },
    created: function created() {
      this.emit(n);
    },
    mounted: function mounted() {
      s && this.emit(), window.addEventListener("resize", this.trigger, L.passive);
    },
    beforeDestroy: function beforeDestroy() {
      clearTimeout(this.timer), window.removeEventListener("resize", this.trigger, L.passive);
    }
  },
      Ss = {
    name: "QLayout",
    provide: function provide() {
      return {
        layout: this
      };
    },
    props: {
      view: {
        type: String,
        "default": "hhh lpr fff",
        validator: function validator(t) {
          return /^(h|l)h(h|r) lpr (f|l)f(f|r)$/.test(t.toLowerCase());
        }
      }
    },
    data: function data() {
      return {
        height: n ? 0 : window.innerHeight,
        width: n ? 0 : window.innerWidth,
        header: {
          size: 0,
          offset: 0,
          space: !1
        },
        right: {
          size: 300,
          offset: 0,
          space: !1
        },
        footer: {
          size: 0,
          offset: 0,
          space: !1
        },
        left: {
          size: 300,
          offset: 0,
          space: !1
        },
        scrollHeight: 0,
        scroll: {
          position: 0,
          direction: "down"
        }
      };
    },
    computed: {
      rows: function rows() {
        var t = this.view.toLowerCase().split(" ");
        return {
          top: t[0].split(""),
          middle: t[1].split(""),
          bottom: t[2].split("")
        };
      }
    },
    created: function created() {
      this.instances = {
        header: null,
        right: null,
        footer: null,
        left: null
      };
    },
    render: function render(t) {
      return t("div", {
        staticClass: "q-layout"
      }, [t(xs, {
        on: {
          scroll: this.__onPageScroll
        }
      }), t(Wi, {
        on: {
          resize: this.__onLayoutResize
        }
      }), t(ks, {
        on: {
          resize: this.__onWindowResize
        }
      }), this.$slots["default"]]);
    },
    methods: {
      __animate: function __animate() {
        var t = this;
        this.timer ? clearTimeout(this.timer) : document.body.classList.add("q-layout-animate"), this.timer = setTimeout(function () {
          document.body.classList.remove("q-layout-animate"), t.timer = null;
        }, 150);
      },
      __onPageScroll: function __onPageScroll(t) {
        this.scroll = t, this.$emit("scroll", t);
      },
      __onLayoutResize: function __onLayoutResize() {
        this.scrollHeight = this.$el.scrollHeight, this.$emit("scrollHeight", this.scrollHeight);
      },
      __onWindowResize: function __onWindowResize(t) {
        var e = t.height,
            i = t.width;
        this.height !== e && (this.height = e), this.width !== i && (this.width = i), this.$emit("resize", {
          height: e,
          width: i
        });
      }
    }
  },
      qs = "q-body-drawer-toggle",
      $s = {
    name: "QLayoutDrawer",
    inject: {
      layout: {
        "default": function _default() {
          console.error("QLayoutDrawer needs to be child of QLayout");
        }
      }
    },
    mixins: [M, at],
    directives: {
      TouchPan: Ce
    },
    props: {
      overlay: Boolean,
      side: {
        type: String,
        "default": "left",
        validator: function validator(t) {
          return ["left", "right"].includes(t);
        }
      },
      width: {
        type: Number,
        "default": 300
      },
      mini: Boolean,
      miniWidth: {
        type: Number,
        "default": 60
      },
      breakpoint: {
        type: Number,
        "default": 992
      },
      behavior: {
        type: String,
        validator: function validator(t) {
          return ["default", "desktop", "mobile"].includes(t);
        },
        "default": "default"
      },
      contentStyle: Object,
      contentClass: [String, Object, Array],
      noHideOnRouteChange: Boolean,
      noSwipeOpen: Boolean,
      noSwipeClose: Boolean
    },
    data: function data() {
      var t = void 0 === this.value || this.value,
          e = "mobile" !== this.behavior && this.breakpoint < this.layout.width && !this.overlay && t;
      return void 0 !== this.value && this.value !== e && this.$emit("input", e), {
        showing: e,
        belowBreakpoint: "mobile" === this.behavior || "desktop" !== this.behavior && this.breakpoint >= this.layout.width,
        largeScreenState: t,
        mobileOpened: !1
      };
    },
    watch: {
      belowBreakpoint: function belowBreakpoint(t, e) {
        this.mobileOpened || (t ? (this.overlay || (this.largeScreenState = this.showing), this.hide(!1)) : this.overlay || this[this.largeScreenState ? "show" : "hide"](!1));
      },
      behavior: function behavior(t) {
        this.__updateLocal("belowBreakpoint", "mobile" === t || "desktop" !== t && this.breakpoint >= this.layout.width);
      },
      breakpoint: function breakpoint(t) {
        this.__updateLocal("belowBreakpoint", "mobile" === this.behavior || "desktop" !== this.behavior && t >= this.layout.width);
      },
      "layout.width": function layoutWidth(t) {
        this.__updateLocal("belowBreakpoint", "mobile" === this.behavior || "desktop" !== this.behavior && this.breakpoint >= t);
      },
      offset: function offset(t) {
        this.__update("offset", t);
      },
      onLayout: function onLayout(t) {
        this.__update("space", t);
      },
      $route: function $route() {
        this.noHideOnRouteChange || (this.mobileOpened || this.onScreenOverlay) && this.hide();
      },
      rightSide: function rightSide() {
        this.applyPosition();
      },
      size: function size(t) {
        this.applyPosition(), this.__update("size", t);
      },
      "$q.i18n.rtl": function $qI18nRtl() {
        this.applyPosition();
      },
      mini: function mini() {
        this.value && this.layout.__animate();
      }
    },
    computed: {
      rightSide: function rightSide() {
        return "right" === this.side;
      },
      offset: function offset() {
        return !this.showing || this.mobileOpened || this.overlay ? 0 : this.size;
      },
      size: function size() {
        return this.isMini ? this.miniWidth : this.width;
      },
      fixed: function fixed() {
        return this.overlay || this.layout.view.indexOf(this.rightSide ? "R" : "L") > -1;
      },
      onLayout: function onLayout() {
        return this.showing && !this.mobileView && !this.overlay;
      },
      onScreenOverlay: function onScreenOverlay() {
        return this.showing && !this.mobileView && this.overlay;
      },
      backdropClass: function backdropClass() {
        return {
          "no-pointer-events": !this.showing || !this.mobileView
        };
      },
      mobileView: function mobileView() {
        return this.belowBreakpoint || this.mobileOpened;
      },
      headerSlot: function headerSlot() {
        return !this.overlay && (this.rightSide ? "r" === this.layout.rows.top[2] : "l" === this.layout.rows.top[0]);
      },
      footerSlot: function footerSlot() {
        return !this.overlay && (this.rightSide ? "r" === this.layout.rows.bottom[2] : "l" === this.layout.rows.bottom[0]);
      },
      belowClass: function belowClass() {
        return {
          fixed: !0,
          "on-top": !0,
          "q-layout-drawer-delimiter": this.fixed && this.showing,
          "q-layout-drawer-mobile": !0,
          "top-padding": !0
        };
      },
      aboveClass: function aboveClass() {
        return {
          fixed: this.fixed || !this.onLayout,
          "q-layout-drawer-mini": this.isMini,
          "q-layout-drawer-normal": !this.isMini,
          "q-layout-drawer-delimiter": this.fixed && this.showing,
          "top-padding": this.headerSlot
        };
      },
      aboveStyle: function aboveStyle() {
        var t = {};
        return this.layout.header.space && !this.headerSlot && (this.fixed ? t.top = this.layout.header.offset + "px" : this.layout.header.space && (t.top = this.layout.header.size + "px")), this.layout.footer.space && !this.footerSlot && (this.fixed ? t.bottom = this.layout.footer.offset + "px" : this.layout.footer.space && (t.bottom = this.layout.footer.size + "px")), t;
      },
      computedStyle: function computedStyle() {
        return [this.contentStyle, {
          width: this.size + "px"
        }, this.mobileView ? "" : this.aboveStyle];
      },
      computedClass: function computedClass() {
        return [this.contentClass, this.mobileView ? this.belowClass : this.aboveClass];
      },
      stateDirection: function stateDirection() {
        return (this.$q.i18n.rtl ? -1 : 1) * (this.rightSide ? 1 : -1);
      },
      isMini: function isMini() {
        return this.mini && !this.mobileView;
      },
      onNativeEvents: function onNativeEvents() {
        var t = this;
        if (!this.mobileView) return {
          "!click": function click(e) {
            t.$emit("click", e);
          },
          mouseover: function mouseover(e) {
            t.$emit("mouseover", e);
          },
          mouseout: function mouseout(e) {
            t.$emit("mouseout", e);
          }
        };
      }
    },
    methods: {
      applyPosition: function applyPosition(t) {
        var e = this;
        void 0 !== t ? this.$refs.content && U(this.$refs.content, Y("translateX(" + t + "px)")) : this.$nextTick(function () {
          t = e.showing ? 0 : (e.$q.i18n.rtl ? -1 : 1) * (e.rightSide ? 1 : -1) * e.size, e.applyPosition(t);
        });
      },
      applyBackdrop: function applyBackdrop(t) {
        this.$refs.backdrop && U(this.$refs.backdrop, {
          backgroundColor: "rgba(0,0,0," + .4 * t + ")"
        });
      },
      __openByTouch: function __openByTouch(t) {
        if (this.belowBreakpoint) {
          var e = this.size,
              i = Pt(t.distance.x, 0, e);

          if (t.isFinal) {
            var s = this.$refs.content,
                n = i >= Math.min(75, e);
            return s.classList.remove("no-transition"), void (n ? this.show() : (this.layout.__animate(), this.applyBackdrop(0), this.applyPosition(this.stateDirection * e), s.classList.remove("q-layout-drawer-delimiter")));
          }

          if (this.applyPosition((this.$q.i18n.rtl ? !this.rightSide : this.rightSide) ? Math.max(e - i, 0) : Math.min(0, i - e)), this.applyBackdrop(Pt(i / e, 0, 1)), t.isFirst) {
            var o = this.$refs.content;
            o.classList.add("no-transition"), o.classList.add("q-layout-drawer-delimiter");
          }
        }
      },
      __closeByTouch: function __closeByTouch(t) {
        if (this.mobileOpened) {
          var e = this.size,
              i = t.direction === this.side,
              s = (this.$q.i18n.rtl ? !i : i) ? Pt(t.distance.x, 0, e) : 0;

          if (t.isFinal) {
            var n = Math.abs(s) < Math.min(75, e);
            return this.$refs.content.classList.remove("no-transition"), void (n ? (this.layout.__animate(), this.applyBackdrop(1), this.applyPosition(0)) : this.hide());
          }

          this.applyPosition(this.stateDirection * s), this.applyBackdrop(Pt(1 - s / e, 0, 1)), t.isFirst && this.$refs.content.classList.add("no-transition");
        }
      },
      __show: function __show(t) {
        var e = this;
        void 0 === t && (t = !0), t && this.layout.__animate(), this.applyPosition(0);
        var i = this.layout.instances[this.rightSide ? "left" : "right"];
        i && i.mobileOpened && i.hide(), this.belowBreakpoint ? (this.mobileOpened = !0, this.applyBackdrop(1), this.__preventScroll(!0)) : document.body.classList.add(qs), clearTimeout(this.timer), this.timer = setTimeout(function () {
          e.showPromise && (e.showPromise.then(function () {
            document.body.classList.remove(qs);
          }), e.showPromiseResolve());
        }, 150);
      },
      __hide: function __hide(t) {
        var e = this;
        void 0 === t && (t = !0), t && this.layout.__animate(), this.mobileOpened && (this.__preventScroll(!1), this.mobileOpened = !1), this.applyPosition((this.$q.i18n.rtl ? -1 : 1) * (this.rightSide ? 1 : -1) * this.size), this.applyBackdrop(0), document.body.classList.remove(qs), clearTimeout(this.timer), this.timer = setTimeout(function () {
          e.hidePromise && e.hidePromiseResolve();
        }, 150);
      },
      __update: function __update(t, e) {
        this.layout[this.side][t] !== e && (this.layout[this.side][t] = e);
      },
      __updateLocal: function __updateLocal(t, e) {
        this[t] !== e && (this[t] = e);
      }
    },
    created: function created() {
      this.layout.instances[this.side] = this, this.__update("size", this.size), this.__update("space", this.onLayout), this.__update("offset", this.offset);
    },
    mounted: function mounted() {
      this.showing && this.applyPosition(0);
    },
    beforeDestroy: function beforeDestroy() {
      clearTimeout(this.timer), this.layout.instances[this.side] === this && (this.layout.instances[this.side] = null, this.__update("size", 0), this.__update("offset", 0), this.__update("space", !1));
    },
    render: function render(t) {
      return t("div", {
        staticClass: "q-drawer-container"
      }, [this.mobileView && !this.noSwipeOpen ? t("div", {
        staticClass: "q-layout-drawer-opener fixed-" + this.side,
        directives: [{
          name: "touch-pan",
          modifiers: {
            horizontal: !0
          },
          value: this.__openByTouch
        }]
      }) : null, t("div", {
        ref: "backdrop",
        staticClass: "fullscreen q-layout-backdrop q-layout-transition",
        "class": this.backdropClass,
        on: {
          click: this.hide
        },
        directives: [{
          name: "touch-pan",
          modifiers: {
            horizontal: !0
          },
          value: this.__closeByTouch
        }]
      })].concat([t("aside", {
        ref: "content",
        staticClass: "q-layout-drawer q-layout-transition q-layout-drawer-" + this.side + " scroll",
        "class": this.computedClass,
        style: this.computedStyle,
        attrs: this.$attrs,
        on: this.onNativeEvents,
        directives: this.mobileView && !this.noSwipeClose ? [{
          name: "touch-pan",
          modifiers: {
            horizontal: !0
          },
          value: this.__closeByTouch
        }] : null
      }, this.isMini && this.$slots.mini ? [this.$slots.mini] : this.$slots["default"])]));
    }
  },
      Ts = {
    name: "QLayoutFooter",
    mixins: [re],
    inject: {
      layout: {
        "default": function _default() {
          console.error("QLayoutFooter needs to be child of QLayout");
        }
      }
    },
    props: {
      value: {
        type: Boolean,
        "default": !0
      },
      reveal: Boolean
    },
    data: function data() {
      return {
        size: 0,
        revealed: !0
      };
    },
    watch: {
      value: function value(t) {
        this.__update("space", t), this.__updateLocal("revealed", !0), this.layout.__animate();
      },
      offset: function offset(t) {
        this.__update("offset", t);
      },
      reveal: function reveal(t) {
        t || this.__updateLocal("revealed", this.value);
      },
      revealed: function revealed(t) {
        this.layout.__animate(), this.$emit("reveal", t);
      },
      "layout.scroll": function layoutScroll() {
        this.__updateRevealed();
      },
      "layout.scrollHeight": function layoutScrollHeight() {
        this.__updateRevealed();
      },
      size: function size() {
        this.__updateRevealed();
      }
    },
    computed: {
      fixed: function fixed() {
        return this.reveal || this.layout.view.indexOf("F") > -1;
      },
      offset: function offset() {
        if (!this.canRender || !this.value) return 0;
        if (this.fixed) return this.revealed ? this.size : 0;
        var t = this.layout.height + this.layout.scroll.position + this.size - this.layout.scrollHeight;
        return t > 0 ? t : 0;
      },
      computedClass: function computedClass() {
        return {
          "fixed-bottom": this.fixed,
          "absolute-bottom": !this.fixed,
          hidden: !this.value && !this.fixed,
          "q-layout-footer-hidden": !this.canRender || !this.value || this.fixed && !this.revealed
        };
      },
      computedStyle: function computedStyle() {
        var t = this.layout.rows.bottom,
            e = {};
        return "l" === t[0] && this.layout.left.space && (e[this.$q.i18n.rtl ? "right" : "left"] = this.layout.left.size + "px"), "r" === t[2] && this.layout.right.space && (e[this.$q.i18n.rtl ? "left" : "right"] = this.layout.right.size + "px"), e;
      }
    },
    render: function render(t) {
      return t("footer", {
        staticClass: "q-layout-footer q-layout-marginal q-layout-transition",
        "class": this.computedClass,
        style: this.computedStyle
      }, [t(Wi, {
        props: {
          debounce: 0
        },
        on: {
          resize: this.__onResize
        }
      }), this.$slots["default"]]);
    },
    created: function created() {
      this.layout.instances.footer = this, this.__update("space", this.value), this.__update("offset", this.offset);
    },
    beforeDestroy: function beforeDestroy() {
      this.layout.instances.footer === this && (this.layout.instances.footer = null, this.__update("size", 0), this.__update("offset", 0), this.__update("space", !1));
    },
    methods: {
      __onResize: function __onResize(t) {
        var e = t.height;
        this.__updateLocal("size", e), this.__update("size", e);
      },
      __update: function __update(t, e) {
        this.layout.footer[t] !== e && (this.layout.footer[t] = e);
      },
      __updateLocal: function __updateLocal(t, e) {
        this[t] !== e && (this[t] = e);
      },
      __updateRevealed: function __updateRevealed() {
        if (this.reveal) {
          var t = this.layout.scroll,
              e = this.layout.scrollHeight,
              i = this.layout.height;

          this.__updateLocal("revealed", "up" === t.direction || t.position - t.inflexionPosition < 100 || e - i - t.position < this.size + 300);
        }
      }
    }
  },
      Ps = {
    name: "QLayoutHeader",
    mixins: [re],
    inject: {
      layout: {
        "default": function _default() {
          console.error("QLayoutHeader needs to be child of QLayout");
        }
      }
    },
    props: {
      value: {
        type: Boolean,
        "default": !0
      },
      reveal: Boolean,
      revealOffset: {
        type: Number,
        "default": 250
      }
    },
    data: function data() {
      return {
        size: 0,
        revealed: !0
      };
    },
    watch: {
      value: function value(t) {
        this.__update("space", t), this.__updateLocal("revealed", !0), this.layout.__animate();
      },
      offset: function offset(t) {
        this.__update("offset", t);
      },
      reveal: function reveal(t) {
        t || this.__updateLocal("revealed", this.value);
      },
      revealed: function revealed(t) {
        this.layout.__animate(), this.$emit("reveal", t);
      },
      "layout.scroll": function layoutScroll(t) {
        this.reveal && this.__updateLocal("revealed", "up" === t.direction || t.position <= this.revealOffset || t.position - t.inflexionPosition < 100);
      }
    },
    computed: {
      fixed: function fixed() {
        return this.reveal || this.layout.view.indexOf("H") > -1;
      },
      offset: function offset() {
        if (!this.canRender || !this.value) return 0;
        if (this.fixed) return this.revealed ? this.size : 0;
        var t = this.size - this.layout.scroll.position;
        return t > 0 ? t : 0;
      },
      computedClass: function computedClass() {
        return {
          "fixed-top": this.fixed,
          "absolute-top": !this.fixed,
          "q-layout-header-hidden": !this.canRender || !this.value || this.fixed && !this.revealed
        };
      },
      computedStyle: function computedStyle() {
        var t = this.layout.rows.top,
            e = {};
        return "l" === t[0] && this.layout.left.space && (e[this.$q.i18n.rtl ? "right" : "left"] = this.layout.left.size + "px"), "r" === t[2] && this.layout.right.space && (e[this.$q.i18n.rtl ? "left" : "right"] = this.layout.right.size + "px"), e;
      }
    },
    render: function render(t) {
      return t("header", {
        staticClass: "q-layout-header q-layout-marginal q-layout-transition",
        "class": this.computedClass,
        style: this.computedStyle
      }, [t(Wi, {
        props: {
          debounce: 0
        },
        on: {
          resize: this.__onResize
        }
      }), this.$slots["default"]]);
    },
    created: function created() {
      this.layout.instances.header = this, this.__update("space", this.value), this.__update("offset", this.offset);
    },
    beforeDestroy: function beforeDestroy() {
      this.layout.instances.header === this && (this.layout.instances.header = null, this.__update("size", 0), this.__update("offset", 0), this.__update("space", !1));
    },
    methods: {
      __onResize: function __onResize(t) {
        var e = t.height;
        this.__updateLocal("size", e), this.__update("size", e);
      },
      __update: function __update(t, e) {
        this.layout.header[t] !== e && (this.layout.header[t] = e);
      },
      __updateLocal: function __updateLocal(t, e) {
        this[t] !== e && (this[t] = e);
      }
    }
  },
      Ms = {
    name: "QPage",
    inject: {
      pageContainer: {
        "default": function _default() {
          console.error("QPage needs to be child of QPageContainer");
        }
      },
      layout: {}
    },
    props: {
      padding: Boolean,
      styleFn: Function
    },
    computed: {
      computedStyle: function computedStyle() {
        var t = (this.layout.header.space ? this.layout.header.size : 0) + (this.layout.footer.space ? this.layout.footer.size : 0);
        return "function" == typeof this.styleFn ? this.styleFn(t) : {
          minHeight: t ? "calc(100vh - " + t + "px)" : "100vh"
        };
      },
      computedClass: function computedClass() {
        if (this.padding) return "layout-padding";
      }
    },
    render: function render(t) {
      return t("main", {
        staticClass: "q-layout-page",
        style: this.computedStyle,
        "class": this.computedClass
      }, this.$slots["default"]);
    }
  },
      Ls = {
    name: "QPageContainer",
    inject: {
      layout: {
        "default": function _default() {
          console.error("QPageContainer needs to be child of QLayout");
        }
      }
    },
    provide: {
      pageContainer: !0
    },
    computed: {
      computedStyle: function computedStyle() {
        var t = {};
        return this.layout.header.space && (t.paddingTop = this.layout.header.size + "px"), this.layout.right.space && (t["padding" + (this.$q.i18n.rtl ? "Left" : "Right")] = this.layout.right.size + "px"), this.layout.footer.space && (t.paddingBottom = this.layout.footer.size + "px"), this.layout.left.space && (t["padding" + (this.$q.i18n.rtl ? "Right" : "Left")] = this.layout.left.size + "px"), t;
      }
    },
    render: function render(t) {
      return t("div", {
        staticClass: "q-layout-page-container q-layout-transition",
        style: this.computedStyle
      }, this.$slots["default"]);
    }
  },
      Bs = {
    name: "QPageSticky",
    inject: {
      layout: {
        "default": function _default() {
          console.error("QPageSticky needs to be child of QLayout");
        }
      }
    },
    props: {
      position: {
        type: String,
        "default": "bottom-right",
        validator: function validator(t) {
          return ["top-right", "top-left", "bottom-right", "bottom-left", "top", "right", "bottom", "left"].includes(t);
        }
      },
      offset: {
        type: Array,
        validator: function validator(t) {
          return 2 === t.length;
        }
      },
      expand: Boolean
    },
    computed: {
      attach: function attach() {
        var t = this.position;
        return {
          top: t.indexOf("top") > -1,
          right: t.indexOf("right") > -1,
          bottom: t.indexOf("bottom") > -1,
          left: t.indexOf("left") > -1,
          vertical: "top" === t || "bottom" === t,
          horizontal: "left" === t || "right" === t
        };
      },
      top: function top() {
        return this.layout.header.offset;
      },
      right: function right() {
        return this.layout.right.offset;
      },
      bottom: function bottom() {
        return this.layout.footer.offset;
      },
      left: function left() {
        return this.layout.left.offset;
      },
      computedStyle: function computedStyle() {
        var t = this.attach,
            e = [],
            i = this.$q.i18n.rtl ? -1 : 1;
        t.top && this.top ? e.push("translateY(" + this.top + "px)") : t.bottom && this.bottom && e.push("translateY(" + -this.bottom + "px)"), t.left && this.left ? e.push("translateX(" + i * this.left + "px)") : t.right && this.right && e.push("translateX(" + -i * this.right + "px)");
        var s = e.length ? Y(e.join(" ")) : {};
        return this.offset && (s.margin = this.offset[1] + "px " + this.offset[0] + "px"), t.vertical ? (this.left && (s[this.$q.i18n.rtl ? "right" : "left"] = this.left + "px"), this.right && (s[this.$q.i18n.rtl ? "left" : "right"] = this.right + "px")) : t.horizontal && (this.top && (s.top = this.top + "px"), this.bottom && (s.bottom = this.bottom + "px")), s;
      },
      classes: function classes() {
        return ["fixed-" + this.position, "q-page-sticky-" + (this.expand ? "expand" : "shrink")];
      }
    },
    render: function render(t) {
      return t("div", {
        staticClass: "q-page-sticky q-layout-transition row flex-center",
        "class": this.classes,
        style: this.computedStyle
      }, this.expand ? this.$slots["default"] : [t("span", this.$slots["default"])]);
    }
  },
      Es = {
    name: "QListHeader",
    props: {
      inset: Boolean
    },
    render: function render(t) {
      return t("div", {
        staticClass: "q-list-header",
        "class": {
          "q-list-header-inset": this.inset
        }
      }, this.$slots["default"]);
    }
  },
      Ns = {
    name: "QModalLayout",
    inject: {
      __qmodal: {
        "default": function _default() {
          console.error("QModalLayout needs to be child of QModal");
        }
      }
    },
    props: {
      headerStyle: [String, Object, Array],
      headerClass: [String, Object, Array],
      contentStyle: [String, Object, Array],
      contentClass: [String, Object, Array],
      footerStyle: [String, Object, Array],
      footerClass: [String, Object, Array]
    },
    watch: {
      __qmodal: function __qmodal(t, e) {
        e && e.unregister(this), t && t.register(this);
      }
    },
    mounted: function mounted() {
      this.__qmodal && this.__qmodal.register(this);
    },
    beforeDestroy: function beforeDestroy() {
      this.__qmodal && this.__qmodal.unregister(this);
    },
    render: function render(t) {
      var e = [];
      return (this.$slots.header || this.$slots.navigation) && e.push(t("div", {
        staticClass: "q-layout-header",
        style: this.headerStyle,
        "class": this.headerClass
      }, [this.$slots.header, this.$slots.navigation])), e.push(t("div", {
        staticClass: "q-modal-layout-content col scroll",
        style: this.contentStyle,
        "class": this.contentClass
      }, this.$slots["default"])), this.$slots.footer && e.push(t("div", {
        staticClass: "q-layout-footer",
        style: this.footerStyle,
        "class": this.footerClass
      }, [this.$slots.footer, null])), t("div", {
        staticClass: "q-modal-layout col column no-wrap"
      }, e);
    }
  },
      Os = {
    name: "QNoSsr",
    mixins: [re],
    props: {
      tag: {
        type: String,
        "default": "div"
      },
      placeholder: String
    },
    render: function render(t) {
      if (this.canRender) {
        var e = this.$slots["default"];
        return e && e.length > 1 ? t(this.tag, e) : e ? e[0] : null;
      }

      if (this.$slots.placeholder) {
        var i = this.$slots.placeholder;
        return i && i.length > 1 ? t(this.tag, {
          staticClass: "q-no-ssr-placeholder"
        }, i) : i ? i[0] : null;
      }

      if (this.placeholder) return t(this.tag, {
        staticClass: "q-no-ssr-placeholder"
      }, [this.placeholder]);
    }
  },
      Ds = {
    name: "QPagination",
    props: {
      value: {
        type: Number,
        required: !0
      },
      min: {
        type: Number,
        "default": 1
      },
      max: {
        type: Number,
        required: !0
      },
      color: {
        type: String,
        "default": "primary"
      },
      textColor: String,
      size: String,
      disable: Boolean,
      input: Boolean,
      boundaryLinks: {
        type: Boolean,
        "default": null
      },
      boundaryNumbers: {
        type: Boolean,
        "default": null
      },
      directionLinks: {
        type: Boolean,
        "default": null
      },
      ellipses: {
        type: Boolean,
        "default": null
      },
      maxPages: {
        type: Number,
        "default": 0,
        validator: function validator(t) {
          return !(t < 0) || (console.error("maxPages should not be negative"), !1);
        }
      }
    },
    data: function data() {
      return {
        newPage: null
      };
    },
    watch: {
      min: function min(t) {
        this.model = this.value;
      },
      max: function max(t) {
        this.model = this.value;
      }
    },
    computed: {
      model: {
        get: function get() {
          return this.value;
        },
        set: function set(t) {
          var e = this;

          if (!this.disable && t && !isNaN(t)) {
            var i = Pt(parseInt(t, 10), this.min, this.max);
            this.$emit("input", i), this.$nextTick(function () {
              JSON.stringify(i) !== JSON.stringify(e.value) && e.$emit("change", i);
            });
          }
        }
      },
      inputPlaceholder: function inputPlaceholder() {
        return this.model + " / " + this.max;
      },
      __boundaryLinks: function __boundaryLinks() {
        return this.__getBool(this.boundaryLinks, this.input);
      },
      __boundaryNumbers: function __boundaryNumbers() {
        return this.__getBool(this.boundaryNumbers, !this.input);
      },
      __directionLinks: function __directionLinks() {
        return this.__getBool(this.directionLinks, this.input);
      },
      __ellipses: function __ellipses() {
        return this.__getBool(this.ellipses, !this.input);
      },
      icons: function icons() {
        var t = [this.$q.icon.pagination.first, this.$q.icon.pagination.prev, this.$q.icon.pagination.next, this.$q.icon.pagination.last];
        return this.$q.i18n.rtl ? t.reverse() : t;
      }
    },
    methods: {
      set: function set(t) {
        this.model = t;
      },
      setByOffset: function setByOffset(t) {
        this.model = this.model + t;
      },
      __update: function __update() {
        this.model = this.newPage, this.newPage = null;
      },
      __getBool: function __getBool(t, e) {
        return [!0, !1].includes(t) ? t : e;
      },
      __getBtn: function __getBtn(t, e, i) {
        return e.props = Object.assign({
          color: this.color,
          flat: !0,
          size: this.size
        }, i), t(Yt, e);
      }
    },
    render: function render(t) {
      var e = this,
          i = [],
          s = [],
          n = [];
      if (this.__boundaryLinks && (i.push(this.__getBtn(t, {
        key: "bls",
        on: {
          click: function click() {
            return e.set(e.min);
          }
        }
      }, {
        disable: this.disable || this.value <= this.min,
        icon: this.icons[0]
      })), s.unshift(this.__getBtn(t, {
        key: "ble",
        on: {
          click: function click() {
            return e.set(e.max);
          }
        }
      }, {
        disable: this.disable || this.value >= this.max,
        icon: this.icons[3]
      }))), this.__directionLinks && (i.push(this.__getBtn(t, {
        key: "bdp",
        on: {
          click: function click() {
            return e.setByOffset(-1);
          }
        }
      }, {
        disable: this.disable || this.value <= this.min,
        icon: this.icons[1]
      })), s.unshift(this.__getBtn(t, {
        key: "bdn",
        on: {
          click: function click() {
            return e.setByOffset(1);
          }
        }
      }, {
        disable: this.disable || this.value >= this.max,
        icon: this.icons[2]
      }))), this.input) n.push(t(Ui, {
        staticClass: "inline no-padding",
        style: {
          width: this.inputPlaceholder.length + "rem"
        },
        props: {
          type: "number",
          value: this.newPage,
          noNumberToggle: !0,
          min: this.min,
          max: this.max,
          color: this.color,
          placeholder: this.inputPlaceholder,
          disable: this.disable,
          hideUnderline: !0
        },
        on: {
          input: function input(t) {
            return e.newPage = t;
          },
          keydown: function keydown(t) {
            return 13 === E(t) && e.__update();
          },
          blur: function blur() {
            return e.__update();
          }
        }
      }));else {
        var o = Math.max(this.maxPages, 1 + (this.__ellipses ? 2 : 0) + (this.__boundaryNumbers ? 2 : 0)),
            r = this.min,
            a = this.max,
            l = !1,
            c = !1,
            h = !1,
            u = !1;
        this.maxPages && o < this.max - this.min + 1 && (o = 1 + 2 * Math.floor(o / 2), r = Math.max(this.min, Math.min(this.max - o + 1, this.value - Math.floor(o / 2))), a = Math.min(this.max, r + o - 1), this.__boundaryNumbers && (h = !0, r += 1), this.__ellipses && r > this.min + (this.__boundaryNumbers ? 1 : 0) && (l = !0, r += 1), this.__boundaryNumbers && (u = !0, a -= 1), this.__ellipses && a < this.max - (this.__boundaryNumbers ? 1 : 0) && (c = !0, a -= 1));
        var d = {
          minWidth: Math.max(2, String(this.max).length) + "em"
        };

        if (h) {
          var p = this.min === this.value;
          i.push(this.__getBtn(t, {
            key: "bns",
            style: d,
            on: {
              click: function click() {
                return e.set(e.min);
              }
            }
          }, {
            disable: this.disable,
            flat: !p,
            textColor: p ? this.textColor : null,
            label: this.min,
            noRipple: !0
          }));
        }

        if (u) {
          var f = this.max === this.value;
          s.unshift(this.__getBtn(t, {
            key: "bne",
            style: d,
            on: {
              click: function click() {
                return e.set(e.max);
              }
            }
          }, {
            disable: this.disable,
            flat: !f,
            textColor: f ? this.textColor : null,
            label: this.max,
            noRipple: !0
          }));
        }

        l && i.push(this.__getBtn(t, {
          key: "bes",
          style: d,
          on: {
            click: function click() {
              return e.set(r - 1);
            }
          }
        }, {
          disable: this.disable,
          label: "…"
        })), c && s.unshift(this.__getBtn(t, {
          key: "bee",
          style: d,
          on: {
            click: function click() {
              return e.set(a + 1);
            }
          }
        }, {
          disable: this.disable,
          label: "…"
        }));

        for (var m = function m(i) {
          var s = i === e.value;
          n.push(e.__getBtn(t, {
            key: "bpg" + i,
            style: d,
            on: {
              click: function click() {
                return e.set(i);
              }
            }
          }, {
            disable: e.disable,
            flat: !s,
            textColor: s ? e.textColor : null,
            label: i,
            noRipple: !0
          }));
        }, g = r; g <= a; g++) {
          m(g);
        }
      }
      return t("div", {
        staticClass: "q-pagination row no-wrap items-center",
        "class": {
          disabled: this.disable
        }
      }, [i, t("div", {
        staticClass: "row justify-center"
      }, [n]), s]);
    }
  },
      zs = {
    name: "QParallax",
    props: {
      src: {
        type: String,
        required: !0
      },
      height: {
        type: Number,
        "default": 500
      },
      speed: {
        type: Number,
        "default": 1,
        validator: function validator(t) {
          return t >= 0 && t <= 1;
        }
      }
    },
    data: function data() {
      return {
        imageHasBeenLoaded: !1,
        scrolling: !1
      };
    },
    watch: {
      src: function src() {
        this.imageHasBeenLoaded = !1;
      },
      height: function height() {
        this.__updatePos();
      }
    },
    methods: {
      __processImage: function __processImage() {
        this.imageHasBeenLoaded = !0, this.__onResize();
      },
      __onResize: function __onResize() {
        this.imageHasBeenLoaded && this.scrollTarget && (this.scrollTarget === window && (this.viewportHeight = window.innerHeight), this.imageHeight = V(this.image), this.__updatePos());
      },
      __updatePos: function __updatePos() {
        var t, e, i, s;

        if (this.imageHasBeenLoaded && (this.scrollTarget === window ? (t = 0, i = e = this.viewportHeight) : i = (t = Q(this.scrollTarget).top) + (e = V(this.scrollTarget)), (s = Q(this.container).top) + this.height > t && s < i)) {
          var n = (i - s) / (this.height + e);

          this.__setPos(Math.round((this.imageHeight - this.height) * n * this.speed));
        }
      },
      __setPos: function __setPos(t) {
        U(this.$refs.img, Y("translate3D(-50%," + t + "px, 0)"));
      }
    },
    render: function render(t) {
      return t("div", {
        staticClass: "q-parallax",
        style: {
          height: this.height + "px"
        }
      }, [t("div", {
        staticClass: "q-parallax-image absolute-full"
      }, [t("img", {
        ref: "img",
        attrs: {
          src: this.src
        },
        "class": {
          ready: this.imageHasBeenLoaded
        },
        on: {
          load: this.__processImage
        }
      })]), t("div", {
        staticClass: "q-parallax-text absolute-full column flex-center"
      }, this.imageHasBeenLoaded ? this.$slots["default"] : [this.$slots.loading])]);
    },
    beforeMount: function beforeMount() {
      this.__setPos = oe(this.__setPos);
    },
    mounted: function mounted() {
      var t = this;
      this.$nextTick(function () {
        t.container = t.$el, t.image = t.$refs.img, t.scrollTarget = G(t.$el), t.resizeHandler = Zi(t.__onResize, 50), window.addEventListener("resize", t.resizeHandler, L.passive), t.scrollTarget.addEventListener("scroll", t.__updatePos, L.passive), t.__onResize();
      });
    },
    beforeDestroy: function beforeDestroy() {
      window.removeEventListener("resize", this.resizeHandler, L.passive), this.scrollTarget.removeEventListener("scroll", this.__updatePos, L.passive);
    }
  };

  function Rs(t) {
    return {
      width: t + "%"
    };
  }

  var Is = {
    name: "QProgress",
    props: {
      percentage: {
        type: Number,
        "default": 0
      },
      color: {
        type: String,
        "default": "primary"
      },
      stripe: Boolean,
      animate: Boolean,
      indeterminate: Boolean,
      buffer: Number,
      height: {
        type: String,
        "default": "4px"
      }
    },
    computed: {
      model: function model() {
        return Pt(this.percentage, 0, 100);
      },
      bufferModel: function bufferModel() {
        return Pt(this.buffer || 0, 0, 100 - this.model);
      },
      bufferStyle: function bufferStyle() {
        return Rs(this.bufferModel);
      },
      trackStyle: function trackStyle() {
        return Rs(this.buffer ? 100 - this.buffer : 100);
      },
      computedClass: function computedClass() {
        return "text-" + this.color;
      },
      computedStyle: function computedStyle() {
        return {
          height: this.height
        };
      },
      modelClass: function modelClass() {
        return {
          animate: this.animate,
          stripe: this.stripe,
          indeterminate: this.indeterminate
        };
      },
      modelStyle: function modelStyle() {
        return Rs(this.model);
      }
    },
    render: function render(t) {
      return t("div", {
        staticClass: "q-progress",
        style: this.computedStyle,
        "class": this.computedClass
      }, [this.buffer && !this.indeterminate ? t("div", {
        staticClass: "q-progress-buffer",
        style: this.bufferStyle
      }) : null, t("div", {
        staticClass: "q-progress-track",
        style: this.trackStyle
      }), t("div", {
        staticClass: "q-progress-model",
        style: this.modelStyle,
        "class": this.modelClass
      })]);
    }
  },
      Hs = {
    name: "QPullToRefresh",
    directives: {
      TouchPan: Ce
    },
    props: {
      handler: {
        type: Function,
        required: !0
      },
      color: {
        type: String,
        "default": "primary"
      },
      distance: {
        type: Number,
        "default": 35
      },
      pullMessage: String,
      releaseMessage: String,
      refreshMessage: String,
      refreshIcon: String,
      inline: Boolean,
      disable: Boolean
    },
    data: function data() {
      return {
        state: "pull",
        pullPosition: -65,
        animating: !1,
        pulling: !1,
        scrolling: !1
      };
    },
    watch: {
      inline: function inline(t) {
        this.setScrollContainer(t);
      }
    },
    computed: {
      message: function message() {
        switch (this.state) {
          case "pulled":
            return this.releaseMessage || this.$q.i18n.pullToRefresh.release;

          case "refreshing":
            return this.refreshMessage || this.$q.i18n.pullToRefresh.refresh;

          case "pull":
          default:
            return this.pullMessage || this.$q.i18n.pullToRefresh.pull;
        }
      },
      style: function style() {
        var t = Y("translateY(" + this.pullPosition + "px)");
        return t.marginBottom = "-65px", t;
      },
      messageClass: function messageClass() {
        return "text-" + this.color;
      }
    },
    methods: {
      __pull: function __pull(t) {
        if (!this.disable) {
          if (t.isFinal) return this.scrolling = !1, this.pulling = !1, void ("pulled" === this.state ? (this.state = "refreshing", this.__animateTo(0), this.trigger()) : "pull" === this.state && this.__animateTo(-65));
          if (this.animating || this.scrolling || "refreshing" === this.state) return !0;
          var e = Z(this.scrollContainer);
          if (0 !== e || 0 === e && "down" !== t.direction) return this.scrolling = !0, this.pulling && (this.pulling = !1, this.state = "pull", this.__animateTo(-65)), !0;
          t.evt.preventDefault(), this.pulling = !0, this.pullPosition = -65 + Math.max(0, Math.pow(t.distance.y, .85)), this.state = this.pullPosition > this.distance ? "pulled" : "pull";
        }
      },
      __animateTo: function __animateTo(t, e, i) {
        var s = this;
        !i && this.animationId && cancelAnimationFrame(this.animating), this.pullPosition -= (this.pullPosition - t) / 7, this.pullPosition - t > 1 ? this.animating = requestAnimationFrame(function () {
          s.__animateTo(t, e, !0);
        }) : this.animating = requestAnimationFrame(function () {
          s.pullPosition = t, s.animating = !1, e && e();
        });
      },
      trigger: function trigger() {
        var t = this;
        this.handler(function () {
          t.__animateTo(-65, function () {
            t.state = "pull";
          });
        });
      },
      setScrollContainer: function setScrollContainer(t) {
        var e = this;
        this.$nextTick(function () {
          e.scrollContainer = t ? e.$el.parentNode : G(e.$el);
        });
      }
    },
    mounted: function mounted() {
      this.setScrollContainer(this.inline);
    },
    render: function render(t) {
      return t("div", {
        staticClass: "pull-to-refresh overflow-hidden-y"
      }, [t("div", {
        staticClass: "pull-to-refresh-container",
        style: this.style,
        directives: this.disable ? null : [{
          name: "touch-pan",
          modifiers: {
            vertical: !0,
            mightPrevent: !0
          },
          value: this.__pull
        }]
      }, [t("div", {
        staticClass: "pull-to-refresh-message row flex-center",
        "class": this.messageClass
      }, [t(dt, {
        "class": {
          "rotate-180": "pulled" === this.state
        },
        props: {
          name: this.$q.icon.pullToRefresh.arrow
        },
        directives: [{
          name: "show",
          value: "refreshing" !== this.state
        }]
      }), t(dt, {
        staticClass: "animate-spin",
        props: {
          name: this.refreshIcon || this.$q.icon.pullToRefresh.refresh
        },
        directives: [{
          name: "show",
          value: "refreshing" === this.state
        }]
      }), " " + this.message]), this.$slots["default"]])]);
    }
  },
      Fs = 0,
      As = 1,
      Qs = 2,
      js = {
    name: "QRange",
    mixins: [ri],
    props: {
      value: {
        type: Object,
        "default": function _default() {
          return {
            min: 0,
            max: 0
          };
        },
        validator: function validator(t) {
          return t.hasOwnProperty("min") && t.hasOwnProperty("max");
        }
      },
      dragRange: Boolean,
      dragOnlyRange: Boolean,
      leftLabelColor: String,
      leftLabelValue: String,
      rightLabelColor: String,
      rightLabelValue: String
    },
    data: function data() {
      return {
        model: Object.assign({}, this.value),
        dragging: !1,
        currentMinPercentage: (this.value.min - this.min) / (this.max - this.min),
        currentMaxPercentage: (this.value.max - this.min) / (this.max - this.min)
      };
    },
    computed: {
      percentageMin: function percentageMin() {
        return this.snap ? (this.model.min - this.min) / (this.max - this.min) : this.currentMinPercentage;
      },
      percentageMax: function percentageMax() {
        return this.snap ? (this.model.max - this.min) / (this.max - this.min) : this.currentMaxPercentage;
      },
      activeTrackWidth: function activeTrackWidth() {
        return 100 * (this.percentageMax - this.percentageMin) + "%";
      },
      leftDisplayValue: function leftDisplayValue() {
        return void 0 !== this.leftLabelValue ? this.leftLabelValue : this.model.min;
      },
      rightDisplayValue: function rightDisplayValue() {
        return void 0 !== this.rightLabelValue ? this.rightLabelValue : this.model.max;
      },
      leftTooltipColor: function leftTooltipColor() {
        return this.leftLabelColor || this.labelColor;
      },
      rightTooltipColor: function rightTooltipColor() {
        return this.rightLabelColor || this.labelColor;
      }
    },
    watch: {
      "value.min": function valueMin(t) {
        this.model.min = t;
      },
      "value.max": function valueMax(t) {
        this.model.max = t;
      },
      "model.min": function modelMin(t) {
        this.dragging || (t > this.model.max && (t = this.model.max), this.currentMinPercentage = (t - this.min) / (this.max - this.min));
      },
      "model.max": function modelMax(t) {
        this.dragging || (t < this.model.min && (t = this.model.min), this.currentMaxPercentage = (t - this.min) / (this.max - this.min));
      },
      min: function min(t) {
        this.model.min < t && this.__update({
          min: t
        }), this.model.max < t && this.__update({
          max: t
        }), this.$nextTick(this.__validateProps);
      },
      max: function max(t) {
        this.model.min > t && this.__update({
          min: t
        }), this.model.max > t && this.__update({
          max: t
        }), this.$nextTick(this.__validateProps);
      },
      step: function step() {
        this.$nextTick(this.__validateProps);
      }
    },
    methods: {
      __getDragging: function __getDragging(t) {
        var e,
            i = this.$refs.handle,
            s = i.offsetWidth,
            n = (this.dragOnlyRange ? -1 : 1) * this.$refs.handleMin.offsetWidth / (2 * s),
            o = {
          left: i.getBoundingClientRect().left,
          width: s,
          valueMin: this.model.min,
          valueMax: this.model.max,
          percentageMin: this.currentMinPercentage,
          percentageMax: this.currentMaxPercentage
        },
            r = si(t, o, this.$q.i18n.rtl);
        return r < this.currentMinPercentage + n ? e = Fs : r < this.currentMaxPercentage - n ? this.dragRange || this.dragOnlyRange ? (e = As, Object.assign(o, {
          offsetPercentage: r,
          offsetModel: oi(r, this.min, this.max, this.step, this.computedDecimals),
          rangeValue: o.valueMax - o.valueMin,
          rangePercentage: this.currentMaxPercentage - this.currentMinPercentage
        })) : e = this.currentMaxPercentage - r < r - this.currentMinPercentage ? Qs : Fs : e = Qs, (!this.dragOnlyRange || e === As) && (o.type = e, o);
      },
      __move: function __move(t, e) {
        void 0 === e && (e = this.dragging);
        var i,
            s = si(t, e, this.$q.i18n.rtl),
            n = oi(s, this.min, this.max, this.step, this.computedDecimals);

        switch (e.type) {
          case Fs:
            i = s <= e.percentageMax ? {
              minP: s,
              maxP: e.percentageMax,
              min: n,
              max: e.valueMax
            } : {
              minP: e.percentageMax,
              maxP: s,
              min: e.valueMax,
              max: n
            };
            break;

          case Qs:
            i = s >= e.percentageMin ? {
              minP: e.percentageMin,
              maxP: s,
              min: e.valueMin,
              max: n
            } : {
              minP: s,
              maxP: e.percentageMin,
              min: n,
              max: e.valueMin
            };
            break;

          case As:
            var o = s - e.offsetPercentage,
                r = Pt(e.percentageMin + o, 0, 1 - e.rangePercentage),
                a = n - e.offsetModel,
                l = Pt(e.valueMin + a, this.min, this.max - e.rangeValue);
            i = {
              minP: r,
              maxP: r + e.rangePercentage,
              min: parseFloat(l.toFixed(this.computedDecimals)),
              max: parseFloat((l + e.rangeValue).toFixed(this.computedDecimals))
            };
        }

        this.currentMinPercentage = i.minP, this.currentMaxPercentage = i.maxP, this.model = {
          min: i.min,
          max: i.max
        };
      },
      __end: function __end(t, e) {
        void 0 === e && (e = this.dragging), this.__move(t, e), this.currentMinPercentage = (this.model.min - this.min) / (this.max - this.min), this.currentMaxPercentage = (this.model.max - this.min) / (this.max - this.min);
      },
      __onKeyDown: function __onKeyDown(t, e) {
        var i = t.keyCode;

        if (this.editable && [37, 40, 39, 38].includes(i)) {
          F(t);
          var s = this.computedDecimals,
              n = t.ctrlKey ? 10 * this.computedStep : this.computedStep,
              o = [37, 40].includes(i) ? -n : n,
              r = s ? parseFloat((this.model[e] + o).toFixed(s)) : this.model[e] + o;
          this.model[e] = Pt(r, "min" === e ? this.min : this.model.min, "max" === e ? this.max : this.model.max), this.currentMinPercentage = (this.model.min - this.min) / (this.max - this.min), this.currentMaxPercentage = (this.model.max - this.min) / (this.max - this.min), this.__update();
        }
      },
      __onKeyUp: function __onKeyUp(t, e) {
        var i = t.keyCode;
        this.editable && [37, 40, 39, 38].includes(i) && this.__update(!0);
      },
      __validateProps: function __validateProps() {
        this.min >= this.max ? console.error("Range error: min >= max", this.$el, this.min, this.max) : ni((this.max - this.min) / this.step, this.computedDecimals) ? console.error("Range error: step must be a divisor of max - min", this.min, this.max, this.step) : ni((this.model.min - this.min) / this.step, this.computedDecimals) ? console.error("Range error: step must be a divisor of initial value.min - min", this.model.min, this.min, this.step) : ni((this.model.max - this.min) / this.step, this.computedDecimals) && console.error("Range error: step must be a divisor of initial value.max - min", this.model.max, this.max, this.step);
      },
      __getHandle: function __getHandle(t, e, i, s, n, o, r) {
        var a,
            l = this;
        return t("div", {
          ref: "handle" + i,
          staticClass: "q-slider-handle q-slider-handle-" + e,
          style: (a = {}, a[this.$q.i18n.rtl ? "right" : "left"] = 100 * n + "%", a.borderRadius = this.square ? "0" : "50%", a),
          "class": [s ? "handle-at-minimum" : null, {
            dragging: this.dragging
          }],
          attrs: {
            tabindex: this.editable ? 0 : -1
          },
          on: {
            keydown: function keydown(t) {
              return l.__onKeyDown(t, e);
            },
            keyup: function keyup(t) {
              return l.__onKeyUp(t, e);
            }
          }
        }, [this.label || this.labelAlways ? t(Ve, {
          props: {
            pointing: "down",
            square: !0,
            dense: !0,
            color: o
          },
          staticClass: "q-slider-label no-pointer-events",
          "class": {
            "label-always": this.labelAlways
          }
        }, [r]) : null, t("div", {
          staticClass: "q-slider-ring"
        })]);
      },
      __getContent: function __getContent(t) {
        var e;
        return [t("div", {
          staticClass: "q-slider-track active-track",
          style: (e = {}, e[this.$q.i18n.rtl ? "right" : "left"] = 100 * this.percentageMin + "%", e.width = this.activeTrackWidth, e),
          "class": {
            dragging: this.dragging,
            "track-draggable": this.dragRange || this.dragOnlyRange
          }
        }), this.__getHandle(t, "min", "Min", !this.fillHandleAlways && this.model.min === this.min, this.percentageMin, this.leftTooltipColor, this.leftDisplayValue), this.__getHandle(t, "max", "Max", !1, this.percentageMax, this.rightTooltipColor, this.rightDisplayValue)];
      }
    }
  },
      Vs = {
    name: "QRating",
    props: {
      value: Number,
      max: {
        type: Number,
        "default": 5
      },
      icon: String,
      color: String,
      size: String,
      readonly: Boolean,
      disable: Boolean
    },
    data: function data() {
      return {
        mouseModel: 0
      };
    },
    computed: {
      model: {
        get: function get() {
          return this.value;
        },
        set: function set(t) {
          var e = this;
          this.$emit("input", t), this.$nextTick(function () {
            JSON.stringify(t) !== JSON.stringify(e.value) && e.$emit("change", t);
          });
        }
      },
      editable: function editable() {
        return !this.readonly && !this.disable;
      },
      classes: function classes() {
        var t = [];
        return this.disable && t.push("disabled"), this.editable && t.push("editable"), this.color && t.push("text-" + this.color), t;
      }
    },
    methods: {
      set: function set(t) {
        if (this.editable) {
          var e = Pt(parseInt(t, 10), 1, this.max);
          this.model = this.model === e ? 0 : e, this.mouseModel = 0;
        }
      },
      __setHoverValue: function __setHoverValue(t) {
        this.editable && (this.mouseModel = t);
      }
    },
    render: function render(t) {
      for (var e = this, i = [], s = this.editable ? 0 : -1, n = function n(_n2) {
        i.push(t("span", {
          key: _n2,
          ref: "rt" + _n2,
          attrs: {
            tabindex: s
          },
          on: {
            keydown: function keydown(t) {
              switch (E(t)) {
                case 13:
                case 32:
                  return e.set(_n2), F(t);

                case 37:
                case 40:
                  return e.$refs["rt" + (_n2 - 1)] && e.$refs["rt" + (_n2 - 1)].focus(), F(t);

                case 39:
                case 38:
                  return e.$refs["rt" + (_n2 + 1)] && e.$refs["rt" + (_n2 + 1)].focus(), F(t);
              }
            }
          }
        }, [t(dt, {
          props: {
            name: e.icon || e.$q.icon.rating.icon
          },
          "class": {
            active: !e.mouseModel && e.model >= _n2 || e.mouseModel && e.mouseModel >= _n2,
            exselected: e.mouseModel && e.model >= _n2 && e.mouseModel < _n2,
            hovered: e.mouseModel === _n2
          },
          attrs: {
            tabindex: -1
          },
          nativeOn: {
            click: function click() {
              return e.set(_n2);
            },
            mouseover: function mouseover() {
              return e.__setHoverValue(_n2);
            },
            mouseout: function mouseout() {
              e.mouseModel = 0;
            },
            focus: function focus() {
              return e.__setHoverValue(_n2);
            },
            blur: function blur() {
              e.mouseModel = 0;
            }
          }
        })]));
      }, o = 1; o <= this.max; o++) {
        n(o);
      }

      return t("div", {
        staticClass: "q-rating row inline items-center no-wrap",
        "class": this.classes,
        style: this.size ? "font-size: " + this.size : ""
      }, i);
    }
  },
      Ws = {
    name: "QScrollArea",
    directives: {
      TouchPan: Ce
    },
    props: {
      thumbStyle: {
        type: Object,
        "default": function _default() {
          return {};
        }
      },
      contentStyle: {
        type: Object,
        "default": function _default() {
          return {};
        }
      },
      contentActiveStyle: {
        type: Object,
        "default": function _default() {
          return {};
        }
      },
      delay: {
        type: Number,
        "default": 1e3
      }
    },
    data: function data() {
      return {
        active: !1,
        hover: !1,
        containerHeight: 0,
        scrollPosition: 0,
        scrollHeight: 0
      };
    },
    computed: {
      thumbHidden: function thumbHidden() {
        return this.scrollHeight <= this.containerHeight || !this.active && !this.hover;
      },
      thumbHeight: function thumbHeight() {
        return Math.round(Pt(this.containerHeight * this.containerHeight / this.scrollHeight, 50, this.containerHeight));
      },
      style: function style() {
        var t = this.scrollPercentage * (this.containerHeight - this.thumbHeight);
        return Object.assign({}, this.thumbStyle, {
          top: t + "px",
          height: this.thumbHeight + "px"
        });
      },
      mainStyle: function mainStyle() {
        return this.thumbHidden ? this.contentStyle : this.contentActiveStyle;
      },
      scrollPercentage: function scrollPercentage() {
        var t = Pt(this.scrollPosition / (this.scrollHeight - this.containerHeight), 0, 1);
        return Math.round(1e4 * t) / 1e4;
      }
    },
    methods: {
      setScrollPosition: function setScrollPosition(t, e) {
        it(this.$refs.target, t, e);
      },
      __updateContainer: function __updateContainer(t) {
        var e = t.height;
        this.containerHeight !== e && (this.containerHeight = e, this.__setActive(!0, !0));
      },
      __updateScroll: function __updateScroll(t) {
        var e = t.position;
        this.scrollPosition !== e && (this.scrollPosition = e, this.__setActive(!0, !0));
      },
      __updateScrollHeight: function __updateScrollHeight(t) {
        var e = t.height;
        this.scrollHeight !== e && (this.scrollHeight = e, this.__setActive(!0, !0));
      },
      __panThumb: function __panThumb(t) {
        t.isFirst && (this.refPos = this.scrollPosition, this.__setActive(!0, !0), document.body.classList.add("non-selectable"), document.selection ? document.selection.empty() : window.getSelection && window.getSelection().removeAllRanges()), t.isFinal && (this.__setActive(!1), document.body.classList.remove("non-selectable"));
        var e = (this.scrollHeight - this.containerHeight) / (this.containerHeight - this.thumbHeight);
        this.$refs.target.scrollTop = this.refPos + ("down" === t.direction ? 1 : -1) * t.distance.y * e;
      },
      __panContainer: function __panContainer(t) {
        t.isFirst && (this.refPos = this.scrollPosition, this.__setActive(!0, !0)), t.isFinal && this.__setActive(!1);
        var e = this.refPos + ("down" === t.direction ? -1 : 1) * t.distance.y;
        this.$refs.target.scrollTop = e, e > 0 && e + this.containerHeight < this.scrollHeight && t.evt.preventDefault();
      },
      __mouseWheel: function __mouseWheel(t) {
        var e = this.$refs.target;
        e.scrollTop += H(t).pixelY, e.scrollTop > 0 && e.scrollTop + this.containerHeight < this.scrollHeight && t.preventDefault();
      },
      __setActive: function __setActive(t, e) {
        clearTimeout(this.timer), t !== this.active ? t ? (this.active = !0, e && this.__startTimer()) : this.active = !1 : t && this.timer && this.__startTimer();
      },
      __startTimer: function __startTimer() {
        var t = this;
        this.timer = setTimeout(function () {
          t.active = !1, t.timer = null;
        }, this.delay);
      }
    },
    render: function render(t) {
      var e = this;
      return this.$q.platform.is.desktop ? t("div", {
        staticClass: "q-scrollarea relative-position",
        on: {
          mouseenter: function mouseenter() {
            e.hover = !0;
          },
          mouseleave: function mouseleave() {
            e.hover = !1;
          }
        }
      }, [t("div", {
        ref: "target",
        staticClass: "scroll relative-position overflow-hidden fit",
        on: {
          wheel: this.__mouseWheel
        },
        directives: [{
          name: "touch-pan",
          modifiers: {
            vertical: !0,
            noMouse: !0,
            mightPrevent: !0
          },
          value: this.__panContainer
        }]
      }, [t("div", {
        staticClass: "absolute full-width",
        style: this.mainStyle
      }, [t(Wi, {
        on: {
          resize: this.__updateScrollHeight
        }
      }), this.$slots["default"]]), t(xs, {
        on: {
          scroll: this.__updateScroll
        }
      })]), t(Wi, {
        on: {
          resize: this.__updateContainer
        }
      }), t("div", {
        staticClass: "q-scrollarea-thumb absolute-right",
        style: this.style,
        "class": {
          "invisible-thumb": this.thumbHidden
        },
        directives: [{
          name: "touch-pan",
          modifiers: {
            vertical: !0,
            prevent: !0
          },
          value: this.__panThumb
        }]
      })]) : t("div", {
        staticClass: "q-scroll-area relative-position",
        style: this.contentStyle
      }, [t("div", {
        ref: "target",
        staticClass: "scroll relative-position fit"
      }, this.$slots["default"])]);
    }
  },
      Us = {
    name: "QSearch",
    mixins: [Ue, Ke],
    props: {
      value: {
        required: !0
      },
      type: String,
      debounce: {
        type: Number,
        "default": 300
      },
      icon: String,
      noIcon: Boolean,
      upperCase: Boolean,
      lowerCase: Boolean
    },
    data: function data() {
      return {
        model: this.value,
        childDebounce: !1
      };
    },
    provide: function provide() {
      var t = this,
          e = function e(_e3) {
        t.model !== _e3 && (t.model = _e3);
      };

      return {
        __inputDebounce: {
          set: e,
          setNav: e,
          setChildDebounce: function setChildDebounce(e) {
            t.childDebounce = e;
          }
        }
      };
    },
    watch: {
      value: function value(t) {
        this.model = t;
      },
      model: function model(t) {
        var e = this;
        clearTimeout(this.timer), this.value !== t && (t || 0 === t || (this.model = "number" === this.type ? null : ""), this.timer = setTimeout(function () {
          e.$emit("input", e.model);
        }, this.debounceValue));
      }
    },
    computed: {
      debounceValue: function debounceValue() {
        return this.childDebounce ? 0 : this.debounce;
      },
      computedClearValue: function computedClearValue() {
        return this.isNumber && 0 === this.clearValue ? this.clearValue : this.clearValue || ("number" === this.type ? null : "");
      },
      controlBefore: function controlBefore() {
        var t = (this.before || []).slice();
        return this.noIcon || t.unshift({
          icon: this.icon || this.$q.icon.search.icon,
          handler: this.focus
        }), t;
      },
      controlAfter: function controlAfter() {
        var t = (this.after || []).slice();
        return this.isClearable && t.push({
          icon: this.$q.icon.search["clear" + (this.isInverted ? "Inverted" : "")],
          handler: this.clear
        }), t;
      }
    },
    methods: {
      clear: function clear(t) {
        this.$refs.input.clear(t);
      }
    },
    render: function render(t) {
      var e = this;
      return t(Ui, {
        ref: "input",
        staticClass: "q-search",
        props: {
          value: this.model,
          type: this.type,
          autofocus: this.autofocus,
          placeholder: this.placeholder || this.$q.i18n.label.search,
          disable: this.disable,
          readonly: this.readonly,
          error: this.error,
          warning: this.warning,
          align: this.align,
          noParentField: this.noParentField,
          floatLabel: this.floatLabel,
          stackLabel: this.stackLabel,
          prefix: this.prefix,
          suffix: this.suffix,
          inverted: this.inverted,
          invertedLight: this.invertedLight,
          dark: this.dark,
          hideUnderline: this.hideUnderline,
          color: this.color,
          rows: this.rows,
          before: this.controlBefore,
          after: this.controlAfter,
          clearValue: this.clearValue,
          upperCase: this.upperCase,
          lowerCase: this.lowerCase
        },
        attrs: this.$attrs,
        on: {
          input: function input(t) {
            e.model = t;
          },
          focus: this.__onFocus,
          blur: this.__onBlur,
          keyup: this.__onKeyup,
          keydown: this.__onKeydown,
          click: this.__onClick,
          clear: function clear(t) {
            e.$emit("clear", t), e.__emit();
          }
        }
      }, this.$slots["default"]);
    }
  };

  function Ks(t, e) {
    return e.label.toLowerCase().indexOf(t) > -1;
  }

  var Ys = {
    name: "QSelect",
    mixins: [Ue, he],
    props: {
      filter: [Function, Boolean],
      filterPlaceholder: String,
      radio: Boolean,
      placeholder: String,
      separator: Boolean,
      value: {
        required: !0
      },
      multiple: Boolean,
      toggle: Boolean,
      chips: Boolean,
      options: {
        type: Array,
        required: !0,
        validator: function validator(t) {
          return t.every(function (t) {
            return "label" in t && "value" in t;
          });
        }
      },
      chipsColor: String,
      chipsBgColor: String,
      displayValue: String
    },
    data: function data() {
      return {
        model: this.multiple && Array.isArray(this.value) ? this.value.slice() : this.value,
        terms: "",
        focused: !1
      };
    },
    watch: {
      value: function value(t) {
        this.model = this.multiple && Array.isArray(t) ? t.slice() : t;
      },
      visibleOptions: function visibleOptions() {
        this.__keyboardCalcIndex();
      }
    },
    computed: {
      optModel: function optModel() {
        var t = this;
        if (this.multiple) return this.model.length > 0 ? this.options.map(function (e) {
          return t.model.includes(e.value);
        }) : this.options.map(function (t) {
          return !1;
        });
      },
      visibleOptions: function visibleOptions() {
        var t = this,
            e = this.options.map(function (t, e) {
          return Object.assign({}, t, {
            index: e
          });
        });

        if (this.filter && this.terms.length) {
          var i = this.terms.toLowerCase();
          e = e.filter(function (e) {
            return t.filterFn(i, e);
          });
        }

        return e;
      },
      keyboardMaxIndex: function keyboardMaxIndex() {
        return this.visibleOptions.length - 1;
      },
      filterFn: function filterFn() {
        return "boolean" == typeof this.filter ? Ks : this.filter;
      },
      actualValue: function actualValue() {
        var t = this;
        if (this.displayValue) return this.displayValue;

        if (!this.multiple) {
          var e = this.options.find(function (e) {
            return e.value === t.model;
          });
          return e ? e.label : "";
        }

        var i = this.selectedOptions.map(function (t) {
          return t.label;
        });
        return i.length ? i.join(", ") : "";
      },
      computedClearValue: function computedClearValue() {
        return this.clearValue || (this.multiple ? [] : null);
      },
      isClearable: function isClearable() {
        return this.editable && this.clearable && JSON.stringify(this.computedClearValue) !== JSON.stringify(this.model);
      },
      selectedOptions: function selectedOptions() {
        var t = this;
        if (this.multiple) return this.length > 0 ? this.options.filter(function (e) {
          return t.model.includes(e.value);
        }) : [];
      },
      hasChips: function hasChips() {
        return this.multiple && this.chips && this.length > 0;
      },
      length: function length() {
        return this.multiple ? this.model.length : [null, void 0, ""].includes(this.model) ? 0 : 1;
      },
      additionalLength: function additionalLength() {
        return this.displayValue && this.displayValue.length > 0;
      }
    },
    methods: {
      togglePopup: function togglePopup() {
        this.$refs.popover && this[this.$refs.popover.showing ? "hide" : "show"]();
      },
      show: function show() {
        if (this.__keyboardCalcIndex(), this.$refs.popover) return this.$refs.popover.show();
      },
      hide: function hide() {
        return this.$refs.popover ? this.$refs.popover.hide() : Promise.resolve();
      },
      reposition: function reposition() {
        var t = this.$refs.popover;
        t && t.showing && this.$nextTick(function () {
          return t && t.reposition();
        });
      },
      __keyboardCalcIndex: function __keyboardCalcIndex() {
        var t = this;
        this.keyboardIndex = -1;
        var e = this.multiple ? this.selectedOptions.map(function (t) {
          return t.value;
        }) : [this.model];
        this.$nextTick(function () {
          var i = void 0 === e ? -1 : Math.max(-1, t.visibleOptions.findIndex(function (t) {
            return e.includes(t.value);
          }));
          i > -1 && (t.keyboardMoveDirection = !0, setTimeout(function () {
            t.keyboardMoveDirection = !1;
          }, 500), t.__keyboardShow(i));
        });
      },
      __keyboardCustomKeyHandle: function __keyboardCustomKeyHandle(t, e) {
        switch (t) {
          case 13:
          case 32:
            this.$refs.popover.showing || this.show();
        }
      },
      __keyboardShowTrigger: function __keyboardShowTrigger() {
        this.show();
      },
      __keyboardSetSelection: function __keyboardSetSelection(t) {
        var e = this.visibleOptions[t];
        this.multiple ? this.__toggleMultiple(e.value, e.disable) : this.__singleSelect(e.value, e.disable);
      },
      __keyboardIsSelectableIndex: function __keyboardIsSelectableIndex(t) {
        return t > -1 && t < this.visibleOptions.length && !this.visibleOptions[t].disable;
      },
      __mouseEnterHandler: function __mouseEnterHandler(t, e) {
        this.keyboardMoveDirection || (this.keyboardIndex = e);
      },
      __onFocus: function __onFocus() {
        this.disable || this.focused || (this.focused = !0, this.$emit("focus"));
      },
      __onShow: function __onShow() {
        this.disable || (this.__onFocus(), this.filter && this.$refs.filter && this.$refs.filter.focus());
      },
      __onBlur: function __onBlur(t) {
        var e = this;
        this.focused && setTimeout(function () {
          var t = document.activeElement;
          e.$refs.popover && e.$refs.popover.showing && (t === document.body || e.$refs.popover.$el.contains(t)) || (e.__onClose(), e.hide());
        }, 1);
      },
      __onClose: function __onClose(t) {
        var e = this;
        this.$nextTick(function () {
          JSON.stringify(e.model) !== JSON.stringify(e.value) && e.$emit("change", e.model);
        }), this.terms = "", this.focused && (t ? this.$refs.input && this.$refs.input.$el && this.$refs.input.$el.focus() : (this.focused = !1, this.$emit("blur")));
      },
      __singleSelect: function __singleSelect(t, e) {
        e || (this.__emit(t), this.hide());
      },
      __toggleMultiple: function __toggleMultiple(t, e) {
        if (!e) {
          var i = this.model,
              s = i.indexOf(t);
          s > -1 ? this.$emit("remove", {
            index: s,
            value: i.splice(s, 1)
          }) : (this.$emit("add", {
            index: i.length,
            value: t
          }), i.push(t)), this.$emit("input", i);
        }
      },
      __emit: function __emit(t) {
        var e = this;
        this.$emit("input", t), this.$nextTick(function () {
          JSON.stringify(t) !== JSON.stringify(e.value) && e.$emit("change", t);
        });
      },
      __setModel: function __setModel(t, e) {
        this.model = t || (this.multiple ? [] : null), this.$emit("input", this.model), !e && this.$refs.popover && this.$refs.popover.showing || this.__onClose(e);
      },
      __getChipTextColor: function __getChipTextColor(t) {
        return this.chipsColor ? this.chipsColor : this.isInvertedLight ? this.invertedLight ? t || this.color : "white" : this.isInverted ? t || (this.invertedLight ? "grey-10" : this.color) : this.dark ? t || this.color : "white";
      },
      __getChipBgColor: function __getChipBgColor(t) {
        return this.chipsBgColor ? this.chipsBgColor : this.isInvertedLight ? this.invertedLight ? "grey-10" : t || this.color : this.isInverted ? this.invertedLight ? this.color : "white" : this.dark ? "white" : t || this.color;
      }
    },
    render: function render(t) {
      var e = this,
          i = [];

      if (this.hasChips) {
        var s = t("div", {
          staticClass: "col row items-center group q-input-chips",
          "class": this.alignClass
        }, this.selectedOptions.map(function (i, s) {
          return t(Ve, {
            key: s,
            props: {
              small: !0,
              closable: e.editable && !i.disable,
              color: e.__getChipBgColor(i.color),
              textColor: e.__getChipTextColor(i.color),
              icon: i.icon,
              iconRight: i.rightIcon,
              avatar: i.avatar
            },
            on: {
              hide: function hide() {
                e.__toggleMultiple(i.value, e.disable || i.disable);
              }
            },
            nativeOn: {
              click: function click(t) {
                t.stopPropagation();
              }
            }
          }, [i.label]);
        }));
        i.push(s);
      } else {
        var n = t("div", {
          staticClass: "col q-input-target ellipsis",
          "class": this.fakeInputClasses
        }, [this.fakeInputValue]);
        i.push(n);
      }

      return i.push(t(ae, {
        ref: "popover",
        staticClass: "column no-wrap",
        "class": this.dark ? "bg-dark" : null,
        props: {
          fit: !0,
          disable: !this.editable,
          anchorClick: !1
        },
        slot: "after",
        on: {
          show: this.__onShow,
          hide: function hide() {
            e.__onClose(!0);
          }
        },
        nativeOn: {
          keydown: this.__keyboardHandleKey
        }
      }, [this.filter && t(Us, {
        ref: "filter",
        staticClass: "col-auto",
        style: "padding: 10px;",
        props: {
          value: this.terms,
          placeholder: this.filterPlaceholder || this.$q.i18n.label.filter,
          debounce: 100,
          color: this.color,
          dark: this.dark,
          noParentField: !0,
          noIcon: !0
        },
        on: {
          input: function input(t) {
            e.terms = t, e.reposition();
          }
        }
      }) || void 0, this.visibleOptions.length && t(pt, {
        staticClass: "no-border scroll",
        props: {
          separator: this.separator,
          dark: this.dark
        }
      }, this.visibleOptions.map(function (i, s) {
        return t(ce, {
          key: s,
          "class": [i.disable ? "text-faded" : "cursor-pointer", s === e.keyboardIndex ? "q-select-highlight" : "", i.disable ? "" : "cursor-pointer", i.className || ""],
          props: {
            cfg: i,
            slotReplace: !0,
            active: e.multiple ? void 0 : e.value === i.value
          },
          nativeOn: {
            "!click": function click() {
              var t = e.multiple ? "__toggleMultiple" : "__singleSelect";
              e[t](i.value, i.disable);
            },
            mouseenter: function mouseenter(t) {
              !i.disable && e.__mouseEnterHandler(t, s);
            }
          }
        }, [e.multiple ? t(e.toggle ? Yi : je, {
          slot: e.toggle ? "right" : "left",
          props: {
            keepColor: !0,
            color: i.color || e.color,
            dark: e.dark,
            value: e.optModel[i.index],
            disable: i.disable,
            noFocus: !0
          }
        }) : e.radio && t(Ki, {
          slot: "left",
          props: {
            keepColor: !0,
            color: i.color || e.color,
            dark: e.dark,
            value: e.value,
            val: i.value,
            disable: i.disable,
            noFocus: !0
          }
        }) || void 0]);
      })) || void 0])), this.isClearable && i.push(t(dt, {
        slot: "after",
        staticClass: "q-if-control",
        props: {
          name: this.$q.icon.input["clear" + (this.isInverted ? "Inverted" : "")]
        },
        nativeOn: {
          click: this.clear
        }
      })), i.push(t(dt, {
        slot: "after",
        staticClass: "q-if-control",
        props: {
          name: this.$q.icon.input.dropdown
        }
      })), t(Je, {
        ref: "input",
        staticClass: "q-select",
        props: {
          prefix: this.prefix,
          suffix: this.suffix,
          stackLabel: this.stackLabel,
          floatLabel: this.floatLabel,
          error: this.error,
          warning: this.warning,
          disable: this.disable,
          readonly: this.readonly,
          inverted: this.inverted,
          invertedLight: this.invertedLight,
          dark: this.dark,
          hideUnderline: this.hideUnderline,
          before: this.before,
          after: this.after,
          color: this.color,
          noParentField: this.noParentField,
          focused: this.focused,
          focusable: !0,
          length: this.length,
          additionalLength: this.additionalLength
        },
        nativeOn: {
          click: this.togglePopup,
          focus: this.__onFocus,
          blur: this.__onBlur,
          keydown: this.__keyboardHandleKey
        }
      }, i);
    }
  },
      Js = {
    name: "QSpinnerAudio",
    mixins: [Wt],
    render: function render(t) {
      return t("svg", {
        staticClass: "q-spinner",
        "class": this.classes,
        attrs: {
          fill: "currentColor",
          width: this.size,
          height: this.size,
          viewBox: "0 0 55 80",
          xmlns: "http://www.w3.org/2000/svg"
        }
      }, [t("g", {
        attrs: {
          transform: "matrix(1 0 0 -1 0 80)"
        }
      }, [t("rect", {
        attrs: {
          width: "10",
          height: "20",
          rx: "3"
        }
      }, [t("animate", {
        attrs: {
          attributeName: "height",
          begin: "0s",
          dur: "4.3s",
          values: "20;45;57;80;64;32;66;45;64;23;66;13;64;56;34;34;2;23;76;79;20",
          calcMode: "linear",
          repeatCount: "indefinite"
        }
      })]), t("rect", {
        attrs: {
          x: "15",
          width: "10",
          height: "80",
          rx: "3"
        }
      }, [t("animate", {
        attrs: {
          attributeName: "height",
          begin: "0s",
          dur: "2s",
          values: "80;55;33;5;75;23;73;33;12;14;60;80",
          calcMode: "linear",
          repeatCount: "indefinite"
        }
      })]), t("rect", {
        attrs: {
          x: "30",
          width: "10",
          height: "50",
          rx: "3"
        }
      }, [t("animate", {
        attrs: {
          attributeName: "height",
          begin: "0s",
          dur: "1.4s",
          values: "50;34;78;23;56;23;34;76;80;54;21;50",
          calcMode: "linear",
          repeatCount: "indefinite"
        }
      })]), t("rect", {
        attrs: {
          x: "45",
          width: "10",
          height: "30",
          rx: "3"
        }
      }, [t("animate", {
        attrs: {
          attributeName: "height",
          begin: "0s",
          dur: "2s",
          values: "30;45;13;80;56;72;45;76;34;23;67;30",
          calcMode: "linear",
          repeatCount: "indefinite"
        }
      })])])]);
    }
  },
      Xs = {
    name: "QSpinnerBall",
    mixins: [Wt],
    render: function render(t) {
      return t("svg", {
        staticClass: "q-spinner",
        "class": this.classes,
        attrs: {
          stroke: "currentColor",
          width: this.size,
          height: this.size,
          viewBox: "0 0 57 57",
          xmlns: "http://www.w3.org/2000/svg"
        }
      }, [t("g", {
        attrs: {
          transform: "translate(1 1)",
          "stroke-width": "2",
          fill: "none",
          "fill-rule": "evenodd"
        }
      }, [t("circle", {
        attrs: {
          cx: "5",
          cy: "50",
          r: "5"
        }
      }, [t("animate", {
        attrs: {
          attributeName: "cy",
          begin: "0s",
          dur: "2.2s",
          values: "50;5;50;50",
          calcMode: "linear",
          repeatCount: "indefinite"
        }
      }), t("animate", {
        attrs: {
          attributeName: "cx",
          begin: "0s",
          dur: "2.2s",
          values: "5;27;49;5",
          calcMode: "linear",
          repeatCount: "indefinite"
        }
      })]), t("circle", {
        attrs: {
          cx: "27",
          cy: "5",
          r: "5"
        }
      }, [t("animate", {
        attrs: {
          attributeName: "cy",
          begin: "0s",
          dur: "2.2s",
          from: "5",
          to: "5",
          values: "5;50;50;5",
          calcMode: "linear",
          repeatCount: "indefinite"
        }
      }), t("animate", {
        attrs: {
          attributeName: "cx",
          begin: "0s",
          dur: "2.2s",
          from: "27",
          to: "27",
          values: "27;49;5;27",
          calcMode: "linear",
          repeatCount: "indefinite"
        }
      })]), t("circle", {
        attrs: {
          cx: "49",
          cy: "50",
          r: "5"
        }
      }, [t("animate", {
        attrs: {
          attributeName: "cy",
          begin: "0s",
          dur: "2.2s",
          values: "50;50;5;50",
          calcMode: "linear",
          repeatCount: "indefinite"
        }
      }), t("animate", {
        attrs: {
          attributeName: "cx",
          from: "49",
          to: "49",
          begin: "0s",
          dur: "2.2s",
          values: "49;5;27;49",
          calcMode: "linear",
          repeatCount: "indefinite"
        }
      })])])]);
    }
  },
      Gs = {
    name: "QSpinnerBars",
    mixins: [Wt],
    render: function render(t) {
      return t("svg", {
        staticClass: "q-spinner",
        "class": this.classes,
        attrs: {
          fill: "currentColor",
          width: this.size,
          height: this.size,
          viewBox: "0 0 135 140",
          xmlns: "http://www.w3.org/2000/svg"
        }
      }, [t("rect", {
        attrs: {
          y: "10",
          width: "15",
          height: "120",
          rx: "6"
        }
      }, [t("animate", {
        attrs: {
          attributeName: "height",
          begin: "0.5s",
          dur: "1s",
          values: "120;110;100;90;80;70;60;50;40;140;120",
          calcMode: "linear",
          repeatCount: "indefinite"
        }
      }), t("animate", {
        attrs: {
          attributeName: "y",
          begin: "0.5s",
          dur: "1s",
          values: "10;15;20;25;30;35;40;45;50;0;10",
          calcMode: "linear",
          repeatCount: "indefinite"
        }
      })]), t("rect", {
        attrs: {
          x: "30",
          y: "10",
          width: "15",
          height: "120",
          rx: "6"
        }
      }, [t("animate", {
        attrs: {
          attributeName: "height",
          begin: "0.25s",
          dur: "1s",
          values: "120;110;100;90;80;70;60;50;40;140;120",
          calcMode: "linear",
          repeatCount: "indefinite"
        }
      }), t("animate", {
        attrs: {
          attributeName: "y",
          begin: "0.25s",
          dur: "1s",
          values: "10;15;20;25;30;35;40;45;50;0;10",
          calcMode: "linear",
          repeatCount: "indefinite"
        }
      })]), t("rect", {
        attrs: {
          x: "60",
          width: "15",
          height: "140",
          rx: "6"
        }
      }, [t("animate", {
        attrs: {
          attributeName: "height",
          begin: "0s",
          dur: "1s",
          values: "120;110;100;90;80;70;60;50;40;140;120",
          calcMode: "linear",
          repeatCount: "indefinite"
        }
      }), t("animate", {
        attrs: {
          attributeName: "y",
          begin: "0s",
          dur: "1s",
          values: "10;15;20;25;30;35;40;45;50;0;10",
          calcMode: "linear",
          repeatCount: "indefinite"
        }
      })]), t("rect", {
        attrs: {
          x: "90",
          y: "10",
          width: "15",
          height: "120",
          rx: "6"
        }
      }, [t("animate", {
        attrs: {
          attributeName: "height",
          begin: "0.25s",
          dur: "1s",
          values: "120;110;100;90;80;70;60;50;40;140;120",
          calcMode: "linear",
          repeatCount: "indefinite"
        }
      }), t("animate", {
        attrs: {
          attributeName: "y",
          begin: "0.25s",
          dur: "1s",
          values: "10;15;20;25;30;35;40;45;50;0;10",
          calcMode: "linear",
          repeatCount: "indefinite"
        }
      })]), t("rect", {
        attrs: {
          x: "120",
          y: "10",
          width: "15",
          height: "120",
          rx: "6"
        }
      }, [t("animate", {
        attrs: {
          attributeName: "height",
          begin: "0.5s",
          dur: "1s",
          values: "120;110;100;90;80;70;60;50;40;140;120",
          calcMode: "linear",
          repeatCount: "indefinite"
        }
      }), t("animate", {
        attrs: {
          attributeName: "y",
          begin: "0.5s",
          dur: "1s",
          values: "10;15;20;25;30;35;40;45;50;0;10",
          calcMode: "linear",
          repeatCount: "indefinite"
        }
      })])]);
    }
  },
      Zs = {
    name: "QSpinnerCircles",
    mixins: [Wt],
    render: function render(t) {
      return t("svg", {
        staticClass: "q-spinner",
        "class": this.classes,
        attrs: {
          fill: "currentColor",
          width: this.size,
          height: this.size,
          viewBox: "0 0 135 135",
          xmlns: "http://www.w3.org/2000/svg"
        }
      }, [t("path", {
        attrs: {
          d: "M67.447 58c5.523 0 10-4.477 10-10s-4.477-10-10-10-10 4.477-10 10 4.477 10 10 10zm9.448 9.447c0 5.523 4.477 10 10 10 5.522 0 10-4.477 10-10s-4.478-10-10-10c-5.523 0-10 4.477-10 10zm-9.448 9.448c-5.523 0-10 4.477-10 10 0 5.522 4.477 10 10 10s10-4.478 10-10c0-5.523-4.477-10-10-10zM58 67.447c0-5.523-4.477-10-10-10s-10 4.477-10 10 4.477 10 10 10 10-4.477 10-10z"
        }
      }, [t("animateTransform", {
        attrs: {
          attributeName: "transform",
          type: "rotate",
          from: "0 67 67",
          to: "-360 67 67",
          dur: "2.5s",
          repeatCount: "indefinite"
        }
      })]), t("path", {
        attrs: {
          d: "M28.19 40.31c6.627 0 12-5.374 12-12 0-6.628-5.373-12-12-12-6.628 0-12 5.372-12 12 0 6.626 5.372 12 12 12zm30.72-19.825c4.686 4.687 12.284 4.687 16.97 0 4.686-4.686 4.686-12.284 0-16.97-4.686-4.687-12.284-4.687-16.97 0-4.687 4.686-4.687 12.284 0 16.97zm35.74 7.705c0 6.627 5.37 12 12 12 6.626 0 12-5.373 12-12 0-6.628-5.374-12-12-12-6.63 0-12 5.372-12 12zm19.822 30.72c-4.686 4.686-4.686 12.284 0 16.97 4.687 4.686 12.285 4.686 16.97 0 4.687-4.686 4.687-12.284 0-16.97-4.685-4.687-12.283-4.687-16.97 0zm-7.704 35.74c-6.627 0-12 5.37-12 12 0 6.626 5.373 12 12 12s12-5.374 12-12c0-6.63-5.373-12-12-12zm-30.72 19.822c-4.686-4.686-12.284-4.686-16.97 0-4.686 4.687-4.686 12.285 0 16.97 4.686 4.687 12.284 4.687 16.97 0 4.687-4.685 4.687-12.283 0-16.97zm-35.74-7.704c0-6.627-5.372-12-12-12-6.626 0-12 5.373-12 12s5.374 12 12 12c6.628 0 12-5.373 12-12zm-19.823-30.72c4.687-4.686 4.687-12.284 0-16.97-4.686-4.686-12.284-4.686-16.97 0-4.687 4.686-4.687 12.284 0 16.97 4.686 4.687 12.284 4.687 16.97 0z"
        }
      }, [t("animateTransform", {
        attrs: {
          attributeName: "transform",
          type: "rotate",
          from: "0 67 67",
          to: "360 67 67",
          dur: "8s",
          repeatCount: "indefinite"
        }
      })])]);
    }
  },
      tn = {
    name: "QSpinnerComment",
    mixins: [Wt],
    render: function render(t) {
      return t("svg", {
        staticClass: "q-spinner",
        "class": this.classes,
        attrs: {
          width: this.size,
          height: this.size,
          xmlns: "http://www.w3.org/2000/svg",
          viewBox: "0 0 100 100",
          preserveAspectRatio: "xMidYMid"
        }
      }, [t("rect", {
        attrs: {
          x: "0",
          y: "0",
          width: "100",
          height: "100",
          fill: "none"
        }
      }), t("path", {
        attrs: {
          d: "M78,19H22c-6.6,0-12,5.4-12,12v31c0,6.6,5.4,12,12,12h37.2c0.4,3,1.8,5.6,3.7,7.6c2.4,2.5,5.1,4.1,9.1,4 c-1.4-2.1-2-7.2-2-10.3c0-0.4,0-0.8,0-1.3h8c6.6,0,12-5.4,12-12V31C90,24.4,84.6,19,78,19z",
          fill: "currentColor"
        }
      }), t("circle", {
        attrs: {
          cx: "30",
          cy: "47",
          r: "5",
          fill: "#fff"
        }
      }, [t("animate", {
        attrs: {
          attributeName: "opacity",
          from: "0",
          to: "1",
          values: "0;1;1",
          keyTimes: "0;0.2;1",
          dur: "1s",
          repeatCount: "indefinite"
        }
      })]), t("circle", {
        attrs: {
          cx: "50",
          cy: "47",
          r: "5",
          fill: "#fff"
        }
      }, [t("animate", {
        attrs: {
          attributeName: "opacity",
          from: "0",
          to: "1",
          values: "0;0;1;1",
          keyTimes: "0;0.2;0.4;1",
          dur: "1s",
          repeatCount: "indefinite"
        }
      })]), t("circle", {
        attrs: {
          cx: "70",
          cy: "47",
          r: "5",
          fill: "#fff"
        }
      }, [t("animate", {
        attrs: {
          attributeName: "opacity",
          from: "0",
          to: "1",
          values: "0;0;1;1",
          keyTimes: "0;0.4;0.6;1",
          dur: "1s",
          repeatCount: "indefinite"
        }
      })])]);
    }
  },
      en = {
    name: "QSpinnerCube",
    mixins: [Wt],
    render: function render(t) {
      return t("svg", {
        staticClass: "q-spinner",
        "class": this.classes,
        attrs: {
          width: this.size,
          height: this.size,
          xmlns: "http://www.w3.org/2000/svg",
          viewBox: "0 0 100 100",
          preserveAspectRatio: "xMidYMid"
        }
      }, [t("rect", {
        attrs: {
          x: "0",
          y: "0",
          width: "100",
          height: "100",
          fill: "none"
        }
      }), t("g", {
        attrs: {
          transform: "translate(25 25)"
        }
      }, [t("rect", {
        attrs: {
          x: "-20",
          y: "-20",
          width: "40",
          height: "40",
          fill: "currentColor",
          opacity: "0.9"
        }
      }, [t("animateTransform", {
        attrs: {
          attributeName: "transform",
          type: "scale",
          from: "1.5",
          to: "1",
          repeatCount: "indefinite",
          begin: "0s",
          dur: "1s",
          calcMode: "spline",
          keySplines: "0.2 0.8 0.2 0.8",
          keyTimes: "0;1"
        }
      })])]), t("g", {
        attrs: {
          transform: "translate(75 25)"
        }
      }, [t("rect", {
        attrs: {
          x: "-20",
          y: "-20",
          width: "40",
          height: "40",
          fill: "currentColor",
          opacity: "0.8"
        }
      }, [t("animateTransform", {
        attrs: {
          attributeName: "transform",
          type: "scale",
          from: "1.5",
          to: "1",
          repeatCount: "indefinite",
          begin: "0.1s",
          dur: "1s",
          calcMode: "spline",
          keySplines: "0.2 0.8 0.2 0.8",
          keyTimes: "0;1"
        }
      })])]), t("g", {
        attrs: {
          transform: "translate(25 75)"
        }
      }, [t("rect", {
        staticClass: "cube",
        attrs: {
          x: "-20",
          y: "-20",
          width: "40",
          height: "40",
          fill: "currentColor",
          opacity: "0.7"
        }
      }, [t("animateTransform", {
        attrs: {
          attributeName: "transform",
          type: "scale",
          from: "1.5",
          to: "1",
          repeatCount: "indefinite",
          begin: "0.3s",
          dur: "1s",
          calcMode: "spline",
          keySplines: "0.2 0.8 0.2 0.8",
          keyTimes: "0;1"
        }
      })])]), t("g", {
        attrs: {
          transform: "translate(75 75)"
        }
      }, [t("rect", {
        staticClass: "cube",
        attrs: {
          x: "-20",
          y: "-20",
          width: "40",
          height: "40",
          fill: "currentColor",
          opacity: "0.6"
        }
      }, [t("animateTransform", {
        attrs: {
          attributeName: "transform",
          type: "scale",
          from: "1.5",
          to: "1",
          repeatCount: "indefinite",
          begin: "0.2s",
          dur: "1s",
          calcMode: "spline",
          keySplines: "0.2 0.8 0.2 0.8",
          keyTimes: "0;1"
        }
      })])])]);
    }
  },
      sn = {
    name: "QSpinnerDots",
    mixins: [Wt],
    render: function render(t) {
      return t("svg", {
        staticClass: "q-spinner",
        "class": this.classes,
        attrs: {
          fill: "currentColor",
          width: this.size,
          height: this.size,
          viewBox: "0 0 120 30",
          xmlns: "http://www.w3.org/2000/svg"
        }
      }, [t("circle", {
        attrs: {
          cx: "15",
          cy: "15",
          r: "15"
        }
      }, [t("animate", {
        attrs: {
          attributeName: "r",
          from: "15",
          to: "15",
          begin: "0s",
          dur: "0.8s",
          values: "15;9;15",
          calcMode: "linear",
          repeatCount: "indefinite"
        }
      }), t("animate", {
        attrs: {
          attributeName: "fill-opacity",
          from: "1",
          to: "1",
          begin: "0s",
          dur: "0.8s",
          values: "1;.5;1",
          calcMode: "linear",
          repeatCount: "indefinite"
        }
      })]), t("circle", {
        attrs: {
          cx: "60",
          cy: "15",
          r: "9",
          "fill-opacity": ".3"
        }
      }, [t("animate", {
        attrs: {
          attributeName: "r",
          from: "9",
          to: "9",
          begin: "0s",
          dur: "0.8s",
          values: "9;15;9",
          calcMode: "linear",
          repeatCount: "indefinite"
        }
      }), t("animate", {
        attrs: {
          attributeName: "fill-opacity",
          from: ".5",
          to: ".5",
          begin: "0s",
          dur: "0.8s",
          values: ".5;1;.5",
          calcMode: "linear",
          repeatCount: "indefinite"
        }
      })]), t("circle", {
        attrs: {
          cx: "105",
          cy: "15",
          r: "15"
        }
      }, [t("animate", {
        attrs: {
          attributeName: "r",
          from: "15",
          to: "15",
          begin: "0s",
          dur: "0.8s",
          values: "15;9;15",
          calcMode: "linear",
          repeatCount: "indefinite"
        }
      }), t("animate", {
        attrs: {
          attributeName: "fill-opacity",
          from: "1",
          to: "1",
          begin: "0s",
          dur: "0.8s",
          values: "1;.5;1",
          calcMode: "linear",
          repeatCount: "indefinite"
        }
      })])]);
    }
  },
      nn = {
    name: "QSpinnerFacebook",
    mixins: [Wt],
    render: function render(t) {
      return t("svg", {
        staticClass: "q-spinner",
        "class": this.classes,
        attrs: {
          width: this.size,
          height: this.size,
          viewBox: "0 0 100 100",
          xmlns: "http://www.w3.org/2000/svg",
          preserveAspectRatio: "xMidYMid"
        }
      }, [t("g", {
        attrs: {
          transform: "translate(20 50)"
        }
      }, [t("rect", {
        attrs: {
          x: "-10",
          y: "-30",
          width: "20",
          height: "60",
          fill: "currentColor",
          opacity: "0.6"
        }
      }, [t("animateTransform", {
        attrs: {
          attributeName: "transform",
          type: "scale",
          from: "2",
          to: "1",
          begin: "0s",
          repeatCount: "indefinite",
          dur: "1s",
          calcMode: "spline",
          keySplines: "0.1 0.9 0.4 1",
          keyTimes: "0;1",
          values: "2;1"
        }
      })])]), t("g", {
        attrs: {
          transform: "translate(50 50)"
        }
      }, [t("rect", {
        attrs: {
          x: "-10",
          y: "-30",
          width: "20",
          height: "60",
          fill: "currentColor",
          opacity: "0.8"
        }
      }, [t("animateTransform", {
        attrs: {
          attributeName: "transform",
          type: "scale",
          from: "2",
          to: "1",
          begin: "0.1s",
          repeatCount: "indefinite",
          dur: "1s",
          calcMode: "spline",
          keySplines: "0.1 0.9 0.4 1",
          keyTimes: "0;1",
          values: "2;1"
        }
      })])]), t("g", {
        attrs: {
          transform: "translate(80 50)"
        }
      }, [t("rect", {
        attrs: {
          x: "-10",
          y: "-30",
          width: "20",
          height: "60",
          fill: "currentColor",
          opacity: "0.9"
        }
      }, [t("animateTransform", {
        attrs: {
          attributeName: "transform",
          type: "scale",
          from: "2",
          to: "1",
          begin: "0.2s",
          repeatCount: "indefinite",
          dur: "1s",
          calcMode: "spline",
          keySplines: "0.1 0.9 0.4 1",
          keyTimes: "0;1",
          values: "2;1"
        }
      })])])]);
    }
  },
      on = {
    name: "QSpinnerGears",
    mixins: [Wt],
    render: function render(t) {
      return t("svg", {
        staticClass: "q-spinner",
        "class": this.classes,
        attrs: {
          width: this.size,
          height: this.size,
          viewBox: "0 0 100 100",
          preserveAspectRatio: "xMidYMid",
          xmlns: "http://www.w3.org/2000/svg"
        }
      }, [t("g", {
        attrs: {
          transform: "translate(-20,-20)"
        }
      }, [t("path", {
        attrs: {
          d: "M79.9,52.6C80,51.8,80,50.9,80,50s0-1.8-0.1-2.6l-5.1-0.4c-0.3-2.4-0.9-4.6-1.8-6.7l4.2-2.9c-0.7-1.6-1.6-3.1-2.6-4.5 L70,35c-1.4-1.9-3.1-3.5-4.9-4.9l2.2-4.6c-1.4-1-2.9-1.9-4.5-2.6L59.8,27c-2.1-0.9-4.4-1.5-6.7-1.8l-0.4-5.1C51.8,20,50.9,20,50,20 s-1.8,0-2.6,0.1l-0.4,5.1c-2.4,0.3-4.6,0.9-6.7,1.8l-2.9-4.1c-1.6,0.7-3.1,1.6-4.5,2.6l2.1,4.6c-1.9,1.4-3.5,3.1-5,4.9l-4.5-2.1 c-1,1.4-1.9,2.9-2.6,4.5l4.1,2.9c-0.9,2.1-1.5,4.4-1.8,6.8l-5,0.4C20,48.2,20,49.1,20,50s0,1.8,0.1,2.6l5,0.4 c0.3,2.4,0.9,4.7,1.8,6.8l-4.1,2.9c0.7,1.6,1.6,3.1,2.6,4.5l4.5-2.1c1.4,1.9,3.1,3.5,5,4.9l-2.1,4.6c1.4,1,2.9,1.9,4.5,2.6l2.9-4.1 c2.1,0.9,4.4,1.5,6.7,1.8l0.4,5.1C48.2,80,49.1,80,50,80s1.8,0,2.6-0.1l0.4-5.1c2.3-0.3,4.6-0.9,6.7-1.8l2.9,4.2 c1.6-0.7,3.1-1.6,4.5-2.6L65,69.9c1.9-1.4,3.5-3,4.9-4.9l4.6,2.2c1-1.4,1.9-2.9,2.6-4.5L73,59.8c0.9-2.1,1.5-4.4,1.8-6.7L79.9,52.6 z M50,65c-8.3,0-15-6.7-15-15c0-8.3,6.7-15,15-15s15,6.7,15,15C65,58.3,58.3,65,50,65z",
          fill: "currentColor"
        }
      }, [t("animateTransform", {
        attrs: {
          attributeName: "transform",
          type: "rotate",
          from: "90 50 50",
          to: "0 50 50",
          dur: "1s",
          repeatCount: "indefinite"
        }
      })])]), t("g", {
        attrs: {
          transform: "translate(20,20) rotate(15 50 50)"
        }
      }, [t("path", {
        attrs: {
          d: "M79.9,52.6C80,51.8,80,50.9,80,50s0-1.8-0.1-2.6l-5.1-0.4c-0.3-2.4-0.9-4.6-1.8-6.7l4.2-2.9c-0.7-1.6-1.6-3.1-2.6-4.5 L70,35c-1.4-1.9-3.1-3.5-4.9-4.9l2.2-4.6c-1.4-1-2.9-1.9-4.5-2.6L59.8,27c-2.1-0.9-4.4-1.5-6.7-1.8l-0.4-5.1C51.8,20,50.9,20,50,20 s-1.8,0-2.6,0.1l-0.4,5.1c-2.4,0.3-4.6,0.9-6.7,1.8l-2.9-4.1c-1.6,0.7-3.1,1.6-4.5,2.6l2.1,4.6c-1.9,1.4-3.5,3.1-5,4.9l-4.5-2.1 c-1,1.4-1.9,2.9-2.6,4.5l4.1,2.9c-0.9,2.1-1.5,4.4-1.8,6.8l-5,0.4C20,48.2,20,49.1,20,50s0,1.8,0.1,2.6l5,0.4 c0.3,2.4,0.9,4.7,1.8,6.8l-4.1,2.9c0.7,1.6,1.6,3.1,2.6,4.5l4.5-2.1c1.4,1.9,3.1,3.5,5,4.9l-2.1,4.6c1.4,1,2.9,1.9,4.5,2.6l2.9-4.1 c2.1,0.9,4.4,1.5,6.7,1.8l0.4,5.1C48.2,80,49.1,80,50,80s1.8,0,2.6-0.1l0.4-5.1c2.3-0.3,4.6-0.9,6.7-1.8l2.9,4.2 c1.6-0.7,3.1-1.6,4.5-2.6L65,69.9c1.9-1.4,3.5-3,4.9-4.9l4.6,2.2c1-1.4,1.9-2.9,2.6-4.5L73,59.8c0.9-2.1,1.5-4.4,1.8-6.7L79.9,52.6 z M50,65c-8.3,0-15-6.7-15-15c0-8.3,6.7-15,15-15s15,6.7,15,15C65,58.3,58.3,65,50,65z",
          fill: "currentColor"
        }
      }, [t("animateTransform", {
        attrs: {
          attributeName: "transform",
          type: "rotate",
          from: "0 50 50",
          to: "90 50 50",
          dur: "1s",
          repeatCount: "indefinite"
        }
      })])])]);
    }
  },
      rn = {
    name: "QSpinnerGrid",
    mixins: [Wt],
    render: function render(t) {
      return t("svg", {
        staticClass: "q-spinner",
        "class": this.classes,
        attrs: {
          fill: "currentColor",
          width: this.size,
          height: this.size,
          viewBox: "0 0 105 105",
          xmlns: "http://www.w3.org/2000/svg"
        }
      }, [t("circle", {
        attrs: {
          cx: "12.5",
          cy: "12.5",
          r: "12.5"
        }
      }, [t("animate", {
        attrs: {
          attributeName: "fill-opacity",
          begin: "0s",
          dur: "1s",
          values: "1;.2;1",
          calcMode: "linear",
          repeatCount: "indefinite"
        }
      })]), t("circle", {
        attrs: {
          cx: "12.5",
          cy: "52.5",
          r: "12.5",
          "fill-opacity": ".5"
        }
      }, [t("animate", {
        attrs: {
          attributeName: "fill-opacity",
          begin: "100ms",
          dur: "1s",
          values: "1;.2;1",
          calcMode: "linear",
          repeatCount: "indefinite"
        }
      })]), t("circle", {
        attrs: {
          cx: "52.5",
          cy: "12.5",
          r: "12.5"
        }
      }, [t("animate", {
        attrs: {
          attributeName: "fill-opacity",
          begin: "300ms",
          dur: "1s",
          values: "1;.2;1",
          calcMode: "linear",
          repeatCount: "indefinite"
        }
      })]), t("circle", {
        attrs: {
          cx: "52.5",
          cy: "52.5",
          r: "12.5"
        }
      }, [t("animate", {
        attrs: {
          attributeName: "fill-opacity",
          begin: "600ms",
          dur: "1s",
          values: "1;.2;1",
          calcMode: "linear",
          repeatCount: "indefinite"
        }
      })]), t("circle", {
        attrs: {
          cx: "92.5",
          cy: "12.5",
          r: "12.5"
        }
      }, [t("animate", {
        attrs: {
          attributeName: "fill-opacity",
          begin: "800ms",
          dur: "1s",
          values: "1;.2;1",
          calcMode: "linear",
          repeatCount: "indefinite"
        }
      })]), t("circle", {
        attrs: {
          cx: "92.5",
          cy: "52.5",
          r: "12.5"
        }
      }, [t("animate", {
        attrs: {
          attributeName: "fill-opacity",
          begin: "400ms",
          dur: "1s",
          values: "1;.2;1",
          calcMode: "linear",
          repeatCount: "indefinite"
        }
      })]), t("circle", {
        attrs: {
          cx: "12.5",
          cy: "92.5",
          r: "12.5"
        }
      }, [t("animate", {
        attrs: {
          attributeName: "fill-opacity",
          begin: "700ms",
          dur: "1s",
          values: "1;.2;1",
          calcMode: "linear",
          repeatCount: "indefinite"
        }
      })]), t("circle", {
        attrs: {
          cx: "52.5",
          cy: "92.5",
          r: "12.5"
        }
      }, [t("animate", {
        attrs: {
          attributeName: "fill-opacity",
          begin: "500ms",
          dur: "1s",
          values: "1;.2;1",
          calcMode: "linear",
          repeatCount: "indefinite"
        }
      })]), t("circle", {
        attrs: {
          cx: "92.5",
          cy: "92.5",
          r: "12.5"
        }
      }, [t("animate", {
        attrs: {
          attributeName: "fill-opacity",
          begin: "200ms",
          dur: "1s",
          values: "1;.2;1",
          calcMode: "linear",
          repeatCount: "indefinite"
        }
      })])]);
    }
  },
      an = {
    name: "QSpinnerHearts",
    mixins: [Wt],
    render: function render(t) {
      return t("svg", {
        staticClass: "q-spinner",
        "class": this.classes,
        attrs: {
          fill: "currentColor",
          width: this.size,
          height: this.size,
          viewBox: "0 0 140 64",
          xmlns: "http://www.w3.org/2000/svg"
        }
      }, [t("path", {
        attrs: {
          d: "M30.262 57.02L7.195 40.723c-5.84-3.976-7.56-12.06-3.842-18.063 3.715-6 11.467-7.65 17.306-3.68l4.52 3.76 2.6-5.274c3.716-6.002 11.47-7.65 17.304-3.68 5.84 3.97 7.56 12.054 3.842 18.062L34.49 56.118c-.897 1.512-2.793 1.915-4.228.9z",
          "fill-opacity": ".5"
        }
      }, [t("animate", {
        attrs: {
          attributeName: "fill-opacity",
          begin: "0s",
          dur: "1.4s",
          values: "0.5;1;0.5",
          calcMode: "linear",
          repeatCount: "indefinite"
        }
      })]), t("path", {
        attrs: {
          d: "M105.512 56.12l-14.44-24.272c-3.716-6.008-1.996-14.093 3.843-18.062 5.835-3.97 13.588-2.322 17.306 3.68l2.6 5.274 4.52-3.76c5.84-3.97 13.593-2.32 17.308 3.68 3.718 6.003 1.998 14.088-3.842 18.064L109.74 57.02c-1.434 1.014-3.33.61-4.228-.9z",
          "fill-opacity": ".5"
        }
      }, [t("animate", {
        attrs: {
          attributeName: "fill-opacity",
          begin: "0.7s",
          dur: "1.4s",
          values: "0.5;1;0.5",
          calcMode: "linear",
          repeatCount: "indefinite"
        }
      })]), t("path", {
        attrs: {
          d: "M67.408 57.834l-23.01-24.98c-5.864-6.15-5.864-16.108 0-22.248 5.86-6.14 15.37-6.14 21.234 0L70 16.168l4.368-5.562c5.863-6.14 15.375-6.14 21.235 0 5.863 6.14 5.863 16.098 0 22.247l-23.007 24.98c-1.43 1.556-3.757 1.556-5.188 0z"
        }
      })]);
    }
  },
      ln = {
    name: "QSpinnerHourglass",
    mixins: [Wt],
    render: function render(t) {
      return t("svg", {
        staticClass: "q-spinner",
        "class": this.classes,
        attrs: {
          width: this.size,
          height: this.size,
          viewBox: "0 0 100 100",
          preserveAspectRatio: "xMidYMid",
          xmlns: "http://www.w3.org/2000/svg"
        }
      }, [t("g", [t("path", {
        staticClass: "glass",
        attrs: {
          fill: "none",
          stroke: "currentColor",
          "stroke-width": "5",
          "stroke-miterlimit": "10",
          d: "M58.4,51.7c-0.9-0.9-1.4-2-1.4-2.3s0.5-0.4,1.4-1.4 C70.8,43.8,79.8,30.5,80,15.5H70H30H20c0.2,15,9.2,28.1,21.6,32.3c0.9,0.9,1.4,1.2,1.4,1.5s-0.5,1.6-1.4,2.5 C29.2,56.1,20.2,69.5,20,85.5h10h40h10C79.8,69.5,70.8,55.9,58.4,51.7z"
        }
      }), t("clipPath", {
        attrs: {
          id: "uil-hourglass-clip1"
        }
      }, [t("rect", {
        staticClass: "clip",
        attrs: {
          x: "15",
          y: "20",
          width: "70",
          height: "25"
        }
      }, [t("animate", {
        attrs: {
          attributeName: "height",
          from: "25",
          to: "0",
          dur: "1s",
          repeatCount: "indefinite",
          vlaues: "25;0;0",
          keyTimes: "0;0.5;1"
        }
      }), t("animate", {
        attrs: {
          attributeName: "y",
          from: "20",
          to: "45",
          dur: "1s",
          repeatCount: "indefinite",
          vlaues: "20;45;45",
          keyTimes: "0;0.5;1"
        }
      })])]), t("clipPath", {
        attrs: {
          id: "uil-hourglass-clip2"
        }
      }, [t("rect", {
        staticClass: "clip",
        attrs: {
          x: "15",
          y: "55",
          width: "70",
          height: "25"
        }
      }, [t("animate", {
        attrs: {
          attributeName: "height",
          from: "0",
          to: "25",
          dur: "1s",
          repeatCount: "indefinite",
          vlaues: "0;25;25",
          keyTimes: "0;0.5;1"
        }
      }), t("animate", {
        attrs: {
          attributeName: "y",
          from: "80",
          to: "55",
          dur: "1s",
          repeatCount: "indefinite",
          vlaues: "80;55;55",
          keyTimes: "0;0.5;1"
        }
      })])]), t("path", {
        staticClass: "sand",
        attrs: {
          d: "M29,23c3.1,11.4,11.3,19.5,21,19.5S67.9,34.4,71,23H29z",
          "clip-path": "url(#uil-hourglass-clip1)",
          fill: "currentColor"
        }
      }), t("path", {
        staticClass: "sand",
        attrs: {
          d: "M71.6,78c-3-11.6-11.5-20-21.5-20s-18.5,8.4-21.5,20H71.6z",
          "clip-path": "url(#uil-hourglass-clip2)",
          fill: "currentColor"
        }
      }), t("animateTransform", {
        attrs: {
          attributeName: "transform",
          type: "rotate",
          from: "0 50 50",
          to: "180 50 50",
          repeatCount: "indefinite",
          dur: "1s",
          values: "0 50 50;0 50 50;180 50 50",
          keyTimes: "0;0.7;1"
        }
      })])]);
    }
  },
      cn = {
    name: "QSpinnerInfinity",
    mixins: [Wt],
    render: function render(t) {
      return t("svg", {
        staticClass: "q-spinner",
        "class": this.classes,
        attrs: {
          width: this.size,
          height: this.size,
          viewBox: "0 0 100 100",
          preserveAspectRatio: "xMidYMid"
        }
      }, [t("path", {
        attrs: {
          d: "M24.3,30C11.4,30,5,43.3,5,50s6.4,20,19.3,20c19.3,0,32.1-40,51.4-40C88.6,30,95,43.3,95,50s-6.4,20-19.3,20C56.4,70,43.6,30,24.3,30z",
          fill: "none",
          stroke: "currentColor",
          "stroke-width": "8",
          "stroke-dasharray": "10.691205342610678 10.691205342610678",
          "stroke-dashoffset": "0"
        }
      }, [t("animate", {
        attrs: {
          attributeName: "stroke-dashoffset",
          from: "0",
          to: "21.382410685221355",
          begin: "0",
          dur: "2s",
          repeatCount: "indefinite",
          fill: "freeze"
        }
      })])]);
    }
  },
      hn = {
    name: "QSpinnerIos",
    mixins: [Wt],
    render: function render(t) {
      return t("svg", {
        staticClass: "q-spinner",
        "class": this.classes,
        attrs: {
          width: this.size,
          height: this.size,
          stroke: "currentColor",
          fill: "currentColor",
          viewBox: "0 0 64 64"
        }
      }, [t("g", {
        attrs: {
          "stroke-width": "4",
          "stroke-linecap": "round"
        }
      }, [t("line", {
        attrs: {
          y1: "17",
          y2: "29",
          transform: "translate(32,32) rotate(180)"
        }
      }, [t("animate", {
        attrs: {
          attributeName: "stroke-opacity",
          dur: "750ms",
          values: "1;.85;.7;.65;.55;.45;.35;.25;.15;.1;0;1",
          repeatCount: "indefinite"
        }
      })]), t("line", {
        attrs: {
          y1: "17",
          y2: "29",
          transform: "translate(32,32) rotate(210)"
        }
      }, [t("animate", {
        attrs: {
          attributeName: "stroke-opacity",
          dur: "750ms",
          values: "0;1;.85;.7;.65;.55;.45;.35;.25;.15;.1;0",
          repeatCount: "indefinite"
        }
      })]), t("line", {
        attrs: {
          y1: "17",
          y2: "29",
          transform: "translate(32,32) rotate(240)"
        }
      }, [t("animate", {
        attrs: {
          attributeName: "stroke-opacity",
          dur: "750ms",
          values: ".1;0;1;.85;.7;.65;.55;.45;.35;.25;.15;.1",
          repeatCount: "indefinite"
        }
      })]), t("line", {
        attrs: {
          y1: "17",
          y2: "29",
          transform: "translate(32,32) rotate(270)"
        }
      }, [t("animate", {
        attrs: {
          attributeName: "stroke-opacity",
          dur: "750ms",
          values: ".15;.1;0;1;.85;.7;.65;.55;.45;.35;.25;.15",
          repeatCount: "indefinite"
        }
      })]), t("line", {
        attrs: {
          y1: "17",
          y2: "29",
          transform: "translate(32,32) rotate(300)"
        }
      }, [t("animate", {
        attrs: {
          attributeName: "stroke-opacity",
          dur: "750ms",
          values: ".25;.15;.1;0;1;.85;.7;.65;.55;.45;.35;.25",
          repeatCount: "indefinite"
        }
      })]), t("line", {
        attrs: {
          y1: "17",
          y2: "29",
          transform: "translate(32,32) rotate(330)"
        }
      }, [t("animate", {
        attrs: {
          attributeName: "stroke-opacity",
          dur: "750ms",
          values: ".35;.25;.15;.1;0;1;.85;.7;.65;.55;.45;.35",
          repeatCount: "indefinite"
        }
      })]), t("line", {
        attrs: {
          y1: "17",
          y2: "29",
          transform: "translate(32,32) rotate(0)"
        }
      }, [t("animate", {
        attrs: {
          attributeName: "stroke-opacity",
          dur: "750ms",
          values: ".45;.35;.25;.15;.1;0;1;.85;.7;.65;.55;.45",
          repeatCount: "indefinite"
        }
      })]), t("line", {
        attrs: {
          y1: "17",
          y2: "29",
          transform: "translate(32,32) rotate(30)"
        }
      }, [t("animate", {
        attrs: {
          attributeName: "stroke-opacity",
          dur: "750ms",
          values: ".55;.45;.35;.25;.15;.1;0;1;.85;.7;.65;.55",
          repeatCount: "indefinite"
        }
      })]), t("line", {
        attrs: {
          y1: "17",
          y2: "29",
          transform: "translate(32,32) rotate(60)"
        }
      }, [t("animate", {
        attrs: {
          attributeName: "stroke-opacity",
          dur: "750ms",
          values: ".65;.55;.45;.35;.25;.15;.1;0;1;.85;.7;.65",
          repeatCount: "indefinite"
        }
      })]), t("line", {
        attrs: {
          y1: "17",
          y2: "29",
          transform: "translate(32,32) rotate(90)"
        }
      }, [t("animate", {
        attrs: {
          attributeName: "stroke-opacity",
          dur: "750ms",
          values: ".7;.65;.55;.45;.35;.25;.15;.1;0;1;.85;.7",
          repeatCount: "indefinite"
        }
      })]), t("line", {
        attrs: {
          y1: "17",
          y2: "29",
          transform: "translate(32,32) rotate(120)"
        }
      }, [t("animate", {
        attrs: {
          attributeName: "stroke-opacity",
          dur: "750ms",
          values: ".85;.7;.65;.55;.45;.35;.25;.15;.1;0;1;.85",
          repeatCount: "indefinite"
        }
      })]), t("line", {
        attrs: {
          y1: "17",
          y2: "29",
          transform: "translate(32,32) rotate(150)"
        }
      }, [t("animate", {
        attrs: {
          attributeName: "stroke-opacity",
          dur: "750ms",
          values: "1;.85;.7;.65;.55;.45;.35;.25;.15;.1;0;1",
          repeatCount: "indefinite"
        }
      })])])]);
    }
  },
      un = {
    name: "QSpinnerOval",
    mixins: [Wt],
    render: function render(t) {
      return t("svg", {
        staticClass: "q-spinner",
        "class": this.classes,
        attrs: {
          stroke: "currentColor",
          width: this.size,
          height: this.size,
          viewBox: "0 0 38 38",
          xmlns: "http://www.w3.org/2000/svg"
        }
      }, [t("g", {
        attrs: {
          transform: "translate(1 1)",
          "stroke-width": "2",
          fill: "none",
          "fill-rule": "evenodd"
        }
      }, [t("circle", {
        attrs: {
          "stroke-opacity": ".5",
          cx: "18",
          cy: "18",
          r: "18"
        }
      }), t("path", {
        attrs: {
          d: "M36 18c0-9.94-8.06-18-18-18"
        }
      }, [t("animateTransform", {
        attrs: {
          attributeName: "transform",
          type: "rotate",
          from: "0 18 18",
          to: "360 18 18",
          dur: "1s",
          repeatCount: "indefinite"
        }
      })])])]);
    }
  },
      dn = {
    name: "QSpinnerPie",
    mixins: [Wt],
    render: function render(t) {
      return t("svg", {
        staticClass: "q-spinner",
        "class": this.classes,
        attrs: {
          width: this.size,
          height: this.size,
          viewBox: "0 0 100 100",
          preserveAspectRatio: "xMidYMid",
          xmlns: "http://www.w3.org/2000/svg"
        }
      }, [t("path", {
        attrs: {
          d: "M0 50A50 50 0 0 1 50 0L50 50L0 50",
          fill: "currentColor",
          opacity: "0.5"
        }
      }, [t("animateTransform", {
        attrs: {
          attributeName: "transform",
          type: "rotate",
          from: "0 50 50",
          to: "360 50 50",
          dur: "0.8s",
          repeatCount: "indefinite"
        }
      })]), t("path", {
        attrs: {
          d: "M50 0A50 50 0 0 1 100 50L50 50L50 0",
          fill: "currentColor",
          opacity: "0.5"
        }
      }, [t("animateTransform", {
        attrs: {
          attributeName: "transform",
          type: "rotate",
          from: "0 50 50",
          to: "360 50 50",
          dur: "1.6s",
          repeatCount: "indefinite"
        }
      })]), t("path", {
        attrs: {
          d: "M100 50A50 50 0 0 1 50 100L50 50L100 50",
          fill: "currentColor",
          opacity: "0.5"
        }
      }, [t("animateTransform", {
        attrs: {
          attributeName: "transform",
          type: "rotate",
          from: "0 50 50",
          to: "360 50 50",
          dur: "2.4s",
          repeatCount: "indefinite"
        }
      })]), t("path", {
        attrs: {
          d: "M50 100A50 50 0 0 1 0 50L50 50L50 100",
          fill: "currentColor",
          opacity: "0.5"
        }
      }, [t("animateTransform", {
        attrs: {
          attributeName: "transform",
          type: "rotate",
          from: "0 50 50",
          to: "360 50 50",
          dur: "3.2s",
          repeatCount: "indefinite"
        }
      })])]);
    }
  },
      pn = {
    name: "QSpinnerPuff",
    mixins: [Wt],
    render: function render(t) {
      return t("svg", {
        staticClass: "q-spinner",
        "class": this.classes,
        attrs: {
          stroke: "currentColor",
          width: this.size,
          height: this.size,
          viewBox: "0 0 44 44",
          xmlns: "http://www.w3.org/2000/svg"
        }
      }, [t("g", {
        attrs: {
          fill: "none",
          "fill-rule": "evenodd",
          "stroke-width": "2"
        }
      }, [t("circle", {
        attrs: {
          cx: "22",
          cy: "22",
          r: "1"
        }
      }, [t("animate", {
        attrs: {
          attributeName: "r",
          begin: "0s",
          dur: "1.8s",
          values: "1; 20",
          calcMode: "spline",
          keyTimes: "0; 1",
          keySplines: "0.165, 0.84, 0.44, 1",
          repeatCount: "indefinite"
        }
      }), t("animate", {
        attrs: {
          attributeName: "stroke-opacity",
          begin: "0s",
          dur: "1.8s",
          values: "1; 0",
          calcMode: "spline",
          keyTimes: "0; 1",
          keySplines: "0.3, 0.61, 0.355, 1",
          repeatCount: "indefinite"
        }
      })]), t("circle", {
        attrs: {
          cx: "22",
          cy: "22",
          r: "1"
        }
      }, [t("animate", {
        attrs: {
          attributeName: "r",
          begin: "-0.9s",
          dur: "1.8s",
          values: "1; 20",
          calcMode: "spline",
          keyTimes: "0; 1",
          keySplines: "0.165, 0.84, 0.44, 1",
          repeatCount: "indefinite"
        }
      }), t("animate", {
        attrs: {
          attributeName: "stroke-opacity",
          begin: "-0.9s",
          dur: "1.8s",
          values: "1; 0",
          calcMode: "spline",
          keyTimes: "0; 1",
          keySplines: "0.3, 0.61, 0.355, 1",
          repeatCount: "indefinite"
        }
      })])])]);
    }
  },
      fn = {
    name: "QSpinnerRadio",
    mixins: [Wt],
    render: function render(t) {
      return t("svg", {
        staticClass: "q-spinner",
        "class": this.classes,
        attrs: {
          width: this.size,
          height: this.size,
          viewBox: "0 0 100 100",
          preserveAspectRatio: "xMidYMid",
          xmlns: "http://www.w3.org/2000/svg"
        }
      }, [t("g", {
        attrs: {
          transform: "scale(0.55)"
        }
      }, [t("circle", {
        attrs: {
          cx: "30",
          cy: "150",
          r: "30",
          fill: "currentColor"
        }
      }, [t("animate", {
        attrs: {
          attributeName: "opacity",
          from: "0",
          to: "1",
          dur: "1s",
          begin: "0",
          repeatCount: "indefinite",
          keyTimes: "0;0.5;1",
          values: "0;1;1"
        }
      })]), t("path", {
        attrs: {
          d: "M90,150h30c0-49.7-40.3-90-90-90v30C63.1,90,90,116.9,90,150z",
          fill: "currentColor"
        }
      }, [t("animate", {
        attrs: {
          attributeName: "opacity",
          from: "0",
          to: "1",
          dur: "1s",
          begin: "0.1",
          repeatCount: "indefinite",
          keyTimes: "0;0.5;1",
          values: "0;1;1"
        }
      })]), t("path", {
        attrs: {
          d: "M150,150h30C180,67.2,112.8,0,30,0v30C96.3,30,150,83.7,150,150z",
          fill: "currentColor"
        }
      }, [t("animate", {
        attrs: {
          attributeName: "opacity",
          from: "0",
          to: "1",
          dur: "1s",
          begin: "0.2",
          repeatCount: "indefinite",
          keyTimes: "0;0.5;1",
          values: "0;1;1"
        }
      })])])]);
    }
  },
      mn = {
    name: "QSpinnerRings",
    mixins: [Wt],
    render: function render(t) {
      return t("svg", {
        staticClass: "q-spinner",
        "class": this.classes,
        attrs: {
          stroke: "currentColor",
          width: this.size,
          height: this.size,
          viewBox: "0 0 45 45",
          xmlns: "http://www.w3.org/2000/svg"
        }
      }, [t("g", {
        attrs: {
          fill: "none",
          "fill-rule": "evenodd",
          transform: "translate(1 1)",
          "stroke-width": "2"
        }
      }, [t("circle", {
        attrs: {
          cx: "22",
          cy: "22",
          r: "6"
        }
      }, [t("animate", {
        attrs: {
          attributeName: "r",
          begin: "1.5s",
          dur: "3s",
          values: "6;22",
          calcMode: "linear",
          repeatCount: "indefinite"
        }
      }), t("animate", {
        attrs: {
          attributeName: "stroke-opacity",
          begin: "1.5s",
          dur: "3s",
          values: "1;0",
          calcMode: "linear",
          repeatCount: "indefinite"
        }
      }), t("animate", {
        attrs: {
          attributeName: "stroke-width",
          begin: "1.5s",
          dur: "3s",
          values: "2;0",
          calcMode: "linear",
          repeatCount: "indefinite"
        }
      })]), t("circle", {
        attrs: {
          cx: "22",
          cy: "22",
          r: "6"
        }
      }, [t("animate", {
        attrs: {
          attributeName: "r",
          begin: "3s",
          dur: "3s",
          values: "6;22",
          calcMode: "linear",
          repeatCount: "indefinite"
        }
      }), t("animate", {
        attrs: {
          attributeName: "stroke-opacity",
          begin: "3s",
          dur: "3s",
          values: "1;0",
          calcMode: "linear",
          repeatCount: "indefinite"
        }
      }), t("animate", {
        attrs: {
          attributeName: "stroke-width",
          begin: "3s",
          dur: "3s",
          values: "2;0",
          calcMode: "linear",
          repeatCount: "indefinite"
        }
      })]), t("circle", {
        attrs: {
          cx: "22",
          cy: "22",
          r: "8"
        }
      }, [t("animate", {
        attrs: {
          attributeName: "r",
          begin: "0s",
          dur: "1.5s",
          values: "6;1;2;3;4;5;6",
          calcMode: "linear",
          repeatCount: "indefinite"
        }
      })])])]);
    }
  },
      gn = {
    name: "QSpinnerTail",
    mixins: [Wt],
    render: function render(t) {
      return t("svg", {
        staticClass: "q-spinner",
        "class": this.classes,
        attrs: {
          width: this.size,
          height: this.size,
          viewBox: "0 0 38 38",
          xmlns: "http://www.w3.org/2000/svg"
        }
      }, [t("defs", [t("linearGradient", {
        attrs: {
          x1: "8.042%",
          y1: "0%",
          x2: "65.682%",
          y2: "23.865%",
          id: "a"
        }
      }, [t("stop", {
        attrs: {
          "stop-color": "currentColor",
          "stop-opacity": "0",
          offset: "0%"
        }
      }), t("stop", {
        attrs: {
          "stop-color": "currentColor",
          "stop-opacity": ".631",
          offset: "63.146%"
        }
      }), t("stop", {
        attrs: {
          "stop-color": "currentColor",
          offset: "100%"
        }
      })])]), t("g", {
        attrs: {
          transform: "translate(1 1)",
          fill: "none",
          "fill-rule": "evenodd"
        }
      }, [t("path", {
        attrs: {
          d: "M36 18c0-9.94-8.06-18-18-18",
          stroke: "url(#a)",
          "stroke-width": "2"
        }
      }, [t("animateTransform", {
        attrs: {
          attributeName: "transform",
          type: "rotate",
          from: "0 18 18",
          to: "360 18 18",
          dur: "0.9s",
          repeatCount: "indefinite"
        }
      })]), t("circle", {
        attrs: {
          fill: "currentColor",
          cx: "36",
          cy: "18",
          r: "1"
        }
      }, [t("animateTransform", {
        attrs: {
          attributeName: "transform",
          type: "rotate",
          from: "0 18 18",
          to: "360 18 18",
          dur: "0.9s",
          repeatCount: "indefinite"
        }
      })])])]);
    }
  },
      vn = {
    name: "QStepTab",
    directives: {
      Ripple: Ht
    },
    props: ["vm"],
    computed: {
      hasNavigation: function hasNavigation() {
        return !this.vm.__stepper.noHeaderNavigation;
      },
      classes: function classes() {
        return {
          "step-error": this.vm.error,
          "step-active": this.vm.active,
          "step-done": this.vm.done,
          "step-navigation": this.vm.done && this.hasNavigation,
          "step-waiting": this.vm.waiting,
          "step-disabled": this.vm.disable,
          "step-colored": this.vm.active || this.vm.done,
          "items-center": !this.vm.__stepper.vertical,
          "items-start": this.vm.__stepper.vertical,
          "q-stepper-first": this.vm.first,
          "q-stepper-last": this.vm.last
        };
      }
    },
    methods: {
      __select: function __select() {
        this.hasNavigation && this.vm.select();
      }
    },
    render: function render(t) {
      var e = this.vm.stepIcon ? t(dt, {
        props: {
          name: this.vm.stepIcon
        }
      }) : t("span", [this.vm.innerOrder + 1]);
      return t("div", {
        staticClass: "q-stepper-tab col-grow flex no-wrap relative-position",
        "class": this.classes,
        on: {
          click: this.__select
        },
        directives: this.hasNavigation ? [{
          name: "ripple",
          value: this.vm.done
        }] : null
      }, [t("div", {
        staticClass: "q-stepper-dot row flex-center q-stepper-line relative-position"
      }, [t("span", {
        staticClass: "row flex-center"
      }, [e])]), this.vm.title ? t("div", {
        staticClass: "q-stepper-label q-stepper-line relative-position"
      }, [t("div", {
        staticClass: "q-stepper-title"
      }, [this.vm.title]), t("div", {
        staticClass: "q-stepper-subtitle"
      }, [this.vm.subtitle])]) : null]);
    }
  },
      bn = {
    name: "QStep",
    inject: {
      __stepper: {
        "default": function _default() {
          console.error("QStep needs to be child of QStepper");
        }
      }
    },
    props: {
      name: {
        type: [Number, String],
        "default": function _default() {
          return Zt();
        }
      },
      "default": Boolean,
      title: {
        type: String,
        required: !0
      },
      subtitle: String,
      icon: String,
      order: [Number, String],
      error: Boolean,
      activeIcon: String,
      errorIcon: String,
      doneIcon: String,
      disable: Boolean
    },
    watch: {
      order: function order() {
        this.__stepper.__sortSteps();
      }
    },
    data: function data() {
      return {
        innerOrder: 0,
        first: !1,
        last: !1
      };
    },
    computed: {
      stepIcon: function stepIcon() {
        var t = this.__stepper;
        return this.active ? this.activeIcon || t.activeIcon || this.$q.icon.stepper.active : this.error ? this.errorIcon || t.errorIcon || this.$q.icon.stepper.error : this.done && !this.disable ? this.doneIcon || t.doneIcon || this.$q.icon.stepper.done : this.icon;
      },
      actualOrder: function actualOrder() {
        return parseInt(this.order || this.innerOrder, 10);
      },
      active: function active() {
        return this.__stepper.step === this.name;
      },
      done: function done() {
        return !this.disable && this.__stepper.currentOrder > this.innerOrder;
      },
      waiting: function waiting() {
        return !this.disable && this.__stepper.currentOrder < this.innerOrder;
      },
      style: function style() {
        var t = this.actualOrder;
        return {
          "-webkit-box-ordinal-group": t,
          "-ms-flex-order": t,
          order: t
        };
      }
    },
    methods: {
      select: function select() {
        this.done && this.__stepper.goToStep(this.name);
      }
    },
    mounted: function mounted() {
      this.__stepper.__registerStep(this), this["default"] && this.select();
    },
    beforeDestroy: function beforeDestroy() {
      this.__stepper.__unregisterStep(this);
    },
    render: function render(t) {
      return t("div", {
        staticClass: "q-stepper-step",
        style: this.style
      }, [this.__stepper.vertical ? t(vn, {
        props: {
          vm: this
        }
      }) : null, t(Ze, [this.active ? t("div", {
        staticClass: "q-stepper-step-content"
      }, [t("div", {
        staticClass: "q-stepper-step-inner"
      }, this.$slots["default"])]) : null])]);
    }
  },
      _n = {
    name: "QStepper",
    props: {
      value: [Number, String],
      color: {
        type: String,
        "default": "primary"
      },
      vertical: Boolean,
      alternativeLabels: Boolean,
      noHeaderNavigation: Boolean,
      contractable: Boolean,
      doneIcon: Boolean,
      activeIcon: Boolean,
      errorIcon: Boolean
    },
    data: function data() {
      return {
        step: this.value || null,
        steps: []
      };
    },
    provide: function provide() {
      return {
        __stepper: this
      };
    },
    watch: {
      value: function value(t) {
        this.goToStep(t);
      }
    },
    computed: {
      classes: function classes() {
        var t = ["q-stepper-" + (this.vertical ? "vertical" : "horizontal"), "text-" + this.color];
        return this.contractable && t.push("q-stepper-contractable"), t;
      },
      hasSteps: function hasSteps() {
        return this.steps.length > 0;
      },
      currentStep: function currentStep() {
        var t = this;
        if (this.hasSteps) return this.steps.find(function (e) {
          return e.name === t.step;
        });
      },
      currentOrder: function currentOrder() {
        if (this.currentStep) return this.currentStep.innerOrder;
      },
      length: function length() {
        return this.steps.length;
      }
    },
    methods: {
      goToStep: function goToStep(t) {
        var e = this;
        this.step !== t && void 0 !== t && (this.step = t, this.$emit("input", t), this.$emit("step", t), this.$nextTick(function () {
          JSON.stringify(t) !== JSON.stringify(e.value) && e.$emit("change", t);
        }));
      },
      next: function next() {
        this.__go(1);
      },
      previous: function previous() {
        this.__go(-1);
      },
      reset: function reset() {
        this.hasSteps && this.goToStep(this.steps[0].name);
      },
      __go: function __go(t) {
        var e,
            i = this.currentOrder;

        if (void 0 === i) {
          if (!this.hasSteps) return;
          e = this.steps[0].name;
        } else {
          do {
            i += t;
          } while (i >= 0 && i < this.length - 1 && this.steps[i].disable);

          if (i < 0 || i > this.length - 1 || this.steps[i].disable) return;
          e = this.steps[i].name;
        }

        this.goToStep(e);
      },
      __sortSteps: function __sortSteps() {
        var t = this;
        this.steps.sort(function (t, e) {
          return t.actualOrder - e.actualOrder;
        });
        var e = this.steps.length - 1;
        this.steps.forEach(function (t, i) {
          t.innerOrder = i, t.first = 0 === i, t.last = i === e;
        }), this.$nextTick(function () {
          t.steps.some(function (t) {
            return t.active;
          }) || t.goToStep(t.steps[0].name);
        });
      },
      __registerStep: function __registerStep(t) {
        return this.steps.push(t), this.__sortSteps(), this;
      },
      __unregisterStep: function __unregisterStep(t) {
        this.steps = this.steps.filter(function (e) {
          return e !== t;
        });
      }
    },
    created: function created() {
      this.__sortSteps = oe(this.__sortSteps);
    },
    render: function render(t) {
      return t("div", {
        staticClass: "q-stepper column overflow-hidden relative-position",
        "class": this.classes
      }, [this.vertical ? null : t("div", {
        staticClass: "q-stepper-header row items-stretch justify-between shadow-1",
        "class": {
          "alternative-labels": this.alternativeLabels
        }
      }, this.steps.map(function (e) {
        return t(vn, {
          key: e.name,
          props: {
            vm: e
          }
        });
      })), this.$slots["default"]]);
    }
  },
      yn = {
    directives: {
      Ripple: Ht
    },
    props: {
      label: String,
      icon: String,
      disable: Boolean,
      hidden: Boolean,
      hide: {
        type: String,
        "default": ""
      },
      name: {
        type: String,
        "default": function _default() {
          return Zt();
        }
      },
      alert: Boolean,
      count: [Number, String],
      color: String,
      tabindex: Number
    },
    inject: {
      data: {
        "default": function _default() {
          console.error("QTab/QRouteTab components need to be child of QTabs");
        }
      },
      selectTab: {}
    },
    watch: {
      active: function active(t) {
        t && this.$emit("select", this.name);
      }
    },
    computed: {
      active: function active() {
        return this.data.tabName === this.name;
      },
      classes: function classes() {
        var t = {
          active: this.active,
          hidden: this.hidden,
          disabled: this.disable,
          "q-tab-full": this.icon && this.label,
          "q-tab-only-label": !this.icon && this.label,
          "hide-none": !this.hide,
          "hide-icon": "icon" === this.hide,
          "hide-label": "label" === this.hide
        },
            e = this.data.inverted ? this.color || this.data.textColor || this.data.color : this.color;
        return e && (t["text-" + e] = !0), t;
      },
      barStyle: function barStyle() {
        if (!this.active || !this.data.highlight) return "display: none;";
      },
      computedTabIndex: function computedTabIndex() {
        return this.disable || this.active ? -1 : this.tabindex || 0;
      }
    },
    methods: {
      __getTabMeta: function __getTabMeta(t) {
        return this.count ? [t(Ve, {
          staticClass: "q-tab-meta",
          props: {
            floating: !0
          }
        }, [this.count])] : this.alert ? [t("div", {
          staticClass: "q-tab-meta q-dot"
        })] : void 0;
      },
      __getTabContent: function __getTabContent(t) {
        var e = [];
        return this.icon && e.push(t("div", {
          staticClass: "q-tab-icon-parent relative-position"
        }, [t(dt, {
          staticClass: "q-tab-icon",
          props: {
            name: this.icon
          }
        }), this.__getTabMeta(t)])), this.label && e.push(t("div", {
          staticClass: "q-tab-label-parent relative-position"
        }, [t("div", {
          staticClass: "q-tab-label"
        }, [this.label]), this.__getTabMeta(t)])), (e = e.concat(this.$slots["default"])).push(t("div", {
          staticClass: "q-tabs-bar",
          style: this.barStyle
        })), e.push(t("div", {
          staticClass: "q-tab-focus-helper absolute-full",
          attrs: {
            tabindex: this.computedTabIndex
          }
        })), e;
      }
    }
  },
      wn = {
    name: "QRouteTab",
    mixins: [yn, _t],
    inject: {
      selectTabRouter: {}
    },
    watch: {
      $route: function $route() {
        this.checkIfSelected();
      }
    },
    methods: {
      select: function select() {
        this.$emit("click", this.name), this.disable || (this.$el.dispatchEvent(vt), this.selectTabRouter({
          value: this.name,
          selected: !0
        }));
      },
      checkIfSelected: function checkIfSelected() {
        var t = this;
        this.$nextTick(function () {
          if (t.$el.classList.contains("q-router-link-exact-active")) t.selectTabRouter({
            value: t.name,
            selectable: !0,
            exact: !0
          });else if (t.$el.classList.contains("q-router-link-active")) {
            var e = t.$router.resolve(t.to, void 0, t.append);
            t.selectTabRouter({
              value: t.name,
              selectable: !0,
              priority: e.href.length
            });
          } else t.active && t.selectTabRouter({
            value: null
          });
        });
      }
    },
    mounted: function mounted() {
      this.checkIfSelected();
    },
    render: function render(t) {
      var e = this;
      return t("router-link", {
        props: {
          tag: "a",
          to: this.to,
          exact: this.exact,
          append: this.append,
          replace: this.replace,
          event: "qrouterlinkclick",
          activeClass: "q-router-link-active",
          exactActiveClass: "q-router-link-exact-active"
        },
        attrs: {
          tabindex: -1
        },
        nativeOn: {
          click: this.select,
          keyup: function keyup(t) {
            return 13 === t.keyCode && e.select(t);
          }
        },
        staticClass: "q-link q-tab column flex-center relative-position",
        "class": this.classes,
        directives: [{
          name: "ripple"
        }]
      }, this.__getTabContent(t));
    }
  },
      Cn = {
    name: "QTab",
    mixins: [yn],
    props: {
      "default": Boolean
    },
    methods: {
      select: function select() {
        this.$emit("click", this.name), this.disable || this.selectTab(this.name);
      }
    },
    mounted: function mounted() {
      this["default"] && !this.disable && this.select();
    },
    render: function render(t) {
      var e = this;
      return t("div", {
        staticClass: "q-tab column flex-center relative-position",
        "class": this.classes,
        on: {
          click: this.select,
          keyup: function keyup(t) {
            return 13 === t.keyCode && e.select(t);
          }
        },
        directives: [{
          name: "ripple"
        }]
      }, this.__getTabContent(t));
    }
  },
      xn = {
    name: "QTabPane",
    inject: {
      data: {
        "default": function _default() {
          console.error("QTabPane needs to be child of QTabs");
        }
      }
    },
    props: {
      name: {
        type: String,
        required: !0
      },
      keepAlive: Boolean
    },
    data: function data() {
      return {
        shown: !1
      };
    },
    computed: {
      active: function active() {
        return this.data.tabName === this.name;
      }
    },
    render: function render(t) {
      var e = t("div", {
        staticClass: "q-tab-pane",
        "class": {
          hidden: !this.active
        }
      }, this.$slots["default"]);

      if (this.keepAlive) {
        if (!this.shown && !this.active) return;
        return this.shown = !0, e;
      }

      if (this.shown = this.active, this.active) return e;
    }
  },
      kn = {
    name: "QTabs",
    provide: function provide() {
      return {
        data: this.data,
        selectTab: this.selectTab,
        selectTabRouter: this.selectTabRouter
      };
    },
    props: {
      value: String,
      align: {
        type: String,
        "default": "left",
        validator: function validator(t) {
          return ["left", "center", "right", "justify"].includes(t);
        }
      },
      position: {
        type: String,
        "default": "top",
        validator: function validator(t) {
          return ["top", "bottom"].includes(t);
        }
      },
      color: {
        type: String,
        "default": "primary"
      },
      textColor: String,
      inverted: Boolean,
      twoLines: Boolean,
      noPaneBorder: Boolean,
      glossy: Boolean,
      panesContainerClass: String
    },
    data: function data() {
      return {
        currentEl: null,
        posbar: {
          width: 0,
          left: 0
        },
        data: {
          highlight: !0,
          tabName: this.value || "",
          color: this.color,
          textColor: this.textColor,
          inverted: this.inverted
        }
      };
    },
    watch: {
      value: function value(t) {
        this.selectTab(t);
      },
      color: function color(t) {
        this.data.color = t;
      },
      textColor: function textColor(t) {
        this.data.textColor = t;
      },
      inverted: function inverted(t) {
        this.data.inverted = t;
      }
    },
    computed: {
      classes: function classes() {
        return ["q-tabs-position-" + this.position, "q-tabs-" + (this.inverted ? "inverted" : "normal"), this.noPaneBorder ? "q-tabs-no-pane-border" : "", this.twoLines ? "q-tabs-two-lines" : ""];
      },
      innerClasses: function innerClasses() {
        var t = ["q-tabs-align-" + this.align];
        return this.glossy && t.push("glossy"), this.inverted ? t.push("text-" + (this.textColor || this.color)) : (t.push("bg-" + this.color), t.push("text-" + (this.textColor || "white"))), t;
      },
      posbarClasses: function posbarClasses() {
        var t = [];
        return this.inverted && t.push("text-" + (this.textColor || this.color)), this.data.highlight && t.push("highlight"), t;
      }
    },
    methods: {
      selectTab: function selectTab(t) {
        if (this.data.tabName !== t) {
          this.data.tabName = t, this.$emit("input", t), this.$emit("select", t);

          var e = this.__getTabElByName(t);

          e ? (this.__scrollToTab(e), this.currentEl = e, this.oldEl ? this.__repositionBar() : this.oldEl = e) : this.oldEl = null;
        }
      },
      selectTabRouter: function selectTabRouter(t) {
        var e = this,
            i = t.value,
            s = t.selectable,
            n = t.exact,
            o = t.selected,
            r = t.priority,
            a = !this.buffer.length,
            l = a ? -1 : this.buffer.findIndex(function (t) {
          return t.value === i;
        });

        if (l > -1) {
          var c = this.buffer[l];
          n && (c.exact = n), s && (c.selectable = s), o && (c.selected = o), r && (c.priority = r);
        } else this.buffer.push(t);

        a && (this.bufferTimer = setTimeout(function () {
          var t = e.buffer.find(function (t) {
            return t.exact && t.selected;
          }) || e.buffer.find(function (t) {
            return t.selectable && t.selected;
          }) || e.buffer.find(function (t) {
            return t.exact;
          }) || e.buffer.filter(function (t) {
            return t.selectable;
          }).sort(function (t, e) {
            return e.priority - t.priority;
          })[0] || e.buffer[0];
          e.buffer.length = 0, e.selectTab(t.value);
        }, 100));
      },
      __repositionBar: function __repositionBar() {
        var t = this;
        clearTimeout(this.timer);
        var e = !1,
            i = this.$refs.posbar,
            s = this.currentEl;
        if (!1 !== this.data.highlight && (this.data.highlight = !1, e = !0), !s) return this.finalPosbar = {
          width: 0,
          left: 0
        }, void this.__setPositionBar(0, 0);
        var n = i.parentNode.offsetLeft;
        e && this.oldEl && this.__setPositionBar(this.oldEl.getBoundingClientRect().width, this.oldEl.offsetLeft - n), this.timer = setTimeout(function () {
          var e = s.getBoundingClientRect().width,
              o = s.offsetLeft - n;
          i.classList.remove("contract"), t.oldEl = s, t.finalPosbar = {
            width: e,
            left: o
          }, t.__setPositionBar(t.posbar.left < o ? o + e - t.posbar.left : t.posbar.left + t.posbar.width - o, t.posbar.left < o ? t.posbar.left : o);
        }, 20);
      },
      __setPositionBar: function __setPositionBar(t, e) {
        if (void 0 === t && (t = 0), void 0 === e && (e = 0), this.posbar.width !== t || this.posbar.left !== e) {
          this.posbar = {
            width: t,
            left: e
          };
          var i = this.$q.i18n.rtl ? e + t : e;
          U(this.$refs.posbar, Y("translateX(" + i + "px) scaleX(" + t + ")"));
        } else this.__updatePosbarTransition();
      },
      __updatePosbarTransition: function __updatePosbarTransition() {
        if (this.finalPosbar.width === this.posbar.width && this.finalPosbar.left === this.posbar.left) return this.posbar = {}, void (!0 !== this.data.highlight && (this.data.highlight = !0));
        this.$refs.posbar.classList.add("contract"), this.__setPositionBar(this.finalPosbar.width, this.finalPosbar.left);
      },
      __redraw: function __redraw() {
        this.$q.platform.is.desktop && (this.scrollerWidth = W(this.$refs.scroller), 0 === this.scrollerWidth && 0 === this.$refs.scroller.scrollWidth || (this.scrollerWidth + 5 < this.$refs.scroller.scrollWidth ? (this.$refs.tabs.classList.add("scrollable"), this.scrollable = !0, this.__updateScrollIndicator()) : (this.$refs.tabs.classList.remove("scrollable"), this.scrollable = !1)));
      },
      __updateScrollIndicator: function __updateScrollIndicator() {
        if (this.$q.platform.is.desktop && this.scrollable) {
          var t = this.$refs.scroller.scrollLeft + W(this.$refs.scroller) + 5 >= this.$refs.scroller.scrollWidth ? "add" : "remove";
          this.$refs.leftScroll.classList[this.$refs.scroller.scrollLeft <= 0 ? "add" : "remove"]("disabled"), this.$refs.rightScroll.classList[t]("disabled");
        }
      },
      __getTabElByName: function __getTabElByName(t) {
        var e = this.$children.find(function (e) {
          return e.name === t && e.$el && 1 === e.$el.nodeType;
        });
        if (e) return e.$el;
      },
      __findTabAndScroll: function __findTabAndScroll(t, e) {
        var i = this;
        setTimeout(function () {
          i.__scrollToTab(i.__getTabElByName(t), e);
        }, 200);
      },
      __scrollToTab: function __scrollToTab(t, e) {
        if (t && this.scrollable) {
          var i = this.$refs.scroller.getBoundingClientRect(),
              s = t.getBoundingClientRect(),
              n = s.width,
              o = s.left - i.left;
          o < 0 ? e ? this.$refs.scroller.scrollLeft += o : this.__animScrollTo(this.$refs.scroller.scrollLeft + o) : (o += n - this.$refs.scroller.offsetWidth) > 0 && (e ? this.$refs.scroller.scrollLeft += o : this.__animScrollTo(this.$refs.scroller.scrollLeft + o));
        }
      },
      __animScrollTo: function __animScrollTo(t) {
        var e = this;
        this.__stopAnimScroll(), this.__scrollTowards(t), this.scrollTimer = setInterval(function () {
          e.__scrollTowards(t) && e.__stopAnimScroll();
        }, 5);
      },
      __scrollToStart: function __scrollToStart() {
        this.__animScrollTo(0);
      },
      __scrollToEnd: function __scrollToEnd() {
        this.__animScrollTo(9999);
      },
      __stopAnimScroll: function __stopAnimScroll() {
        clearInterval(this.scrollTimer);
      },
      __scrollTowards: function __scrollTowards(t) {
        var e = this.$refs.scroller.scrollLeft,
            i = t < e ? -1 : 1,
            s = !1;
        return (e += 5 * i) < 0 ? (s = !0, e = 0) : (-1 === i && e <= t || 1 === i && e >= t) && (s = !0, e = t), this.$refs.scroller.scrollLeft = e, s;
      }
    },
    render: function render(t) {
      return t("div", {
        staticClass: "q-tabs flex no-wrap",
        "class": this.classes
      }, [t("div", {
        staticClass: "q-tabs-head row",
        ref: "tabs",
        "class": this.innerClasses
      }, [t("div", {
        ref: "scroller",
        staticClass: "q-tabs-scroller row no-wrap"
      }, [this.$slots.title, t("div", {
        staticClass: "relative-position self-stretch q-tabs-global-bar-container",
        "class": this.posbarClasses
      }, [t("div", {
        ref: "posbar",
        staticClass: "q-tabs-bar q-tabs-global-bar",
        on: {
          transitionend: this.__updatePosbarTransition
        }
      })])]), t("div", {
        ref: "leftScroll",
        staticClass: "row flex-center q-tabs-left-scroll",
        on: {
          mousedown: this.__scrollToStart,
          touchstart: this.__scrollToStart,
          mouseup: this.__stopAnimScroll,
          mouseleave: this.__stopAnimScroll,
          touchend: this.__stopAnimScroll
        }
      }, [t(dt, {
        props: {
          name: this.$q.icon.tabs.left
        }
      })]), t("div", {
        ref: "rightScroll",
        staticClass: "row flex-center q-tabs-right-scroll",
        on: {
          mousedown: this.__scrollToEnd,
          touchstart: this.__scrollToEnd,
          mouseup: this.__stopAnimScroll,
          mouseleave: this.__stopAnimScroll,
          touchend: this.__stopAnimScroll
        }
      }, [t(dt, {
        props: {
          name: this.$q.icon.tabs.right
        }
      })])]), t("div", {
        staticClass: "q-tabs-panes",
        "class": this.panesContainerClass
      }, this.$slots["default"])]);
    },
    created: function created() {
      this.timer = null, this.scrollTimer = null, this.bufferTimer = null, this.buffer = [], this.scrollable = !this.$q.platform.is.desktop, this.__redraw = Zi(this.__redraw, 50), this.__updateScrollIndicator = Zi(this.__updateScrollIndicator, 50);
    },
    mounted: function mounted() {
      var t = this;
      this.$nextTick(function () {
        t.$refs.scroller && (t.$refs.scroller.addEventListener("scroll", t.__updateScrollIndicator, L.passive), window.addEventListener("resize", t.__redraw, L.passive), "" !== t.data.tabName && t.value && t.selectTab(t.value), t.__redraw(), t.__findTabAndScroll(t.data.tabName, !0));
      });
    },
    beforeDestroy: function beforeDestroy() {
      clearTimeout(this.timer), clearTimeout(this.bufferTimer), this.__stopAnimScroll(), this.$refs.scroller.removeEventListener("scroll", this.__updateScrollIndicator, L.passive), window.removeEventListener("resize", this.__redraw, L.passive), this.__redraw.cancel(), this.__updateScrollIndicator.cancel();
    }
  },
      Sn = {
    name: "QTh",
    props: {
      props: Object,
      autoWidth: Boolean
    },
    render: function render(t) {
      var e,
          i = this;
      if (!this.props) return t("td", {
        "class": {
          "q-table-col-auto-width": this.autoWidth
        }
      }, this.$slots["default"]);
      var s = this.$vnode.key,
          n = [].concat(this.$slots["default"]);

      if (s) {
        if (!(e = this.props.colsMap[s])) return;
      } else e = this.props.col;

      e.sortable && n["right" === e.align ? "unshift" : "push"](t(dt, {
        props: {
          name: this.$q.icon.table.arrowUp
        },
        staticClass: e.__iconClass
      }));
      return t("th", {
        "class": [e.__thClass, {
          "q-table-col-auto-width": this.autoWidth
        }],
        on: e.sortable ? {
          click: function click() {
            i.props.sort(e);
          }
        } : null
      }, n);
    }
  };

  function qn(t) {
    return t.page < 1 && (t.page = 1), void 0 !== t.rowsPerPage && t.rowsPerPage < 1 && (t.rowsPerPage = 0), t;
  }

  var $n = {
    name: "QTable",
    mixins: [De, {
      computed: {
        marginalsProps: function marginalsProps() {
          return {
            pagination: this.computedPagination,
            pagesNumber: this.pagesNumber,
            isFirstPage: this.isFirstPage,
            isLastPage: this.isLastPage,
            prevPage: this.prevPage,
            nextPage: this.nextPage,
            inFullscreen: this.inFullscreen,
            toggleFullscreen: this.toggleFullscreen
          };
        }
      },
      methods: {
        getTop: function getTop(t) {
          var e = this.$scopedSlots.top,
              i = this.$scopedSlots["top-left"],
              s = this.$scopedSlots["top-right"],
              n = this.$scopedSlots["top-selection"],
              o = this.hasSelectionMode && n && this.rowsSelectedNumber > 0,
              r = "q-table-top relative-position row items-center",
              a = [];
          return e ? t("div", {
            staticClass: r
          }, [e(this.marginalsProps)]) : (o ? a.push(n(this.marginalsProps)) : i ? a.push(t("div", {
            staticClass: "q-table-control"
          }, [i(this.marginalsProps)])) : this.title && a.push(t("div", {
            staticClass: "q-table-control"
          }, [t("div", {
            staticClass: "q-table-title"
          }, this.title)])), s && (a.push(t("div", {
            staticClass: "q-table-separator col"
          })), a.push(t("div", {
            staticClass: "q-table-control"
          }, [s(this.marginalsProps)]))), 0 !== a.length ? t("div", {
            staticClass: r
          }, a) : void 0);
        }
      }
    }, {
      methods: {
        getTableHeader: function getTableHeader(t) {
          var e = [this.getTableHeaderRow(t)];
          return this.loading && e.push(t("tr", {
            staticClass: "q-table-progress animate-fade"
          }, [t("td", {
            attrs: {
              colspan: "100%"
            }
          }, [t(Is, {
            props: {
              color: this.color,
              indeterminate: !0,
              height: "2px"
            }
          })])])), t("thead", e);
        },
        getTableHeaderRow: function getTableHeaderRow(t) {
          var e,
              i = this,
              s = this.$scopedSlots.header,
              n = this.$scopedSlots["header-cell"];
          if (s) return s(this.addTableHeaderRowMeta({
            header: !0,
            cols: this.computedCols,
            sort: this.sort,
            colsMap: this.computedColsMap
          }));
          e = n ? function (t) {
            return n({
              col: t,
              cols: i.computedCols,
              sort: i.sort,
              colsMap: i.computedColsMap
            });
          } : function (e) {
            return t(Sn, {
              key: e.name,
              props: {
                props: {
                  col: e,
                  cols: i.computedCols,
                  sort: i.sort,
                  colsMap: i.computedColsMap
                }
              }
            }, e.label);
          };
          var o = this.computedCols.map(e);
          return this.singleSelection && !this.grid ? o.unshift(t("th", {
            staticClass: "q-table-col-auto-width"
          }, [" "])) : this.multipleSelection && o.unshift(t("th", {
            staticClass: "q-table-col-auto-width"
          }, [t(je, {
            props: {
              color: this.color,
              value: this.someRowsSelected ? null : this.allRowsSelected,
              dark: this.dark
            },
            on: {
              input: function input(t) {
                i.someRowsSelected && (t = !1), i.__updateSelection(i.computedRows.map(function (t) {
                  return t[i.rowKey];
                }), i.computedRows, t);
              }
            }
          })])), t("tr", o);
        },
        addTableHeaderRowMeta: function addTableHeaderRowMeta(t) {
          var e = this;
          return this.multipleSelection && (Object.defineProperty(t, "selected", {
            get: function get() {
              return e.someRowsSelected ? "some" : e.allRowsSelected;
            },
            set: function set(t) {
              e.someRowsSelected && (t = !1), e.__updateSelection(e.computedRows.map(function (t) {
                return t[e.rowKey];
              }), e.computedRows, t);
            }
          }), t.partialSelected = this.someRowsSelected, t.multipleSelect = !0), t;
        }
      }
    }, {
      methods: {
        getTableBody: function getTableBody(t) {
          var e = this,
              i = this.$scopedSlots.body,
              s = this.$scopedSlots["body-cell"],
              n = this.$scopedSlots["top-row"],
              o = this.$scopedSlots["bottom-row"],
              r = [];
          return r = i ? this.computedRows.map(function (t) {
            var s = t[e.rowKey],
                n = e.isRowSelected(s);
            return i(e.addBodyRowMeta({
              key: s,
              row: t,
              cols: e.computedCols,
              colsMap: e.computedColsMap,
              __trClass: n ? "selected" : ""
            }));
          }) : this.computedRows.map(function (i) {
            var n = i[e.rowKey],
                o = e.isRowSelected(n),
                r = s ? e.computedCols.map(function (t) {
              return s(e.addBodyCellMetaData({
                row: i,
                col: t
              }));
            }) : e.computedCols.map(function (s) {
              var n = e.$scopedSlots["body-cell-" + s.name];
              return n ? n(e.addBodyCellMetaData({
                row: i,
                col: s
              })) : t("td", {
                staticClass: s.__tdClass
              }, e.getCellValue(s, i));
            });
            return e.hasSelectionMode && r.unshift(t("td", {
              staticClass: "q-table-col-auto-width"
            }, [t(je, {
              props: {
                value: o,
                color: e.color,
                dark: e.dark
              },
              on: {
                input: function input(t) {
                  e.__updateSelection([n], [i], t);
                }
              }
            })])), t("tr", {
              key: n,
              "class": {
                selected: o
              }
            }, r);
          }), n && r.unshift(n({
            cols: this.computedCols
          })), o && r.push(o({
            cols: this.computedCols
          })), t("tbody", r);
        },
        addBodyRowMeta: function addBodyRowMeta(t) {
          var e = this;
          return this.hasSelectionMode && Object.defineProperty(t, "selected", {
            get: function get() {
              return e.isRowSelected(t.key);
            },
            set: function set(i) {
              e.__updateSelection([t.key], [t.row], i);
            }
          }), Object.defineProperty(t, "expand", {
            get: function get() {
              return !0 === e.rowsExpanded[t.key];
            },
            set: function set(i) {
              e.$set(e.rowsExpanded, t.key, i);
            }
          }), t.cols = t.cols.map(function (i) {
            var s = Object.assign({}, i);
            return Object.defineProperty(s, "value", {
              get: function get() {
                return e.getCellValue(i, t.row);
              }
            }), s;
          }), t;
        },
        addBodyCellMetaData: function addBodyCellMetaData(t) {
          var e = this;
          return Object.defineProperty(t, "value", {
            get: function get() {
              return e.getCellValue(t.col, t.row);
            }
          }), t;
        },
        getCellValue: function getCellValue(t, e) {
          var i = "function" == typeof t.field ? t.field(e) : e[t.field];
          return t.format ? t.format(i) : i;
        }
      }
    }, {
      computed: {
        navIcon: function navIcon() {
          var t = [this.$q.icon.table.prevPage, this.$q.icon.table.nextPage];
          return this.$q.i18n.rtl ? t.reverse() : t;
        }
      },
      methods: {
        getBottom: function getBottom(t) {
          if (!this.hideBottom) {
            if (this.nothingToDisplay) {
              var e = this.filter ? this.noResultsLabel || this.$q.i18n.table.noResults : this.loading ? this.loadingLabel || this.$q.i18n.table.loading : this.noDataLabel || this.$q.i18n.table.noData;
              return t("div", {
                staticClass: "q-table-bottom row items-center q-table-nodata"
              }, [t(dt, {
                props: {
                  name: this.$q.icon.table.warning
                }
              }), e]);
            }

            var i = this.$scopedSlots.bottom;
            return t("div", {
              staticClass: "q-table-bottom row items-center",
              "class": i ? null : "justify-end"
            }, i ? [i(this.marginalsProps)] : this.getPaginationRow(t));
          }
        },
        getPaginationRow: function getPaginationRow(t) {
          var e = this,
              i = this.computedPagination.rowsPerPage,
              s = this.paginationLabel || this.$q.i18n.table.pagination,
              n = this.$scopedSlots.pagination;
          return [t("div", {
            staticClass: "q-table-control"
          }, [t("div", [this.hasSelectionMode && this.rowsSelectedNumber > 0 ? (this.selectedRowsLabel || this.$q.i18n.table.selectedRecords)(this.rowsSelectedNumber) : ""])]), t("div", {
            staticClass: "q-table-separator col"
          }), t("div", {
            staticClass: "q-table-control"
          }, [t("span", {
            staticClass: "q-table-bottom-item"
          }, [this.rowsPerPageLabel || this.$q.i18n.table.recordsPerPage]), t(Ys, {
            staticClass: "inline q-table-bottom-item",
            props: {
              color: this.color,
              value: i,
              options: this.computedRowsPerPageOptions,
              dark: this.dark,
              hideUnderline: !0
            },
            on: {
              input: function input(t) {
                e.setPagination({
                  page: 1,
                  rowsPerPage: t
                });
              }
            }
          })]), t("div", {
            staticClass: "q-table-control"
          }, [n ? n(this.marginalsProps) : [t("span", {
            staticClass: "q-table-bottom-item"
          }, [i ? s(this.firstRowIndex + 1, Math.min(this.lastRowIndex, this.computedRowsNumber), this.computedRowsNumber) : s(1, this.computedRowsNumber, this.computedRowsNumber)]), t(Yt, {
            props: {
              color: this.color,
              round: !0,
              icon: this.navIcon[0],
              dense: !0,
              flat: !0,
              disable: this.isFirstPage
            },
            on: {
              click: this.prevPage
            }
          }), t(Yt, {
            props: {
              color: this.color,
              round: !0,
              icon: this.navIcon[1],
              dense: !0,
              flat: !0,
              disable: this.isLastPage
            },
            on: {
              click: this.nextPage
            }
          })]])];
        }
      }
    }, {
      props: {
        sortMethod: {
          type: Function,
          "default": function _default(t, e, i) {
            var s = this.columns.find(function (t) {
              return t.name === e;
            });
            if (null === s || void 0 === s.field) return t;
            var n = i ? -1 : 1,
                o = "function" == typeof s.field ? function (t) {
              return s.field(t);
            } : function (t) {
              return t[s.field];
            };
            return t.sort(function (t, e) {
              var i,
                  r = o(t),
                  a = o(e);
              return null === r || void 0 === r ? -1 * n : null === a || void 0 === a ? 1 * n : s.sort ? s.sort(r, a) * n : ke(r) && ke(a) ? (r - a) * n : xe(r) && xe(a) ? function (t, e) {
                return new Date(t) - new Date(e);
              }(r, a) * n : "boolean" == typeof r && "boolean" == typeof a ? (t - e) * n : (r = (i = [r, a].map(function (t) {
                return (t + "").toLowerCase();
              }))[0]) < (a = i[1]) ? -1 * n : r === a ? 0 : n;
            });
          }
        }
      },
      computed: {
        columnToSort: function columnToSort() {
          var t = this.computedPagination.sortBy;
          if (t) return this.columns.find(function (e) {
            return e.name === t;
          }) || null;
        }
      },
      methods: {
        sort: function sort(t) {
          t === Object(t) && (t = t.name);
          var e = this.computedPagination,
              i = e.sortBy,
              s = e.descending;
          i !== t ? (i = t, s = !1) : s ? i = null : s = !0, this.setPagination({
            sortBy: i,
            descending: s,
            page: 1
          });
        }
      }
    }, {
      props: {
        filter: String,
        filterMethod: {
          type: Function,
          "default": function _default(t, e, i, s) {
            void 0 === i && (i = this.computedCols), void 0 === s && (s = this.getCellValue);
            var n = e ? e.toLowerCase() : "";
            return t.filter(function (t) {
              return i.some(function (e) {
                return -1 !== (s(e, t) + "").toLowerCase().indexOf(n);
              });
            });
          }
        }
      },
      computed: {
        hasFilter: function hasFilter() {
          return void 0 !== this.filter && this.filter.length > 0;
        }
      },
      watch: {
        filter: function filter() {
          var t = this;
          this.$nextTick(function () {
            t.setPagination({
              page: 1
            }, !0);
          });
        }
      }
    }, {
      props: {
        pagination: Object,
        rowsPerPageOptions: {
          type: Array,
          "default": function _default() {
            return [3, 5, 7, 10, 15, 20, 25, 50, 0];
          }
        }
      },
      data: function data() {
        return {
          innerPagination: {
            sortBy: null,
            descending: !1,
            page: 1,
            rowsPerPage: 5
          }
        };
      },
      computed: {
        computedPagination: function computedPagination() {
          return qn(Object.assign({}, this.innerPagination, this.pagination));
        },
        firstRowIndex: function firstRowIndex() {
          var t = this.computedPagination;
          return (t.page - 1) * t.rowsPerPage;
        },
        lastRowIndex: function lastRowIndex() {
          var t = this.computedPagination;
          return t.page * t.rowsPerPage;
        },
        isFirstPage: function isFirstPage() {
          return 1 === this.computedPagination.page;
        },
        pagesNumber: function pagesNumber() {
          return Math.max(1, Math.ceil(this.computedRowsNumber / this.computedPagination.rowsPerPage));
        },
        isLastPage: function isLastPage() {
          return 0 === this.lastRowIndex || this.computedPagination.page >= this.pagesNumber;
        },
        computedRowsPerPageOptions: function computedRowsPerPageOptions() {
          var t = this;
          return this.rowsPerPageOptions.map(function (e) {
            return {
              label: 0 === e ? t.$q.i18n.table.allRows : "" + e,
              value: e
            };
          });
        }
      },
      watch: {
        pagesNumber: function pagesNumber(t, e) {
          if (t !== e) {
            var i = this.computedPagination.page;
            t && !i ? this.setPagination({
              page: 1
            }) : t < i && this.setPagination({
              page: t
            });
          }
        }
      },
      methods: {
        __sendServerRequest: function __sendServerRequest(t) {
          this.requestServerInteraction({
            pagination: t,
            filter: this.filter
          });
        },
        setPagination: function setPagination(t, e) {
          var i = qn(Object.assign({}, this.computedPagination, t));
          !function (t, e) {
            for (var i in e) {
              if (e[i] !== t[i]) return !1;
            }

            return !0;
          }(this.computedPagination, i) ? this.isServerSide ? this.__sendServerRequest(i) : this.pagination ? this.$emit("update:pagination", i) : this.innerPagination = i : this.isServerSide && e && this.__sendServerRequest(i);
        },
        prevPage: function prevPage() {
          var t = this.computedPagination.page;
          t > 1 && this.setPagination({
            page: t - 1
          });
        },
        nextPage: function nextPage() {
          var t = this.computedPagination,
              e = t.page,
              i = t.rowsPerPage;
          this.lastRowIndex > 0 && e * i < this.computedRowsNumber && this.setPagination({
            page: e + 1
          });
        }
      },
      created: function created() {
        this.$emit("update:pagination", Object.assign({}, this.computedPagination));
      }
    }, {
      props: {
        selection: {
          type: String,
          "default": "none",
          validator: function validator(t) {
            return ["single", "multiple", "none"].includes(t);
          }
        },
        selected: {
          type: Array,
          "default": function _default() {
            return [];
          }
        }
      },
      computed: {
        selectedKeys: function selectedKeys() {
          var t = this,
              e = {};
          return this.selected.map(function (e) {
            return e[t.rowKey];
          }).forEach(function (t) {
            e[t] = !0;
          }), e;
        },
        hasSelectionMode: function hasSelectionMode() {
          return "none" !== this.selection;
        },
        singleSelection: function singleSelection() {
          return "single" === this.selection;
        },
        multipleSelection: function multipleSelection() {
          return "multiple" === this.selection;
        },
        allRowsSelected: function allRowsSelected() {
          var t = this;
          if (this.multipleSelection) return this.computedRows.length > 0 && this.computedRows.every(function (e) {
            return !0 === t.selectedKeys[e[t.rowKey]];
          });
        },
        someRowsSelected: function someRowsSelected() {
          var t = this;
          if (this.multipleSelection) return !this.allRowsSelected && this.computedRows.some(function (e) {
            return !0 === t.selectedKeys[e[t.rowKey]];
          });
        },
        rowsSelectedNumber: function rowsSelectedNumber() {
          return this.selected.length;
        }
      },
      methods: {
        isRowSelected: function isRowSelected(t) {
          return !0 === this.selectedKeys[t];
        },
        clearSelection: function clearSelection() {
          this.$emit("update:selected", []);
        },
        __updateSelection: function __updateSelection(t, e, i) {
          var s = this;
          this.singleSelection ? this.$emit("update:selected", i ? e : []) : this.$emit("update:selected", i ? this.selected.concat(e) : this.selected.filter(function (e) {
            return !t.includes(e[s.rowKey]);
          }));
        }
      }
    }, {
      props: {
        visibleColumns: Array
      },
      computed: {
        computedCols: function computedCols() {
          var t = this,
              e = this.computedPagination,
              i = e.sortBy,
              s = e.descending;
          return (this.visibleColumns ? this.columns.filter(function (e) {
            return e.required || t.visibleColumns.includes(e.name);
          }) : this.columns).map(function (t) {
            return t.align = t.align || "right", t.__iconClass = "q-table-sort-icon q-table-sort-icon-" + t.align, t.__thClass = "text-" + t.align + (t.sortable ? " sortable" : "") + (t.name === i ? " sorted " + (s ? "sort-desc" : "") : ""), t.__tdClass = "text-" + t.align, t;
          });
        },
        computedColsMap: function computedColsMap() {
          var t = {};
          return this.computedCols.forEach(function (e) {
            t[e.name] = e;
          }), t;
        }
      }
    }, {
      data: function data() {
        return {
          rowsExpanded: {}
        };
      }
    }],
    props: {
      data: {
        type: Array,
        "default": function _default() {
          return [];
        }
      },
      rowKey: {
        type: String,
        "default": "id"
      },
      color: {
        type: String,
        "default": "grey-8"
      },
      grid: Boolean,
      dense: Boolean,
      columns: Array,
      loading: Boolean,
      title: String,
      hideHeader: Boolean,
      hideBottom: Boolean,
      dark: Boolean,
      separator: {
        type: String,
        "default": "horizontal",
        validator: function validator(t) {
          return ["horizontal", "vertical", "cell", "none"].includes(t);
        }
      },
      noDataLabel: String,
      noResultsLabel: String,
      loadingLabel: String,
      selectedRowsLabel: Function,
      rowsPerPageLabel: String,
      paginationLabel: Function,
      tableStyle: {
        type: [String, Array, Object],
        "default": ""
      },
      tableClass: {
        type: [String, Array, Object],
        "default": ""
      }
    },
    computed: {
      computedData: function computedData() {
        var t = this.data.slice().map(function (t, e) {
          return t.__index = e, t;
        });
        if (0 === t.length) return {
          rowsNumber: 0,
          rows: []
        };
        if (this.isServerSide) return {
          rows: t
        };
        var e = this.computedPagination,
            i = e.sortBy,
            s = e.descending,
            n = e.rowsPerPage;
        this.hasFilter && (t = this.filterMethod(t, this.filter, this.computedCols, this.getCellValue)), this.columnToSort && (t = this.sortMethod(t, i, s));
        var o = t.length;
        return n && (t = t.slice(this.firstRowIndex, this.lastRowIndex)), {
          rowsNumber: o,
          rows: t
        };
      },
      computedRows: function computedRows() {
        return this.computedData.rows;
      },
      computedRowsNumber: function computedRowsNumber() {
        return this.isServerSide ? this.computedPagination.rowsNumber || 0 : this.computedData.rowsNumber;
      },
      nothingToDisplay: function nothingToDisplay() {
        return 0 === this.computedRows.length;
      },
      isServerSide: function isServerSide() {
        return void 0 !== this.computedPagination.rowsNumber;
      }
    },
    render: function render(t) {
      return t("div", {
        "class": {
          "q-table-grid": this.grid,
          "q-table-container": !0,
          "q-table-dark": this.dark,
          "q-table-dense": this.dense,
          fullscreen: this.inFullscreen,
          scroll: this.inFullscreen
        }
      }, [this.getTop(t), this.getBody(t), this.getBottom(t)]);
    },
    methods: {
      requestServerInteraction: function requestServerInteraction(t) {
        var e = this;
        this.$nextTick(function () {
          e.$emit("request", {
            pagination: t.pagination || e.computedPagination,
            filter: t.filter || e.filter,
            getCellValue: e.getCellValue
          });
        });
      },
      getBody: function getBody(t) {
        var e = this,
            i = !this.hideHeader;

        if (this.grid) {
          var s = this.$scopedSlots.item;
          if (void 0 !== s) return [i && t("div", {
            staticClass: "q-table-middle scroll"
          }, [t("table", {
            staticClass: "q-table" + (this.dark ? " q-table-dark" : "")
          }, [this.getTableHeader(t)])]) || null, t("div", {
            staticClass: "row"
          }, this.computedRows.map(function (t) {
            var i = t[e.rowKey],
                n = e.isRowSelected(i);
            return s(e.addBodyRowMeta({
              key: i,
              row: t,
              cols: e.computedCols,
              colsMap: e.computedColsMap,
              __trClass: n ? "selected" : ""
            }));
          }))];
        }

        return t("div", {
          staticClass: "q-table-middle scroll",
          "class": this.tableClass,
          style: this.tableStyle
        }, [t("table", {
          staticClass: "q-table q-table-" + this.separator + "-separator" + (this.dark ? " q-table-dark" : "")
        }, [i && this.getTableHeader(t) || null, this.getTableBody(t)])]);
      }
    }
  },
      Tn = {
    name: "QTr",
    props: {
      props: Object
    },
    render: function render(t) {
      return t("tr", !this.props || this.props.header ? {} : {
        "class": this.props.__trClass
      }, this.$slots["default"]);
    }
  },
      Pn = {
    name: "QTd",
    props: {
      props: Object,
      autoWidth: Boolean
    },
    render: function render(t) {
      if (!this.props) return t("td", {
        "class": {
          "q-table-col-auto-width": this.autoWidth
        }
      }, this.$slots["default"]);
      var e,
          i = this.$vnode.key;

      if (i) {
        if (!(e = this.props.colsMap[i])) return;
      } else e = this.props.col;

      return t("td", {
        "class": [e.__tdClass, {
          "q-table-col-auto-width": this.autoWidth
        }]
      }, this.$slots["default"]);
    }
  },
      Mn = {
    name: "QTableColumns",
    props: {
      value: {
        type: Array,
        required: !0
      },
      label: String,
      columns: {
        type: Array,
        required: !0
      },
      color: String
    },
    computed: {
      computedOptions: function computedOptions() {
        return this.columns.filter(function (t) {
          return !t.required;
        }).map(function (t) {
          return {
            value: t.name,
            label: t.label
          };
        });
      }
    },
    render: function render(t) {
      var e = this;
      return t(Ys, {
        props: {
          multiple: !0,
          toggle: !0,
          value: this.value,
          options: this.computedOptions,
          displayValue: this.label || this.$q.i18n.table.columns,
          color: this.color,
          hideUnderline: !0
        },
        on: {
          input: function input(t) {
            e.$emit("input", t);
          },
          change: function change(t) {
            e.$emit("change", t);
          }
        }
      });
    }
  },
      Ln = {
    name: "QTimeline",
    provide: function provide() {
      return {
        __timeline: this
      };
    },
    props: {
      color: {
        type: String,
        "default": "primary"
      },
      responsive: Boolean,
      dark: Boolean
    },
    render: function render(t) {
      return t("ul", {
        staticClass: "q-timeline",
        "class": {
          "q-timeline-dark": this.dark,
          "q-timeline-responsive": this.responsive
        }
      }, this.$slots["default"]);
    }
  },
      Bn = {
    name: "QTimelineEntry",
    inject: {
      __timeline: {
        "default": function _default() {
          console.error("QTimelineEntry needs to be child of QTimeline");
        }
      }
    },
    props: {
      heading: Boolean,
      tag: {
        type: String,
        "default": "h3"
      },
      side: {
        type: String,
        "default": "right",
        validator: function validator(t) {
          return ["left", "right"].includes(t);
        }
      },
      icon: String,
      color: String,
      title: String,
      subtitle: String
    },
    computed: {
      colorClass: function colorClass() {
        return "text-" + (this.color || this.__timeline.color);
      },
      classes: function classes() {
        return ["q-timeline-entry-" + ("left" === this.side ? "left" : "right"), this.icon ? "q-timeline-entry-with-icon" : ""];
      }
    },
    render: function render(t) {
      return this.heading ? t("div", {
        staticClass: "q-timeline-heading"
      }, [t("div"), t("div"), t(this.tag, {
        staticClass: "q-timeline-heading-title"
      }, this.$slots["default"])]) : t("li", {
        staticClass: "q-timeline-entry",
        "class": this.classes
      }, [t("div", {
        staticClass: "q-timeline-subtitle"
      }, [t("span", this.subtitle)]), t("div", {
        staticClass: "q-timeline-dot",
        "class": this.colorClass
      }, [this.icon ? t(dt, {
        staticClass: "row items-center justify-center",
        props: {
          name: this.icon
        }
      }) : null]), t("div", {
        staticClass: "q-timeline-content"
      }, [t("h6", {
        staticClass: "q-timeline-title"
      }, [this.title])].concat(this.$slots["default"]))]);
    }
  },
      En = {
    name: "QToolbar",
    props: {
      color: {
        type: String,
        "default": "primary"
      },
      textColor: String,
      inverted: Boolean,
      glossy: Boolean
    },
    computed: {
      classes: function classes() {
        var t = ["q-toolbar-" + (this.inverted ? "inverted" : "normal")];
        return this.glossy && t.push("glossy"), this.inverted ? t.push("text-" + (this.textColor || this.color)) : (t.push("bg-" + this.color), t.push("text-" + (this.textColor || "white"))), t;
      }
    },
    render: function render(t) {
      return t("div", {
        staticClass: "q-toolbar row no-wrap items-center relative-position",
        "class": this.classes
      }, this.$slots["default"]);
    }
  },
      Nn = {
    name: "QToolbarTitle",
    props: {
      shrink: Boolean
    },
    render: function render(t) {
      return t("div", {
        staticClass: "q-toolbar-title",
        "class": this.shrink ? "col-auto" : null
      }, [this.$slots["default"], this.$slots.subtitle ? t("div", {
        staticClass: "q-toolbar-subtitle"
      }, this.$slots.subtitle) : null]);
    }
  },
      On = {
    name: "QTree",
    directives: {
      Ripple: Ht
    },
    props: {
      nodes: Array,
      nodeKey: {
        type: String,
        required: !0
      },
      color: {
        type: String,
        "default": "grey"
      },
      controlColor: String,
      textColor: String,
      dark: Boolean,
      icon: String,
      tickStrategy: {
        type: String,
        "default": "none",
        validator: function validator(t) {
          return ["none", "strict", "leaf", "leaf-filtered"].includes(t);
        }
      },
      ticked: Array,
      expanded: Array,
      selected: {},
      defaultExpandAll: Boolean,
      accordion: Boolean,
      filter: String,
      filterMethod: {
        type: Function,
        "default": function _default(t, e) {
          var i = e.toLowerCase();
          return t.label && t.label.toLowerCase().indexOf(i) > -1;
        }
      },
      noNodesLabel: String,
      noResultsLabel: String
    },
    computed: {
      hasRipple: function hasRipple() {
        return !this.noRipple;
      },
      classes: function classes() {
        return ["text-" + this.color, {
          "q-tree-dark": this.dark
        }];
      },
      hasSelection: function hasSelection() {
        return void 0 !== this.selected;
      },
      computedIcon: function computedIcon() {
        return this.icon || this.$q.icon.tree.icon;
      },
      computedControlColor: function computedControlColor() {
        return this.controlColor || this.color;
      },
      contentClass: function contentClass() {
        return "text-" + (this.textColor || (this.dark ? "white" : "black"));
      },
      meta: function meta() {
        var t = this,
            e = {},
            i = function i(s, n) {
          var o = s.tickStrategy || (n ? n.tickStrategy : t.tickStrategy),
              r = s[t.nodeKey],
              a = s.children && s.children.length > 0,
              l = !a,
              c = !s.disabled && t.hasSelection && !1 !== s.selectable,
              h = !s.disabled && !1 !== s.expandable,
              u = "none" !== o,
              d = "strict" === o,
              p = "leaf-filtered" === o,
              f = "leaf" === o || "leaf-filtered" === o,
              m = !s.disabled && !1 !== s.tickable;
          f && m && n && !n.tickable && (m = !1);
          var g = s.lazy;
          g && t.lazy[r] && (g = t.lazy[r]);
          var v = {
            key: r,
            parent: n,
            isParent: a,
            isLeaf: l,
            lazy: g,
            disabled: s.disabled,
            link: c || h && (a || !0 === g),
            children: [],
            matchesFilter: !t.filter || t.filterMethod(s, t.filter),
            selected: r === t.selected && c,
            selectable: c,
            expanded: !!a && t.innerExpanded.includes(r),
            expandable: h,
            noTick: s.noTick || !d && g && "loaded" !== g,
            tickable: m,
            tickStrategy: o,
            hasTicking: u,
            strictTicking: d,
            leafFilteredTicking: p,
            leafTicking: f,
            ticked: d ? t.innerTicked.includes(r) : !!l && t.innerTicked.includes(r)
          };

          if (e[r] = v, a && (v.children = s.children.map(function (t) {
            return i(t, v);
          }), t.filter && (v.matchesFilter || (v.matchesFilter = v.children.some(function (t) {
            return t.matchesFilter;
          })), v.matchesFilter && !v.noTick && !v.disabled && v.tickable && p && v.children.every(function (t) {
            return !t.matchesFilter || t.noTick || !t.tickable;
          }) && (v.tickable = !1)), v.matchesFilter && (v.noTick || d || !v.children.every(function (t) {
            return t.noTick;
          }) || (v.noTick = !0), f && (v.ticked = !1, v.indeterminate = v.children.some(function (t) {
            return t.indeterminate;
          }), !v.indeterminate)))) {
            var b = v.children.reduce(function (t, e) {
              return e.ticked ? t + 1 : t;
            }, 0);
            b === v.children.length ? v.ticked = !0 : b > 0 && (v.indeterminate = !0);
          }

          return v;
        };

        return this.nodes.forEach(function (t) {
          return i(t, null);
        }), e;
      }
    },
    data: function data() {
      return {
        lazy: {},
        innerTicked: this.ticked || [],
        innerExpanded: this.expanded || []
      };
    },
    watch: {
      ticked: function ticked(t) {
        this.innerTicked = t;
      },
      expanded: function expanded(t) {
        this.innerExpanded = t;
      }
    },
    methods: {
      getNodeByKey: function getNodeByKey(t) {
        var e = this,
            i = [].reduce,
            s = function s(n, o) {
          return n || !o ? n : Array.isArray(o) ? i.call(Object(o), s, n) : o[e.nodeKey] === t ? o : o.children ? s(null, o.children) : void 0;
        };

        return s(null, this.nodes);
      },
      getTickedNodes: function getTickedNodes() {
        var t = this;
        return this.innerTicked.map(function (e) {
          return t.getNodeByKey(e);
        });
      },
      getExpandedNodes: function getExpandedNodes() {
        var t = this;
        return this.innerExpanded.map(function (e) {
          return t.getNodeByKey(e);
        });
      },
      isExpanded: function isExpanded(t) {
        return !(!t || !this.meta[t]) && this.meta[t].expanded;
      },
      collapseAll: function collapseAll() {
        void 0 !== this.expanded ? this.$emit("update:expanded", []) : this.innerExpanded = [];
      },
      expandAll: function expandAll() {
        var t = this,
            e = this.innerExpanded,
            i = function i(s) {
          s.children && s.children.length > 0 && !1 !== s.expandable && !0 !== s.disabled && (e.push(s[t.nodeKey]), s.children.forEach(i));
        };

        this.nodes.forEach(i), void 0 !== this.expanded ? this.$emit("update:expanded", e) : this.innerExpanded = e;
      },
      setExpanded: function setExpanded(t, e, i, s) {
        var n = this;

        if (void 0 === i && (i = this.getNodeByKey(t)), void 0 === s && (s = this.meta[t]), s.lazy && "loaded" !== s.lazy) {
          if ("loading" === s.lazy) return;
          this.$set(this.lazy, t, "loading"), this.$emit("lazy-load", {
            node: i,
            key: t,
            done: function done(e) {
              n.lazy[t] = "loaded", e && (i.children = e), n.$nextTick(function () {
                var e = n.meta[t];
                e && e.isParent && n.__setExpanded(t, !0);
              });
            },
            fail: function fail() {
              n.$delete(n.lazy, t);
            }
          });
        } else s.isParent && s.expandable && this.__setExpanded(t, e);
      },
      __setExpanded: function __setExpanded(t, e) {
        var i = this,
            s = this.innerExpanded,
            n = void 0 !== this.expanded;

        if (n && (s = s.slice()), e) {
          if (this.accordion && this.meta[t]) {
            var o = [];
            this.meta[t].parent ? this.meta[t].parent.children.forEach(function (e) {
              e.key !== t && e.expandable && o.push(e.key);
            }) : this.nodes.forEach(function (e) {
              var s = e[i.nodeKey];
              s !== t && o.push(s);
            }), o.length > 0 && (s = s.filter(function (t) {
              return !o.includes(t);
            }));
          }

          s = s.concat([t]).filter(function (t, e, i) {
            return i.indexOf(t) === e;
          });
        } else s = s.filter(function (e) {
          return e !== t;
        });

        n ? this.$emit("update:expanded", s) : this.innerExpanded = s;
      },
      isTicked: function isTicked(t) {
        return !(!t || !this.meta[t]) && this.meta[t].ticked;
      },
      setTicked: function setTicked(t, e) {
        var i = this.innerTicked,
            s = void 0 !== this.ticked;
        s && (i = i.slice()), i = e ? i.concat(t).filter(function (t, e, i) {
          return i.indexOf(t) === e;
        }) : i.filter(function (e) {
          return !t.includes(e);
        }), s && this.$emit("update:ticked", i);
      },
      __getSlotScope: function __getSlotScope(t, e, i) {
        var s = this,
            n = {
          tree: this,
          node: t,
          key: i,
          color: this.color,
          dark: this.dark
        };
        return Object.defineProperty(n, "expanded", {
          get: function get() {
            return e.expanded;
          },
          set: function set(t) {
            t !== e.expanded && s.setExpanded(i, t);
          }
        }), Object.defineProperty(n, "ticked", {
          get: function get() {
            return e.ticked;
          },
          set: function set(t) {
            t !== e.ticked && s.setTicked([i], t);
          }
        }), n;
      },
      __getChildren: function __getChildren(t, e) {
        var i = this;
        return (this.filter ? e.filter(function (t) {
          return i.meta[t[i.nodeKey]].matchesFilter;
        }) : e).map(function (e) {
          return i.__getNode(t, e);
        });
      },
      __getNodeMedia: function __getNodeMedia(t, e) {
        return e.icon ? t(dt, {
          staticClass: "q-tree-icon q-mr-sm",
          props: {
            name: e.icon
          }
        }) : e.img || e.avatar ? t("img", {
          staticClass: "q-tree-img q-mr-sm",
          "class": {
            avatar: e.avatar
          },
          attrs: {
            src: e.img || e.avatar
          }
        }) : void 0;
      },
      __getNode: function __getNode(t, e) {
        var i = this,
            s = e[this.nodeKey],
            n = this.meta[s],
            o = e.header && this.$scopedSlots["header-" + e.header] || this.$scopedSlots["default-header"],
            r = n.isParent ? this.__getChildren(t, e.children) : [],
            a = r.length > 0 || n.lazy && "loaded" !== n.lazy,
            l = e.body && this.$scopedSlots["body-" + e.body] || this.$scopedSlots["default-body"],
            c = o || l ? this.__getSlotScope(e, n, s) : null;
        return l && (l = t("div", {
          staticClass: "q-tree-node-body relative-position"
        }, [t("div", {
          "class": this.contentClass
        }, [l(c)])])), t("div", {
          key: s,
          staticClass: "q-tree-node",
          "class": {
            "q-tree-node-parent": a,
            "q-tree-node-child": !a
          }
        }, [t("div", {
          staticClass: "q-tree-node-header relative-position row no-wrap items-center",
          "class": {
            "q-tree-node-link": n.link,
            "q-tree-node-selected": n.selected,
            disabled: n.disabled
          },
          on: {
            click: function click() {
              i.__onClick(e, n);
            }
          },
          directives: n.selectable ? [{
            name: "ripple"
          }] : null
        }, ["loading" === n.lazy ? t(Kt, {
          staticClass: "q-tree-node-header-media q-mr-xs",
          props: {
            color: this.computedControlColor
          }
        }) : a ? t(dt, {
          staticClass: "q-tree-arrow q-mr-xs transition-generic",
          "class": {
            "q-tree-arrow-rotate": n.expanded
          },
          props: {
            name: this.computedIcon
          },
          nativeOn: {
            click: function click(t) {
              i.__onExpandClick(e, n, t);
            }
          }
        }) : null, t("span", {
          staticClass: "row no-wrap items-center",
          "class": this.contentClass
        }, [n.hasTicking && !n.noTick ? t(je, {
          staticClass: "q-mr-xs",
          props: {
            value: n.indeterminate ? null : n.ticked,
            color: this.computedControlColor,
            dark: this.dark,
            keepColor: !0,
            disable: !n.tickable
          },
          on: {
            input: function input(t) {
              i.__onTickedClick(e, n, t);
            }
          }
        }) : null, o ? o(c) : [this.__getNodeMedia(t, e), t("span", e.label)]])]), a ? t(Ze, [t("div", {
          directives: [{
            name: "show",
            value: n.expanded
          }],
          staticClass: "q-tree-node-collapsible",
          "class": "text-" + this.color
        }, [l, t("div", {
          staticClass: "q-tree-children",
          "class": {
            disabled: n.disabled
          }
        }, r)])]) : l]);
      },
      __onClick: function __onClick(t, e) {
        this.hasSelection ? e.selectable && this.$emit("update:selected", e.key !== this.selected ? e.key : null) : this.__onExpandClick(t, e), "function" == typeof t.handler && t.handler(t);
      },
      __onExpandClick: function __onExpandClick(t, e, i) {
        void 0 !== i && i.stopPropagation(), this.setExpanded(e.key, !e.expanded, t, e);
      },
      __onTickedClick: function __onTickedClick(t, e, i) {
        if (e.indeterminate && i && (i = !1), e.strictTicking) this.setTicked([e.key], i);else if (e.leafTicking) {
          var s = [],
              n = function n(t) {
            t.isParent ? (i || t.noTick || !t.tickable || s.push(t.key), t.leafTicking && t.children.forEach(n)) : t.noTick || !t.tickable || t.leafFilteredTicking && !t.matchesFilter || s.push(t.key);
          };

          n(e), this.setTicked(s, i);
        }
      }
    },
    render: function render(t) {
      var e = this.__getChildren(t, this.nodes);

      return t("div", {
        staticClass: "q-tree relative-position",
        "class": this.classes
      }, 0 === e.length ? this.filter ? this.noResultsLabel || this.$q.i18n.tree.noResults : this.noNodesLabel || this.$q.i18n.tree.noNodes : e);
    },
    created: function created() {
      this.defaultExpandAll && this.expandAll();
    }
  };

  function Dn(t) {
    t.__doneUploading = !1, t.__failed = !1, t.__uploaded = 0, t.__progress = 0;
  }

  var zn = {
    name: "QUploader",
    mixins: [Ue],
    props: {
      name: {
        type: String,
        "default": "file"
      },
      headers: Object,
      url: {
        type: String,
        required: !0
      },
      urlFactory: {
        type: Function,
        required: !1
      },
      uploadFactory: Function,
      additionalFields: {
        type: Array,
        "default": function _default() {
          return [];
        }
      },
      noContentType: Boolean,
      method: {
        type: String,
        "default": "POST"
      },
      extensions: String,
      multiple: Boolean,
      hideUploadButton: Boolean,
      hideUploadProgress: Boolean,
      noThumbnails: Boolean,
      autoExpand: Boolean,
      expandStyle: [Array, String, Object],
      expandClass: [Array, String, Object],
      withCredentials: Boolean,
      sendRaw: {
        type: Boolean,
        "default": !1
      }
    },
    data: function data() {
      return {
        queue: [],
        files: [],
        uploading: !1,
        uploadedSize: 0,
        totalSize: 0,
        xhrs: [],
        focused: !1,
        dnd: !1,
        expanded: !1
      };
    },
    computed: {
      queueLength: function queueLength() {
        return this.queue.length;
      },
      hasExpandedContent: function hasExpandedContent() {
        return this.files.length > 0;
      },
      label: function label() {
        var t = $t(this.totalSize);
        return this.uploading ? this.progress.toFixed(2) + "% (" + $t(this.uploadedSize) + " / " + t + ")" : this.queueLength + " (" + t + ")";
      },
      progress: function progress() {
        return this.totalSize ? Math.min(99.99, this.uploadedSize / this.totalSize * 100) : 0;
      },
      addDisabled: function addDisabled() {
        return !this.multiple && this.queueLength >= 1;
      },
      filesStyle: function filesStyle() {
        if (this.maxHeight) return {
          maxHeight: this.maxHeight
        };
      },
      dndClass: function dndClass() {
        var t = ["text-" + this.color];
        return this.isInverted && t.push("inverted"), t;
      },
      classes: function classes() {
        return {
          "q-uploader-expanded": this.expanded,
          "q-uploader-dark": this.dark,
          "q-uploader-files-no-border": this.isInverted || !this.hideUnderline
        };
      },
      progressColor: function progressColor() {
        return this.dark ? "white" : "grey";
      },
      computedExtensions: function computedExtensions() {
        if (this.extensions) return this.extensions.split(",").map(function (t) {
          return (t = t.trim()).endsWith("/*") && (t = t.slice(0, t.length - 1)), t;
        });
      }
    },
    watch: {
      hasExpandedContent: function hasExpandedContent(t) {
        !1 === t ? this.expanded = !1 : this.autoExpand && (this.expanded = !0);
      }
    },
    methods: {
      add: function add(t) {
        t && this.__add(null, t);
      },
      __onDragOver: function __onDragOver(t) {
        F(t), this.dnd = !0;
      },
      __onDragLeave: function __onDragLeave(t) {
        F(t), this.dnd = !1;
      },
      __onDrop: function __onDrop(t) {
        F(t), this.dnd = !1;
        var e = t.dataTransfer.files;
        0 !== e.length && (e = this.multiple ? e : [e[0]], this.extensions && 0 === (e = this.__filter(e)).length || this.__add(null, e));
      },
      __filter: function __filter(t) {
        var e = this;
        return Array.prototype.filter.call(t, function (t) {
          return e.computedExtensions.some(function (e) {
            return t.type.toUpperCase().startsWith(e.toUpperCase()) || t.name.toUpperCase().endsWith(e.toUpperCase());
          });
        });
      },
      __add: function __add(t, e) {
        var i = this;

        if (!this.addDisabled) {
          e = Array.prototype.slice.call(e || t.target.files), this.$refs.file.value = "";
          var s = [];
          (e = e.filter(function (t) {
            return !i.queue.some(function (e) {
              return t.name === e.name;
            });
          }).map(function (t) {
            if (Dn(t), t.__size = $t(t.size), t.__timestamp = new Date().getTime(), i.noThumbnails || !t.type.toUpperCase().startsWith("IMAGE")) i.queue.push(t);else {
              var e = new FileReader(),
                  n = new Promise(function (s, n) {
                e.onload = function (e) {
                  var n = new Image();
                  n.src = e.target.result, t.__img = n, i.queue.push(t), i.__computeTotalSize(), s(!0);
                }, e.onerror = function (t) {
                  n(t);
                };
              });
              e.readAsDataURL(t), s.push(n);
            }
            return t;
          })).length > 0 && (this.files = this.files.concat(e), Promise.all(s).then(function () {
            i.$emit("add", e);
          }), this.__computeTotalSize());
        }
      },
      __computeTotalSize: function __computeTotalSize() {
        this.totalSize = this.queueLength ? this.queue.map(function (t) {
          return t.size;
        }).reduce(function (t, e) {
          return t + e;
        }) : 0;
      },
      __remove: function __remove(t) {
        var e = t.name,
            i = t.__doneUploading;
        this.uploading && !i ? (this.$emit("remove:abort", t, t.xhr), t.xhr && t.xhr.abort(), this.uploadedSize -= t.__uploaded) : this.$emit("remove:" + (i ? "done" : "cancel"), t, t.xhr), i || (this.queue = this.queue.filter(function (t) {
          return t.name !== e;
        })), t.__removed = !0, this.files = this.files.filter(function (t) {
          return t.name !== e;
        }), this.files.length || (this.uploading = !1), this.__computeTotalSize();
      },
      __pick: function __pick() {
        !this.addDisabled && this.$q.platform.is.mozilla && this.$refs.file.click();
      },
      __getUploadPromise: function __getUploadPromise(t) {
        var e = this;

        if (Dn(t), this.uploadFactory) {
          var i = function i(_i2) {
            var s = _i2 * t.size;
            e.uploadedSize += s - t.__uploaded, t.__uploaded = s, t.__progress = Math.min(99, parseInt(100 * _i2, 10)), e.$forceUpdate();
          };

          return new Promise(function (s, n) {
            e.uploadFactory(t, i).then(function (t) {
              t.__doneUploading = !0, t.__progress = 100, e.$emit("uploaded", t), e.$forceUpdate(), s(t);
            })["catch"](function (i) {
              t.__failed = !0, e.$emit("fail", t), e.$forceUpdate(), n(i);
            });
          });
        }

        var s = new FormData(),
            n = new XMLHttpRequest();

        try {
          this.additionalFields.forEach(function (t) {
            s.append(t.name, t.value);
          }), !0 !== this.noContentType && s.append("Content-Type", t.type || "application/octet-stream"), s.append(this.name, t);
        } catch (t) {
          return;
        }

        return t.xhr = n, new Promise(function (i, o) {
          n.upload.addEventListener("progress", function (i) {
            if (!t.__removed) {
              i.percent = i.total ? i.loaded / i.total : 0;
              var s = i.percent * t.size;
              e.uploadedSize += s - t.__uploaded, t.__uploaded = s, t.__progress = Math.min(99, parseInt(100 * i.percent, 10));
            }
          }, !1), n.onreadystatechange = function () {
            n.readyState < 4 || (n.status && n.status < 400 ? (t.__doneUploading = !0, t.__progress = 100, e.$emit("uploaded", t, n), i(t)) : (t.__failed = !0, e.$emit("fail", t, n), o(n)));
          }, n.onerror = function () {
            t.__failed = !0, e.$emit("fail", t, n), o(n);
          }, (e.urlFactory ? e.urlFactory(t) : Promise.resolve(e.url)).then(function (i) {
            n.open(e.method, i, !0), e.withCredentials && (n.withCredentials = !0), e.headers && Object.keys(e.headers).forEach(function (t) {
              n.setRequestHeader(t, e.headers[t]);
            }), e.xhrs.push(n), e.sendRaw ? n.send(t) : n.send(s);
          });
        });
      },
      pick: function pick() {
        this.addDisabled || this.$refs.file.click();
      },
      upload: function upload() {
        var t = this,
            e = this.queueLength;

        if (!this.disable && 0 !== e) {
          var i = 0;
          this.uploadedSize = 0, this.uploading = !0, this.xhrs = [], this.$emit("start");

          var s = function s() {
            ++i === e && (t.uploading = !1, t.xhrs = [], t.queue = t.queue.filter(function (t) {
              return !t.__doneUploading;
            }), t.__computeTotalSize(), t.$emit("finish"));
          };

          this.queue.map(function (e) {
            return t.__getUploadPromise(e);
          }).forEach(function (t) {
            t.then(s)["catch"](s);
          });
        }
      },
      abort: function abort() {
        this.xhrs.forEach(function (t) {
          t.abort();
        }), this.uploading = !1, this.$emit("abort");
      },
      reset: function reset() {
        this.abort(), this.files = [], this.queue = [], this.expanded = !1, this.__computeTotalSize(), this.$emit("reset");
      }
    },
    render: function render(t) {
      var e = this,
          i = [t("div", {
        staticClass: "col q-input-target ellipsis",
        "class": this.alignClass
      }, [this.label])];
      return this.uploading ? i.push(t(Kt, {
        slot: "after",
        staticClass: "q-if-end self-center",
        props: {
          size: "24px"
        }
      }), t(dt, {
        slot: "after",
        staticClass: "q-if-end self-center q-if-control",
        props: {
          name: this.$q.icon.uploader["clear" + (this.isInverted ? "Inverted" : "")]
        },
        nativeOn: {
          click: this.abort
        }
      })) : (i.push(t(dt, {
        slot: "after",
        staticClass: "q-uploader-pick-button self-center q-if-control relative-position overflow-hidden",
        props: {
          name: this.$q.icon.uploader.add
        },
        attrs: {
          disabled: this.addDisabled
        }
      }, [t("input", {
        ref: "file",
        staticClass: "q-uploader-input absolute-full cursor-pointer",
        attrs: Object.assign({
          type: "file",
          accept: this.extensions
        }, this.multiple ? {
          multiple: !0
        } : {}),
        on: {
          change: this.__add
        }
      })])), this.hideUploadButton || i.push(t(dt, {
        slot: "after",
        staticClass: "q-if-control self-center",
        props: {
          name: this.$q.icon.uploader.upload
        },
        attrs: {
          disabled: 0 === this.queueLength
        },
        nativeOn: {
          click: this.upload
        }
      }))), this.hasExpandedContent && i.push(t(dt, {
        slot: "after",
        staticClass: "q-if-control generic_transition self-center",
        "class": {
          "rotate-180": this.expanded
        },
        props: {
          name: this.$q.icon.uploader.expand
        },
        nativeOn: {
          click: function click() {
            e.expanded = !e.expanded;
          }
        }
      })), t("div", {
        staticClass: "q-uploader relative-position",
        "class": this.classes,
        on: {
          dragover: this.__onDragOver
        }
      }, [t(Je, {
        ref: "input",
        props: {
          prefix: this.prefix,
          suffix: this.suffix,
          stackLabel: this.stackLabel,
          floatLabel: this.floatLabel,
          error: this.error,
          warning: this.warning,
          readonly: this.readonly,
          inverted: this.inverted,
          invertedLight: this.invertedLight,
          dark: this.dark,
          hideUnderline: this.hideUnderline,
          before: this.before,
          after: this.after,
          color: this.color,
          align: this.align,
          noParentField: this.noParentField,
          length: this.queueLength,
          additionalLength: !0
        }
      }, i), t(Ze, [t("div", {
        "class": this.expandClass,
        style: this.expandStyle,
        directives: [{
          name: "show",
          value: this.expanded
        }]
      }, [t(pt, {
        staticClass: "q-uploader-files q-py-none scroll",
        style: this.filesStyle,
        props: {
          dark: this.dark
        }
      }, this.files.map(function (i) {
        return t(yt, {
          key: i.name + i.__timestamp,
          staticClass: "q-uploader-file q-pa-xs"
        }, [!e.hideUploadProgress && t(Is, {
          staticClass: "q-uploader-progress-bg absolute-full",
          props: {
            color: i.__failed ? "negative" : e.progressColor,
            percentage: i.__progress,
            height: "100%"
          }
        }) || void 0, !e.hideUploadProgress && t("div", {
          staticClass: "q-uploader-progress-text absolute"
        }, [i.__progress + "%"]) || void 0, t(wt, {
          props: i.__img ? {
            image: i.__img.src
          } : {
            icon: e.$q.icon.uploader.file,
            color: e.color
          }
        }), t(xt, {
          props: {
            label: i.name,
            sublabel: i.__size
          }
        }), t(wt, {
          props: {
            right: !0
          }
        }, [t(Ge, {
          staticClass: "cursor-pointer",
          props: {
            icon: e.$q.icon.uploader[i.__doneUploading ? "done" : "clear"],
            color: e.color
          },
          nativeOn: {
            click: function click() {
              e.__remove(i);
            }
          }
        })])]);
      }))])]), this.dnd && t("div", {
        staticClass: "q-uploader-dnd flex row items-center justify-center absolute-full",
        "class": this.dndClass,
        on: {
          dragenter: F,
          dragover: F,
          dragleave: this.__onDragLeave,
          drop: this.__onDrop
        }
      }) || void 0]);
    }
  },
      Rn = {
    name: "QVideo",
    props: {
      src: {
        type: String,
        required: !0
      }
    },
    computed: {
      iframeData: function iframeData() {
        return {
          attrs: {
            src: this.src,
            frameborder: "0",
            allowfullscreen: !0
          }
        };
      }
    },
    render: function render(t) {
      return t("div", {
        staticClass: "q-video"
      }, [t("iframe", this.iframeData)]);
    }
  },
      In = Object.freeze({
    QActionSheet: St,
    QAjaxBar: zt,
    QAlert: Jt,
    QAutocomplete: ue,
    QBreadcrumbs: de,
    QBreadcrumbsEl: pe,
    QBtn: Yt,
    QBtnGroup: fe,
    QBtnDropdown: me,
    QBtnToggle: ge,
    QCard: ve,
    QCardTitle: {
      name: "QCardTitle",
      render: function render(t) {
        return t("div", {
          staticClass: "q-card-primary q-card-container row no-wrap"
        }, [t("div", {
          staticClass: "col column"
        }, [t("div", {
          staticClass: "q-card-title"
        }, this.$slots["default"]), t("div", {
          staticClass: "q-card-subtitle"
        }, [this.$slots.subtitle])]), t("div", {
          staticClass: "col-auto self-center q-card-title-extra"
        }, [this.$slots.right])]);
      }
    },
    QCardMain: {
      name: "QCardMain",
      render: function render(t) {
        return t("div", {
          staticClass: "q-card-main q-card-container"
        }, this.$slots["default"]);
      }
    },
    QCardActions: be,
    QCardMedia: _e,
    QCardSeparator: ye,
    QCarousel: ze,
    QCarouselSlide: Re,
    QCarouselControl: Ie,
    QChatMessage: He,
    QCheckbox: je,
    QChip: Ve,
    QChipsInput: Xe,
    QCollapsible: ei,
    QColor: di,
    QColorPicker: hi,
    QContextMenu: pi,
    QDatetime: ji,
    QDatetimePicker: Ai,
    QDialog: Gi,
    QEditor: fs,
    QFab: gs,
    QFabAction: vs,
    QField: bs,
    QIcon: dt,
    QInfiniteScroll: _s,
    QInnerLoading: ys,
    QInput: Ui,
    QInputFrame: Je,
    QJumbotron: ws,
    QKnob: Cs,
    QLayout: Ss,
    QLayoutDrawer: $s,
    QLayoutFooter: Ts,
    QLayoutHeader: Ps,
    QPage: Ms,
    QPageContainer: Ls,
    QPageSticky: Bs,
    QItem: yt,
    QItemSeparator: kt,
    QItemMain: xt,
    QItemSide: wt,
    QItemTile: Ge,
    QItemWrapper: ce,
    QList: pt,
    QListHeader: Es,
    QModal: ut,
    QModalLayout: Ns,
    QNoSsr: Os,
    QResizeObservable: Wi,
    QScrollObservable: xs,
    QWindowResizeObservable: ks,
    QOptionGroup: Xi,
    QPagination: Ds,
    QParallax: zs,
    QPopover: ae,
    QProgress: Is,
    QPullToRefresh: Hs,
    QRadio: Ki,
    QRange: js,
    QRating: Vs,
    QScrollArea: Ws,
    QSearch: Us,
    QSelect: Ys,
    QSlideTransition: Ze,
    QSlider: ai,
    QSpinner: Kt,
    QSpinnerAudio: Js,
    QSpinnerBall: Xs,
    QSpinnerBars: Gs,
    QSpinnerCircles: Zs,
    QSpinnerComment: tn,
    QSpinnerCube: en,
    QSpinnerDots: sn,
    QSpinnerFacebook: nn,
    QSpinnerGears: on,
    QSpinnerGrid: rn,
    QSpinnerHearts: an,
    QSpinnerHourglass: ln,
    QSpinnerInfinity: cn,
    QSpinnerIos: hn,
    QSpinnerMat: Ut,
    QSpinnerOval: un,
    QSpinnerPie: dn,
    QSpinnerPuff: pn,
    QSpinnerRadio: fn,
    QSpinnerRings: mn,
    QSpinnerTail: gn,
    QStep: bn,
    QStepper: _n,
    QStepperNavigation: {
      name: "QStepperNavigation",
      render: function render(t) {
        return t("div", {
          staticClass: "q-stepper-nav order-last row items-center"
        }, [this.$slots.left, t("div", {
          staticClass: "col"
        }), this.$slots["default"]]);
      }
    },
    QRouteTab: wn,
    QTab: Cn,
    QTabPane: xn,
    QTabs: kn,
    QTable: $n,
    QTh: Sn,
    QTr: Tn,
    QTd: Pn,
    QTableColumns: Mn,
    QTimeline: Ln,
    QTimelineEntry: Bn,
    QToggle: Yi,
    QToolbar: En,
    QToolbarTitle: Nn,
    QTooltip: ts,
    QTree: On,
    QUploader: zn,
    QVideo: Rn
  });

  function Hn(t, e) {
    var i = e.value,
        s = (e.modifiers, t.__qbacktotop);

    if (i) {
      if ("number" == typeof i) return s.offset = i, void s.update();
      if (i && Object(i) !== i) console.error("v-back-to-top requires an object {offset, duration} as parameter", t);else {
        if (i.offset) {
          if ("number" != typeof i.offset) return void console.error("v-back-to-top requires a number as offset", t);
          s.offset = i.offset;
        }

        if (i.duration) {
          if ("number" != typeof i.duration) return void console.error("v-back-to-top requires a number as duration", t);
          s.duration = i.duration;
        }

        s.update();
      }
    } else s.update();
  }

  var Fn = {
    name: "back-to-top",
    bind: function bind(t) {
      var e = {
        offset: 200,
        duration: 300,
        updateNow: function updateNow() {
          var i = Z(e.scrollTarget) <= e.offset;
          i !== t.classList.contains("hidden") && t.classList[i ? "add" : "remove"]("hidden");
        },
        goToTop: function goToTop() {
          it(e.scrollTarget, 0, e.animate ? e.duration : 0);
        },
        goToTopKey: function goToTopKey(t) {
          13 === t.keyCode && it(e.scrollTarget, 0, e.animate ? e.duration : 0);
        }
      };
      e.update = Zi(e.updateNow, 25), t.classList.add("hidden"), t.__qbacktotop = e;
    },
    inserted: function inserted(t, e) {
      var i = t.__qbacktotop;
      i.scrollTarget = G(t), i.animate = e.modifiers.animate, Hn(t, e), i.scrollTarget.addEventListener("scroll", i.update, L.passive), window.addEventListener("resize", i.update, L.passive), t.addEventListener("click", i.goToTop), t.addEventListener("keyup", i.goToTopKey);
    },
    update: function update(t, e) {
      JSON.stringify(e.oldValue) !== JSON.stringify(e.value) ? Hn(t, e) : setTimeout(function () {
        t.__qbacktotop && t.__qbacktotop.updateNow();
      }, 0);
    },
    unbind: function unbind(t) {
      var e = t.__qbacktotop;
      e && (e.scrollTarget.removeEventListener("scroll", e.update, L.passive), window.removeEventListener("resize", e.update, L.passive), t.removeEventListener("click", e.goToTop), t.removeEventListener("keyup", e.goToTopKey), delete t.__qbacktotop);
    }
  },
      An = {
    name: "go-back",
    bind: function bind(t, e, i) {
      var s = e.value,
          n = e.modifiers,
          o = {
        value: s,
        position: window.history.length - 1,
        single: n.single
      };
      l.is.cordova ? o.goBack = function () {
        i.context.$router.go(o.single ? -1 : o.position - window.history.length);
      } : o.goBack = function () {
        i.context.$router.replace(o.value);
      }, o.goBackKey = function (t) {
        13 === t.keyCode && o.goBack(t);
      }, t.__qgoback = o, t.addEventListener("click", o.goBack), t.addEventListener("keyup", o.goBackKey);
    },
    update: function update(t, e) {
      e.oldValue !== e.value && (t.__qgoback.value = e.value);
    },
    unbind: function unbind(t) {
      var e = t.__qgoback;
      e && (t.removeEventListener("click", e.goBack), t.removeEventListener("keyup", e.goBackKey), delete t.__qgoback);
    }
  };

  function Qn(t, e) {
    var i = t.__qscrollfire;
    if ("function" != typeof e.value) return i.scrollTarget.removeEventListener("scroll", i.scroll), void console.error("v-scroll-fire requires a function as parameter", t);
    i.handler = e.value, "function" != typeof e.oldValue && (i.scrollTarget.addEventListener("scroll", i.scroll, L.passive), i.scroll());
  }

  var jn = {
    name: "scroll-fire",
    bind: function bind(t, e) {
      var i = {
        scroll: Zi(function () {
          var e, s;
          i.scrollTarget === window ? (s = t.getBoundingClientRect().bottom, e = window.innerHeight) : (s = Q(t).top + V(t), e = Q(i.scrollTarget).top + V(i.scrollTarget)), s > 0 && s < e && (i.scrollTarget.removeEventListener("scroll", i.scroll, L.passive), i.handler(t));
        }, 25)
      };
      t.__qscrollfire = i;
    },
    inserted: function inserted(t, e) {
      t.__qscrollfire.scrollTarget = G(t), Qn(t, e);
    },
    update: function update(t, e) {
      e.value !== e.oldValue && Qn(t, e);
    },
    unbind: function unbind(t) {
      var e = t.__qscrollfire;
      e && (e.scrollTarget.removeEventListener("scroll", e.scroll, L.passive), delete t.__qscrollfire);
    }
  };

  function Vn(t, e) {
    var i = t.__qscroll;
    if ("function" != typeof e.value) return i.scrollTarget.removeEventListener("scroll", i.scroll, L.passive), void console.error("v-scroll requires a function as parameter", t);
    i.handler = e.value, "function" != typeof e.oldValue && i.scrollTarget.addEventListener("scroll", i.scroll, L.passive);
  }

  var Wn = {
    name: "scroll",
    bind: function bind(t, e) {
      var i = {
        scroll: function scroll() {
          var t;
          i.handler(Z(i.scrollTarget), (t = i.scrollTarget) === window ? window.pageXOffset || window.scrollX || document.body.scrollLeft || 0 : t.scrollLeft);
        }
      };
      t.__qscroll = i;
    },
    inserted: function inserted(t, e) {
      t.__qscroll.scrollTarget = G(t), Vn(t, e);
    },
    update: function update(t, e) {
      e.oldValue !== e.value && Vn(t, e);
    },
    unbind: function unbind(t) {
      var e = t.__qscroll;
      e && (e.scrollTarget.removeEventListener("scroll", e.scroll, L.passive), delete t.__qscroll);
    }
  };

  function Un(t, e) {
    var i = t.__qtouchhold;
    i.duration = parseInt(e.arg, 10) || 600, e.oldValue !== e.value && (i.handler = e.value);
  }

  var Kn = {
    name: "touch-hold",
    bind: function bind(t, e) {
      var i = !e.modifiers.noMouse,
          s = e.modifiers.stop,
          n = e.modifiers.prevent,
          o = {
        mouseStart: function mouseStart(t) {
          B(t) && (document.addEventListener("mousemove", o.mouseAbort), document.addEventListener("mouseup", o.mouseAbort), o.start(t));
        },
        mouseAbort: function mouseAbort(t) {
          document.removeEventListener("mousemove", o.mouseAbort), document.removeEventListener("mouseup", o.mouseAbort), o.abort(t);
        },
        start: function start(t) {
          var e = new Date().getTime();
          s && t.stopPropagation(), n && t.preventDefault(), o.timer = setTimeout(function () {
            i && (document.removeEventListener("mousemove", o.mouseAbort), document.removeEventListener("mouseup", o.mouseAbort)), o.handler({
              evt: t,
              position: N(t),
              duration: new Date().getTime() - e
            });
          }, o.duration);
        },
        abort: function abort(t) {
          clearTimeout(o.timer), o.timer = null;
        }
      };
      t.__qtouchhold = o, Un(t, e), i && t.addEventListener("mousedown", o.mouseStart), t.addEventListener("touchstart", o.start), t.addEventListener("touchmove", o.abort), t.addEventListener("touchend", o.abort);
    },
    update: function update(t, e) {
      Un(t, e);
    },
    unbind: function unbind(t, e) {
      var i = t.__qtouchhold;
      i && (t.removeEventListener("touchstart", i.start), t.removeEventListener("touchend", i.abort), t.removeEventListener("touchmove", i.abort), t.removeEventListener("mousedown", i.mouseStart), document.removeEventListener("mousemove", i.mouseAbort), document.removeEventListener("mouseup", i.mouseAbort), delete t.__qtouchhold);
    }
  },
      Yn = Object.freeze({
    BackToTop: Fn,
    CloseOverlay: {
      name: "close-overlay",
      bind: function bind(t, e, i) {
        var s = function s(t) {
          for (var e = i.componentInstance; e = e.$parent;) {
            var s = e.$options.name;

            if ("QPopover" === s || "QModal" === s) {
              e.hide(t);
              break;
            }
          }
        },
            n = function n(t) {
          13 === t.keyCode && s(t);
        };

        t.__qclose = {
          handler: s,
          handlerKey: n
        }, t.addEventListener("click", s), t.addEventListener("keyup", n);
      },
      unbind: function unbind(t) {
        var e = t.__qclose;
        e && (t.removeEventListener("click", e.handler), t.removeEventListener("keyup", e.handlerKey), delete t.__qclose);
      }
    },
    GoBack: An,
    Ripple: Ht,
    ScrollFire: jn,
    Scroll: Wn,
    TouchHold: Kn,
    TouchPan: Ce,
    TouchSwipe: Fe
  });

  function Jn(t, e) {
    return function (s, n) {
      var o = s.className,
          r = function (t, e) {
        var i = {};

        for (var s in t) {
          Object.prototype.hasOwnProperty.call(t, s) && -1 === e.indexOf(s) && (i[s] = t[s]);
        }

        return i;
      }(s, ["className"]);

      return new Promise(function (s, a) {
        if (i) return s();
        var l = document.createElement("div");
        document.body.appendChild(l);

        var c = function c(t) {
          s(t), u.$destroy();
        },
            h = function h(t) {
          a(t || new Error()), u.$destroy();
        },
            u = new e({
          el: l,
          data: function data() {
            return {
              props: r
            };
          },
          render: function render(e) {
            return e(t, {
              ref: "modal",
              props: r,
              "class": o,
              on: {
                ok: c,
                cancel: h
              }
            });
          },
          mounted: function mounted() {
            this.$refs.modal.show();
          }
        });

        n && n.then(c, h);
      });
    };
  }

  var Xn,
      Gn = {
    install: function install(t) {
      var e = t.$q,
          i = t.Vue;
      this.create = e.actionSheet = Jn(St, i);
    }
  };

  function Zn(t) {
    void 0 === Xn && (Xn = l.is.winphone ? "msapplication-navbutton-color" : l.is.safari ? "apple-mobile-web-app-status-bar-style" : "theme-color");

    var e = function (t) {
      var e = document.getElementsByTagName("META");

      for (var i in e) {
        if (e[i].name === t) return e[i];
      }
    }(Xn),
        i = void 0 === e;

    i && (e = document.createElement("meta")).setAttribute("name", Xn), e.setAttribute("content", t), i && document.head.appendChild(e);
  }

  var to = {
    install: function install(t) {
      var e = t.$q,
          s = (t.Vue, t.cfg);
      this.set = !i && l.is.mobile && (l.is.cordova || l.is.winphone || l.is.safari || l.is.webkit || l.is.vivaldi) ? function (t) {
        var e = t || y("primary");
        l.is.cordova && window.StatusBar ? window.StatusBar.backgroundColorByHexString(e) : Zn(e);
      } : function () {}, e.addressbarColor = this, s.addressbarColor && this.set(s.addressbarColor);
    }
  },
      eo = {},
      io = {
    isCapable: !1,
    isActive: !1,
    request: function request(t) {
      this.isCapable && !this.isActive && (t = t || document.documentElement)[eo.request]();
    },
    exit: function exit() {
      this.isCapable && this.isActive && document[eo.exit]();
    },
    toggle: function toggle(t) {
      this.isActive ? this.exit() : this.request(t);
    },
    install: function install(t) {
      var e = this,
          s = t.$q,
          n = t.Vue;
      s.fullscreen = this, i || (eo.request = ["requestFullscreen", "msRequestFullscreen", "mozRequestFullScreen", "webkitRequestFullscreen"].find(function (t) {
        return document.documentElement[t];
      }), this.isCapable = void 0 !== eo.request, this.isCapable && (eo.exit = ["exitFullscreen", "msExitFullscreen", "mozCancelFullScreen", "webkitExitFullscreen"].find(function (t) {
        return document[t];
      }), this.isActive = !!(document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement), ["onfullscreenchange", "onmsfullscreenchange", "onmozfullscreenchange", "onwebkitfullscreenchange"].forEach(function (t) {
        document[t] = function () {
          e.isActive = !e.isActive;
        };
      }), n.util.defineReactive(this, "isActive", this.isActive)));
    }
  },
      so = {
    appVisible: !1,
    install: function install(t) {
      var e = this,
          s = t.$q,
          n = t.Vue;
      if (i) this.appVisible = s.appVisible = !0;else {
        var o, r;
        void 0 !== document.hidden ? (o = "hidden", r = "visibilitychange") : void 0 !== document.msHidden ? (o = "msHidden", r = "msvisibilitychange") : void 0 !== document.webkitHidden && (o = "webkitHidden", r = "webkitvisibilitychange");

        var a = function a() {
          e.appVisible = s.appVisible = !document[o];
        };

        a(), r && void 0 !== document[o] && (n.util.defineReactive(s, "appVisible", this.appVisible), document.addEventListener(r, a, !1));
      }
    }
  };

  function no(t) {
    return encodeURIComponent(t);
  }

  function oo(t) {
    return decodeURIComponent(t);
  }

  function ro(t) {
    if ("" === t) return t;
    0 === t.indexOf('"') && (t = t.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, "\\")), t = oo(t.replace(/\+/g, " "));

    try {
      t = JSON.parse(t);
    } catch (t) {}

    return t;
  }

  function ao(t, e, i, s) {
    void 0 === i && (i = {});
    var n = i.expires,
        o = "number" == typeof i.expires;
    o && (n = new Date()).setMilliseconds(n.getMilliseconds() + 864e5 * i.expires);
    var r,
        a = no(t) + "=" + no((r = e) === Object(r) ? JSON.stringify(r) : "" + r),
        l = [a, n ? "; Expires=" + n.toUTCString() : "", i.path ? "; Path=" + i.path : "", i.domain ? "; Domain=" + i.domain : "", i.httpOnly ? "; HttpOnly" : "", i.secure ? "; Secure" : ""].join("");

    if (s) {
      s.res.setHeader("Set-Cookie", l);
      var c = s.req.headers.cookie || "";

      if (o && i.expires < 0) {
        var h = lo(t, s);
        void 0 !== h && (c = c.replace(t + "=" + h + "; ", "").replace("; " + t + "=" + h, "").replace(t + "=" + h, ""));
      } else c = c ? a + "; " + c : l;

      s.req.headers.cookie = c;
    } else document.cookie = l;
  }

  function lo(t, e) {
    for (var i, s, n, o = t ? void 0 : {}, r = e ? e.req.headers : document, a = r.cookie ? r.cookie.split("; ") : [], l = 0, c = a.length; l < c; l++) {
      if (s = oo((i = a[l].split("=")).shift()), n = i.join("="), t) {
        if (t === s) {
          o = ro(n);
          break;
        }
      } else o[s] = n;
    }

    return o;
  }

  function co(t) {
    void 0 === t && (t = {});
    var e = t.ssr;
    return {
      get: function get(t) {
        return lo(t, e);
      },
      set: function set(t, i, s) {
        return ao(t, i, s, e);
      },
      has: function has(t) {
        return function (t, e) {
          return void 0 !== lo(t, e);
        }(t, e);
      },
      remove: function remove(t, i) {
        return function (t, e, i) {
          ao(t, "", Object.assign({}, e, {
            expires: -1
          }), i);
        }(t, i, e);
      },
      all: function all() {
        return lo(null, e);
      }
    };
  }

  var ho,
      uo,
      po,
      fo,
      mo = {
    parseSSR: function parseSSR(t) {
      return t ? co({
        ssr: t
      }) : this;
    },
    install: function install(t) {
      var e = t.$q,
          s = t.queues;
      i ? s.server.push(function (t, e) {
        t.cookies = co(e);
      }) : (Object.assign(this, co()), e.cookies = this);
    }
  },
      go = {
    install: function install(t) {
      var e = t.$q,
          i = t.Vue;
      this.create = e.dialog = Jn(Gi, i);
    }
  },
      vo = {
    start: function start() {},
    stop: function stop() {},
    increment: function increment() {},
    install: function install(t) {
      var e = t.$q,
          s = t.Vue,
          n = t.cfg;
      if (i) e.loadingBar = this;else {
        var o = e.loadingBar = new s({
          render: function render(t) {
            return t(zt, {
              ref: "bar",
              props: n.loadingBar
            });
          }
        }).$mount().$refs.bar;
        Object.assign(this, {
          start: o.start,
          stop: o.stop,
          increment: o.increment
        }), document.body.appendChild(e.loadingBar.$parent.$el);
      }
    }
  },
      bo = {},
      _o = {
    delay: 0,
    message: !1,
    spinnerSize: 80,
    spinnerColor: "white",
    messageColor: "white",
    spinner: Kt,
    customClass: !1
  },
      yo = {
    isActive: !1,
    show: function show(t) {
      var e = this;
      i || ("string" == typeof (bo = Object.assign({}, _o, t)).customClass && (bo.customClass = bo.customClass.trim()), this.isActive ? ho && ho.$forceUpdate() : (uo = setTimeout(function () {
        uo = null;
        var t = document.createElement("div");
        document.body.appendChild(t), document.body.classList.add("with-loading"), ho = new e.__Vue({
          name: "QLoading",
          el: t,
          render: function render(t) {
            return t("div", {
              staticClass: "q-loading animate-fade fullscreen column flex-center z-max",
              "class": bo.customClass
            }, [t(bo.spinner, {
              props: {
                color: bo.spinnerColor,
                size: bo.spinnerSize
              }
            }), bo.message ? t("div", {
              "class": "text-" + bo.messageColor,
              domProps: {
                innerHTML: bo.message
              }
            }) : null]);
          }
        });
      }, bo.delay), this.isActive = !0));
    },
    hide: function hide() {
      this.isActive && (uo ? (clearTimeout(uo), uo = null) : (ho.$destroy(), document.body.classList.remove("with-loading"), ho.$el.remove(), ho = null), this.isActive = !1);
    },
    setDefaults: function setDefaults(t) {
      Object.assign(_o, t);
    },
    __Vue: null,
    install: function install(t) {
      var e = t.$q,
          i = t.Vue,
          s = t.cfg.loading;
      s && this.setDefaults(s), e.loading = this, this.__Vue = i;
    }
  };

  function wo(t) {
    t.title && (t.title = t.titleTemplate ? t.titleTemplate(t.title || "") : t.title, delete t.titleTemplate), [["meta", "content"], ["link", "href"]].forEach(function (e) {
      var i = t[e[0]],
          s = e[1];

      for (var n in i) {
        var o = i[n];
        o.template && (1 === Object.keys(o).length ? delete i[n] : (o[s] = o.template(o[s] || ""), delete o.template));
      }
    });
  }

  function Co(t, e) {
    if (Object.keys(t).length !== Object.keys(e).length) return !0;

    for (var i in t) {
      if (t[i] !== e[i]) return !0;
    }
  }

  function xo(t) {
    return !["class", "style"].includes(t);
  }

  function ko(t) {
    return !["lang", "dir"].includes(t);
  }

  function So(t, e) {
    if (!t._inactive) {
      var i = t.$options.meta;
      i && (ps(!0, e, t.__qMeta), i.stopPropagation) || t.$children && t.$children.forEach(function (t) {
        So(t, e);
      });
    }
  }

  function qo() {
    if (fo) return fo = !1, this.$root.__currentMeta = window.__Q_META__, void document.body.querySelector("script[data-qmeta-init]").remove();
    var t,
        e,
        i,
        s = {
      title: "",
      titleTemplate: null,
      meta: {},
      link: {},
      script: {},
      htmlAttr: {},
      bodyAttr: {}
    };
    So(this.$root, s), wo(s), t = function (t, e) {
      var i = {},
          s = {};
      return t ? (t.title !== e.title && (i.title = e.title), ["meta", "link", "script", "htmlAttr", "bodyAttr"].forEach(function (n) {
        var o = t[n],
            r = e[n];

        if (s[n] = [], o) {
          for (var a in i[n] = {}, o) {
            r.hasOwnProperty(a) || s[n].push(a);
          }

          for (var l in r) {
            o.hasOwnProperty(l) ? Co(o[l], r[l]) && (s[n].push(l), i[n][l] = r[l]) : i[n][l] = r[l];
          }
        } else i[n] = r;
      }), {
        add: i,
        remove: s
      }) : {
        add: e,
        remove: s
      };
    }(this.$root.__currentMeta, s), e = t.add, i = t.remove, e.title && (document.title = e.title), Object.keys(i).length > 0 && (["meta", "link", "script"].forEach(function (t) {
      i[t].forEach(function (e) {
        document.head.querySelector(t + '[data-qmeta="' + e + '"]').remove();
      });
    }), i.htmlAttr.filter(ko).forEach(function (t) {
      document.documentElement.removeAttribute(t);
    }), i.bodyAttr.filter(xo).forEach(function (t) {
      document.body.removeAttribute(t);
    })), ["meta", "link", "script"].forEach(function (t) {
      var i = e[t];

      for (var s in i) {
        var n = document.createElement(t);

        for (var o in i[s]) {
          "innerHTML" !== o && n.setAttribute(o, i[s][o]);
        }

        n.setAttribute("data-qmeta", s), "script" === t && (n.innerHTML = i[s].innerHTML || ""), document.head.appendChild(n);
      }
    }), Object.keys(e.htmlAttr).filter(ko).forEach(function (t) {
      document.documentElement.setAttribute(t, e.htmlAttr[t] || "");
    }), Object.keys(e.bodyAttr).filter(xo).forEach(function (t) {
      document.body.setAttribute(t, e.bodyAttr[t] || "");
    }), this.$root.__currentMeta = s;
  }

  function $o(t) {
    return function (e) {
      var i = t[e];
      return e + (void 0 !== i ? '="' + i + '"' : "");
    };
  }

  function To(t, e) {
    var i = {
      title: "",
      titleTemplate: null,
      meta: {},
      link: {},
      htmlAttr: {},
      bodyAttr: {},
      noscript: {}
    };
    So(t, i), wo(i);
    var s = {
      "%%Q_HTML_ATTRS%%": Object.keys(i.htmlAttr).filter(ko).map($o(i.htmlAttr)).join(" "),
      "%%Q_HEAD_TAGS%%": function (t) {
        var e = "";
        return t.title && (e += "<title>" + t.title + "</title>"), ["meta", "link", "script"].forEach(function (i) {
          var s = t[i];

          for (var n in s) {
            var o = Object.keys(s[n]).filter(function (t) {
              return "innerHTML" !== t;
            }).map($o(s[n]));
            e += "<" + i + " " + o.join(" ") + ' data-qmeta="' + n + '">', "script" === i && (e += (s[n].innerHTML || "") + "<\/script>");
          }
        }), e;
      }(i),
      "%%Q_BODY_ATTRS%%": Object.keys(i.bodyAttr).filter(xo).map($o(i.bodyAttr)).join(" "),
      "%%Q_BODY_TAGS%%": Object.keys(i.noscript).map(function (t) {
        return '<noscript data-qmeta="' + t + '">' + i.noscript[t] + "</noscript>";
      }).join("") + "<script data-qmeta-init>window.__Q_META__=" + (delete i.noscript && JSON.stringify(i)) + "<\/script>"
    };
    return Object.keys(s).forEach(function (t) {
      e = e.replace(t, s[t]);
    }), e;
  }

  function Po() {
    this.$options.meta && ("function" == typeof this.$options.meta ? (this.$options.computed || (this.$options.computed = {}), this.$options.computed.__qMeta = this.$options.meta) : this.__qMeta = this.$options.meta);
  }

  function Mo() {
    this.$options.meta && this.__qMetaUpdate();
  }

  var Lo = {
    install: function install(t) {
      var e = t.queues,
          n = t.Vue;
      i ? (n.prototype.$getMetaHTML = function (t) {
        return function (e) {
          return To(t, e);
        };
      }, n.mixin({
        beforeCreate: Po
      }), e.server.push(function (t, e) {
        e.ssr.Q_HTML_ATTRS += " %%Q_HTML_ATTRS%%", Object.assign(e.ssr, {
          Q_HEAD_TAGS: "%%Q_HEAD_TAGS%%",
          Q_BODY_ATTRS: "%%Q_BODY_ATTRS%%",
          Q_BODY_TAGS: "%%Q_BODY_TAGS%%"
        });
      })) : (fo = s, n.mixin({
        beforeCreate: Po,
        created: function created() {
          this.$options.meta && (this.__qMetaUnwatch = this.$watch("__qMeta", this.__qMetaUpdate));
        },
        activated: Mo,
        deactivated: Mo,
        beforeMount: Mo,
        destroyed: function destroyed() {
          this.$options.meta && (this.__qMetaUnwatch(), this.__qMetaUpdate());
        },
        methods: {
          __qMetaUpdate: function __qMetaUpdate() {
            clearTimeout(po), po = setTimeout(qo.bind(this), 50);
          }
        }
      }));
    }
  },
      Bo = {},
      Eo = ["top-left", "top-right", "bottom-left", "bottom-right", "top", "bottom", "left", "right", "center"];
  var No = {
    create: function create(t) {
      return i ? function () {} : this.__vm.add(t);
    },
    setDefaults: function setDefaults(t) {
      Object.assign(Bo, t);
    },
    install: function install(t) {
      if (i) return t.$q.notify = function () {}, void (t.$q.notify.setDefaults = function () {});
      (function (t) {
        var e = t.Vue,
            i = document.createElement("div");
        document.body.appendChild(i), this.__vm = new e({
          name: "QNotifications",
          data: {
            notifs: {
              center: [],
              left: [],
              right: [],
              top: [],
              "top-left": [],
              "top-right": [],
              bottom: [],
              "bottom-left": [],
              "bottom-right": []
            }
          },
          methods: {
            add: function add(t) {
              var e = this;
              if (!t) return console.error("Notify: parameter required"), !1;
              var i = Object.assign({}, Bo, "string" == typeof t ? {
                message: t
              } : ci(t));

              if (i.position) {
                if (!Eo.includes(i.position)) return console.error("Notify: wrong position: " + i.position), !1;
              } else i.position = "bottom";

              i.__uid = Zt(), void 0 === i.timeout && (i.timeout = 5e3);

              var s = function s() {
                e.remove(i);
              };

              if (t.actions && (i.actions = t.actions.map(function (t) {
                var e = t.handler,
                    i = ci(t);
                return i.handler = "function" == typeof e ? function () {
                  e(), !t.noDismiss && s();
                } : function () {
                  return s();
                }, i;
              })), "function" == typeof t.onDismiss && (i.onDismiss = t.onDismiss), i.closeBtn) {
                var n = [{
                  closeBtn: !0,
                  label: i.closeBtn,
                  handler: s
                }];
                i.actions = i.actions ? i.actions.concat(n) : n;
              }

              i.timeout && (i.__timeout = setTimeout(function () {
                s();
              }, i.timeout + 1e3));
              var o = i.position.indexOf("top") > -1 ? "unshift" : "push";
              return this.notifs[i.position][o](i), s;
            },
            remove: function remove(t) {
              t.__timeout && clearTimeout(t.__timeout);
              var e = this.notifs[t.position].indexOf(t);

              if (-1 !== e) {
                var i = this.$refs["notif_" + t.__uid];

                if (i && i.$el) {
                  var s = i.$el;
                  s.style.left = s.offsetLeft + "px", s.style.width = getComputedStyle(s).width;
                }

                this.notifs[t.position].splice(e, 1), "function" == typeof t.onDismiss && t.onDismiss();
              }
            }
          },
          render: function render(t) {
            var e = this;
            return t("div", {
              staticClass: "q-notifications"
            }, Eo.map(function (i) {
              var s = ["left", "center", "right"].includes(i) ? "center" : i.indexOf("top") > -1 ? "top" : "bottom",
                  n = i.indexOf("left") > -1 ? "start" : i.indexOf("right") > -1 ? "end" : "center",
                  o = ["left", "right"].includes(i) ? "items-" + ("left" === i ? "start" : "end") + " justify-center" : "center" === i ? "flex-center" : "items-" + n;
              return t("transition-group", {
                key: i,
                staticClass: "q-notification-list q-notification-list-" + s + " fixed column " + o,
                tag: "div",
                props: {
                  name: "q-notification-" + i,
                  mode: "out-in"
                }
              }, e.notifs[i].map(function (e) {
                return t(Jt, {
                  ref: "notif_" + e.__uid,
                  key: e.__uid,
                  staticClass: "q-notification",
                  props: e
                }, [e.message]);
              }));
            }));
          }
        }), this.__vm.$mount(i);
      }).call(this, t), t.cfg.notify && this.setDefaults(t.cfg.notify), t.$q.notify = this.create.bind(this), t.$q.notify.setDefaults = this.setDefaults;
    }
  },
      Oo = {
    width: 0,
    sizes: {
      sm: 576,
      md: 768,
      lg: 992,
      xl: 1200
    },
    lt: {
      sm: !0,
      md: !0,
      lg: !0,
      xl: !0
    },
    gt: {},
    xs: !0,
    setSizes: function setSizes() {},
    setDebounce: function setDebounce() {},
    install: function install(t) {
      var e = this,
          n = t.$q,
          o = t.queues,
          r = t.Vue;
      if (i) n.screen = this;else {
        var a,
            l,
            c = function c(t) {
          var i = window.innerWidth,
              s = e.sizes;
          t && i === e.width || (e.width = i, e.gt.xs = i >= s.sm, e.gt.sm = i >= s.md, e.gt.md = i >= s.lg, e.gt.lg = i >= s.xl, e.lt.sm = i < s.sm, e.lt.md = i < s.md, e.lt.lg = i < s.lg, e.lt.xl = i < s.xl, e.xs = e.lt.sm, e.sm = e.gt.xs && e.lt.md, e.md = e.gt.sm && e.lt.lg, e.lg = e.gt.md && e.lt.xl, e.xl = i > s.xl);
        },
            h = {};

        this.setSizes = function (t) {
          t.forEach(function (e) {
            h[e] = t[e];
          });
        }, this.setDebounce = function (t) {
          l = t;
        };

        var u = function u() {
          var t = getComputedStyle(document.body);
          t.getPropertyValue("--q-size-sm") && ["sm", "md", "lg", "xl"].forEach(function (i) {
            e.sizes[i] = parseInt(t.getPropertyValue("--q-size-" + i), 10);
          }), e.setSizes = function (t) {
            ["sm", "md", "lg", "xl"].forEach(function (i) {
              t[i] && (e.sizes[i] = t[i]);
            }), c();
          }, e.setDebounce = function (t) {
            var e = function e() {
              c(!0);
            };

            a && window.removeEventListener("resize", a, L.passive), a = t > 0 ? Zi(e, t) : e, window.addEventListener("resize", a, L.passive);
          }, e.setDebounce(l || 100), Object.keys(h).length > 0 ? (e.setSizes(h), h = null) : c();
        };

        s ? o.takeover.push(u) : u(), r.util.defineReactive(n, "screen", this);
      }
    }
  };

  function Do() {
    var t = function t() {};

    return {
      has: t,
      get: {
        length: t,
        item: t,
        index: t,
        all: t
      },
      set: t,
      remove: t,
      clear: t,
      isEmpty: t
    };
  }

  function zo(t) {
    var e = window[t + "Storage"],
        i = function i(t) {
      var i = e.getItem(t);
      return i ? function (t) {
        var e, i;
        if (t.length < 9) return t;

        switch (e = t.substr(0, 8), i = t.substring(9), e) {
          case "__q_date":
            return new Date(i);

          case "__q_expr":
            return new RegExp(i);

          case "__q_numb":
            return Number(i);

          case "__q_bool":
            return Boolean("1" === i);

          case "__q_strn":
            return "" + i;

          case "__q_objt":
            return JSON.parse(i);

          default:
            return t;
        }
      }(i) : null;
    };

    return {
      has: function has(t) {
        return null !== e.getItem(t);
      },
      get: {
        length: function length() {
          return e.length;
        },
        item: i,
        index: function index(t) {
          if (t < e.length) return i(e.key(t));
        },
        all: function all() {
          for (var t, s = {}, n = e.length, o = 0; o < n; o++) {
            s[t = e.key(o)] = i(t);
          }

          return s;
        }
      },
      set: function set(t, i) {
        e.setItem(t, function (t) {
          return "[object Date]" === Object.prototype.toString.call(t) ? "__q_date|" + t.toUTCString() : "[object RegExp]" === Object.prototype.toString.call(t) ? "__q_expr|" + t.source : "number" == typeof t ? "__q_numb|" + t : "boolean" == typeof t ? "__q_bool|" + (t ? "1" : "0") : "string" == typeof t ? "__q_strn|" + t : "function" == typeof t ? "__q_strn|" + t.toString() : t === Object(t) ? "__q_objt|" + JSON.stringify(t) : t;
        }(i));
      },
      remove: function remove(t) {
        e.removeItem(t);
      },
      clear: function clear() {
        e.clear();
      },
      isEmpty: function isEmpty() {
        return 0 === e.length;
      }
    };
  }

  var Ro = {
    install: function install(t) {
      var e = t.$q;
      if (n) e.localStorage = Do();else if (r()) {
        var i = zo("local");
        e.localStorage = i, Object.assign(this, i);
      }
    }
  },
      Io = {
    install: function install(t) {
      var e = t.$q;
      if (n) e.sessionStorage = Do();else if (r()) {
        var i = zo("session");
        e.sessionStorage = i, Object.assign(this, i);
      }
    }
  },
      Ho = Object.freeze({
    ActionSheet: Gn,
    AddressbarColor: to,
    AppFullscreen: io,
    AppVisibility: so,
    Cookies: mo,
    Dialog: go,
    LoadingBar: vo,
    Loading: yo,
    Meta: Lo,
    Notify: No,
    Platform: l,
    Screen: Oo,
    LocalStorage: Ro,
    SessionStorage: Io
  });
  var Fo = Object.freeze({
    animate: Oe,
    clone: ci,
    colors: w,
    date: Hi,
    debounce: Zi,
    dom: X,
    easing: Le,
    event: A,
    extend: ps,
    filter: Xt,
    format: Bt,
    frameDebounce: oe,
    noop: function noop() {},
    openURL: function openURL(t, e) {
      if (l.is.cordova && navigator && navigator.app) return navigator.app.loadUrl(t, {
        openExternal: !0
      });
      var i = window.open(t, "_blank");
      if (i) return i.focus(), i;
      e();
    },
    scroll: nt,
    throttle: li,
    uid: Zt
  });
  return void 0 === t ? console.error("[ Quasar ] Vue is required to run. Please add a script tag for it before loading Quasar.") : t.use({
    install: function install(t, e) {
      if (void 0 === e && (e = {}), !this.__installed) {
        this.__installed = !0;
        var s = e.config || {};

        if (l.install($, q, t), x.install($, q, s), c.install($, s), u.install($, q, t, e.i18n), S.install($, t, e.iconSet), i ? t.mixin({
          beforeCreate: function beforeCreate() {
            this.$q = this.$root.$options.$q;
          }
        }) : t.prototype.$q = $, e.components && Object.keys(e.components).forEach(function (i) {
          var s = e.components[i];
          void 0 === s.name || void 0 === s.render && void 0 === s.mixins || t.component(s.name, s);
        }), e.directives && Object.keys(e.directives).forEach(function (i) {
          var s = e.directives[i];
          void 0 !== s.name && void 0 !== s.unbind && t.directive(s.name, s);
        }), e.plugins) {
          var n = {
            $q: $,
            queues: q,
            Vue: t,
            cfg: s
          };
          Object.keys(e.plugins).forEach(function (t) {
            var i = e.plugins[t];
            "function" == typeof i.install && i !== l && i.install(n);
          });
        }
      }
    }
  }, {
    components: In,
    directives: Yn,
    plugins: Ho,
    config: "undefined" != typeof window && window.quasarConfig || {}
  }), {
    version: "0.17.8",
    theme: "mat",
    i18n: u,
    icons: S,
    components: In,
    directives: Yn,
    plugins: Ho,
    utils: Fo
  };
});

/***/ }),

/***/ "./resources/sass/app.scss":
/*!*********************************!*\
  !*** ./resources/sass/app.scss ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ 0:
/*!*************************************************************!*\
  !*** multi ./resources/js/app.js ./resources/sass/app.scss ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! C:\Users\Anderson\git\ogiganteestadepe\resources\js\app.js */"./resources/js/app.js");
module.exports = __webpack_require__(/*! C:\Users\Anderson\git\ogiganteestadepe\resources\sass\app.scss */"./resources/sass/app.scss");


/***/ })

/******/ });